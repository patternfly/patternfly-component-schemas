{
  "KeyboardHandler": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "KeyboardHandler Props",
    "description": "Props for the KeyboardHandler component",
    "properties": {
      "additionalKeyHandler": {
        "description": "Additional key handling outside of the included arrow keys, enter, and space handling (Function: (event: KeyboardEvent) => void)"
      },
      "containerRef": {
        "description": "Reference of the container to apply keyboard interaction (Type: React.RefObject<any>)",
        "default": null
      },
      "createNavigableElements": {
        "description": "Callback returning an array of navigable elements to be traversable via vertical arrow keys. This array should not include non-navigable elements such as disabled elements. (Type: () => Element[])",
        "type": "array",
        "default": "() => null as Element[]"
      },
      "getFocusableElement": {
        "description": "Callback returning the focusable element of a given element from the navigable elements array (Function: (navigableElement: Element) => Element)",
        "default": "(navigableElement: Element) => navigableElement"
      },
      "isActiveElement": {
        "description": "Callback to determine if a given element from the navigable elements array is the active element of the page (Function: (navigableElement: Element) => boolean)",
        "default": "(navigableElement: Element) => document.activeElement === navigableElement"
      },
      "isEventFromContainer": {
        "description": "Callback to determine if a given event is from the container. By default the function conducts a basic check to see if the containerRef contains the event target (Function: (event: KeyboardEvent) => boolean)"
      },
      "noEnterHandling": {
        "description": "Flag indicating that the included enter key handling should be ignored",
        "type": "boolean",
        "default": false
      },
      "noHorizontalArrowHandling": {
        "description": "Flag indicating that the included horizontal arrow key handling should be ignored",
        "type": "boolean",
        "default": false
      },
      "noSpaceHandling": {
        "description": "Flag indicating that the included space key handling should be ignored",
        "type": "boolean",
        "default": false
      },
      "noVerticalArrowHandling": {
        "description": "Flag indicating that the included vertical arrow key handling should be ignored",
        "type": "boolean",
        "default": false
      },
      "onlyTraverseSiblings": {
        "description": "Flag indicating that next focusable element of a horizontal movement will be this element's sibling",
        "type": "boolean",
        "default": true
      },
      "updateTabIndex": {
        "description": "Flag indicating that the tabIndex of the currently focused element and next focused element should be updated, in the case of using a roving tabIndex",
        "type": "boolean",
        "default": true
      },
      "validSiblingTags": {
        "description": "Valid sibling tags that horizontal arrow handling will focus (Type: string[])",
        "type": "array",
        "default": "['BUTTON', 'A']"
      }
    },
    "additionalProperties": false
  },
  "SampleDataRow": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SampleDataRow Props",
    "description": "Props for the SampleDataRow component",
    "properties": {
      "applications": {
        "description": "",
        "type": "number"
      },
      "lastModified": {
        "description": "",
        "type": "string"
      },
      "name": {
        "description": "",
        "type": "string"
      },
      "threads": {
        "description": "",
        "type": "number"
      },
      "url": {
        "description": "",
        "type": "string"
      },
      "workspaces": {
        "description": "",
        "type": "number"
      }
    },
    "required": [
      "applications",
      "lastModified",
      "name",
      "threads",
      "url",
      "workspaces"
    ],
    "additionalProperties": false
  },
  "DashboardWrapper": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DashboardWrapper Props",
    "description": "Props for the DashboardWrapper component",
    "properties": {
      "hasDefaultBreadcrumb": {
        "description": "Flag to render sample breadcrumb if custom breadcrumb not passed",
        "type": "boolean"
      },
      "hasPageTemplateTitle": {
        "description": "Flag to render sample page title if custom title not passed",
        "type": "boolean"
      },
      "sidebarNavOpen": {
        "description": "Programmatically manage if the sidebar nav is shown",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "DashboardHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DashboardHeader Props",
    "description": "Props for the DashboardHeader component",
    "properties": {},
    "additionalProperties": false
  },
  "SplitItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SplitItem Props",
    "description": "Props for the SplitItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the split layout item. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the split layout item.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. Defaults to div. (React component or element)",
        "default": "'div'"
      },
      "isFilled": {
        "description": "Flag indicating if this split layout item should fill the available horizontal space.",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "Split": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Split Props",
    "description": "Props for the Split component",
    "properties": {
      "children": {
        "description": "content rendered inside the split layout. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the split layout.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. Defaults to div. (React component or element)",
        "default": "'div'"
      },
      "hasGutter": {
        "description": "Adds space between children.",
        "type": "boolean",
        "default": false
      },
      "isWrappable": {
        "description": "Allows children to wrap.",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "StackItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "StackItem Props",
    "description": "Props for the StackItem component",
    "properties": {
      "children": {
        "description": "Additional classes added to the stack layout item. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Content rendered inside the stack layout item.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. Defaults to div. (React component or element)",
        "default": "'div'"
      },
      "isFilled": {
        "description": "Flag indicating if this stack layout item should fill the available vertical space.",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "Stack": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Stack Props",
    "description": "Props for the Stack component",
    "properties": {
      "children": {
        "description": "Content rendered inside the stack layout. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the stack layout.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. Defaults to div. (React component or element)",
        "default": "'div'"
      },
      "hasGutter": {
        "description": "Adds space between children.",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "LevelItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LevelItem Props",
    "description": "Props for the LevelItem component",
    "properties": {
      "children": {
        "description": "content rendered inside the Level Layout Item (React component or element)",
        "default": null
      }
    },
    "additionalProperties": false
  },
  "Level": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Level Props",
    "description": "Props for the Level component",
    "properties": {
      "children": {
        "description": "content rendered inside the Level layout (React component or element)",
        "default": null
      },
      "className": {
        "description": "additional classes added to the Level layout",
        "type": "string",
        "default": "''"
      },
      "hasGutter": {
        "description": "Adds space between children.",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "FlexItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FlexItem Props",
    "description": "Props for the FlexItem component",
    "properties": {
      "align": {
        "description": "Value to use for margin: auto at various breakpoints",
        "enum": [
          "alignLeft",
          "alignRight",
          "alignLeft",
          "alignRight",
          "alignLeft",
          "alignRight",
          "alignLeft",
          "alignRight",
          "alignLeft",
          "alignRight",
          "2xl",
          "alignLeft",
          "alignRight"
        ]
      },
      "alignSelf": {
        "description": "Value to add for align-self property at various breakpoints",
        "enum": [
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "2xl",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline"
        ]
      },
      "children": {
        "description": "content rendered inside the Flex layout (React component or element)",
        "default": null
      },
      "className": {
        "description": "additional classes added to the Flex layout",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: React.ElementType<any> | React.ComponentType<any>)",
        "default": "'div'"
      },
      "flex": {
        "description": "Value to add for flex property at various breakpoints",
        "enum": [
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "2xl",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4"
        ]
      },
      "fullWidth": {
        "description": "Whether to set width: 100% at various breakpoints (Type: {\n  default?: 'fullWidth';\n  sm?: 'fullWidth';\n  md?: 'fullWidth';\n  lg?: 'fullWidth';\n  xl?: 'fullWidth';\n  '2xl'?: 'fullWidth';\n})"
      },
      "grow": {
        "description": "Whether to add flex: grow at various breakpoints (Type: {\n  default?: 'grow';\n  sm?: 'grow';\n  md?: 'grow';\n  lg?: 'grow';\n  xl?: 'grow';\n  '2xl'?: 'grow';\n})"
      },
      "order": {
        "description": "Modifies the flex layout element order property (Type: {\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      },
      "shrink": {
        "description": "Whether to add flex: shrink at various breakpoints (Type: {\n  default?: 'shrink';\n  sm?: 'shrink';\n  md?: 'shrink';\n  lg?: 'shrink';\n  xl?: 'shrink';\n  '2xl'?: 'shrink';\n})"
      },
      "spacer": {
        "description": "Spacers at various breakpoints",
        "enum": [
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "2xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl"
        ]
      }
    },
    "additionalProperties": false
  },
  "Flex": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Flex Props",
    "description": "Props for the Flex component",
    "properties": {
      "align": {
        "description": "Value to use for margin: auto at various breakpoints",
        "enum": [
          "alignLeft",
          "alignRight",
          "alignLeft",
          "alignRight",
          "alignLeft",
          "alignRight",
          "alignLeft",
          "alignRight",
          "alignLeft",
          "alignRight",
          "2xl",
          "alignLeft",
          "alignRight"
        ]
      },
      "alignContent": {
        "description": "Value to add for align-content property at various breakpoints",
        "enum": [
          "alignContentFlexStart",
          "alignContentFlexEnd",
          "alignContentCenter",
          "alignContentStretch",
          "alignContentSpaceBetween",
          "alignContentSpaceAround",
          "alignContentFlexStart",
          "alignContentFlexEnd",
          "alignContentCenter",
          "alignContentStretch",
          "alignContentSpaceBetween",
          "alignContentSpaceAround",
          "alignContentFlexStart",
          "alignContentFlexEnd",
          "alignContentCenter",
          "alignContentStretch",
          "alignContentSpaceBetween",
          "alignContentSpaceAround",
          "alignContentFlexStart",
          "alignContentFlexEnd",
          "alignContentCenter",
          "alignContentStretch",
          "alignContentSpaceBetween",
          "alignContentSpaceAround",
          "alignContentFlexStart",
          "alignContentFlexEnd",
          "alignContentCenter",
          "alignContentStretch",
          "alignContentSpaceBetween",
          "alignContentSpaceAround",
          "2xl",
          "alignContentFlexStart",
          "alignContentFlexEnd",
          "alignContentCenter",
          "alignContentStretch",
          "alignContentSpaceBetween",
          "alignContentSpaceAround"
        ]
      },
      "alignItems": {
        "description": "Value to add for align-items property at various breakpoints",
        "enum": [
          "alignItemsFlexStart",
          "alignItemsFlexEnd",
          "alignItemsCenter",
          "alignItemsStretch",
          "alignItemsBaseline",
          "alignItemsFlexStart",
          "alignItemsFlexEnd",
          "alignItemsCenter",
          "alignItemsStretch",
          "alignItemsBaseline",
          "alignItemsFlexStart",
          "alignItemsFlexEnd",
          "alignItemsCenter",
          "alignItemsStretch",
          "alignItemsBaseline",
          "alignItemsFlexStart",
          "alignItemsFlexEnd",
          "alignItemsCenter",
          "alignItemsStretch",
          "alignItemsBaseline",
          "alignItemsFlexStart",
          "alignItemsFlexEnd",
          "alignItemsCenter",
          "alignItemsStretch",
          "alignItemsBaseline",
          "2xl",
          "alignItemsFlexStart",
          "alignItemsFlexEnd",
          "alignItemsCenter",
          "alignItemsStretch",
          "alignItemsBaseline"
        ]
      },
      "alignSelf": {
        "description": "Value to add for align-self property at various breakpoints",
        "enum": [
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline",
          "2xl",
          "alignSelfFlexStart",
          "alignSelfFlexEnd",
          "alignSelfCenter",
          "alignSelfStretch",
          "alignSelfBaseline"
        ]
      },
      "children": {
        "description": "content rendered inside the Flex layout (React component or element)",
        "default": null
      },
      "className": {
        "description": "additional classes added to the Flex layout",
        "type": "string",
        "default": "''"
      },
      "columnGap": {
        "description": "Gap beween columns at various breakpoints. This will override spacers for the main axis.",
        "enum": [
          "columnGap",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap2xl",
          "columnGap3xl",
          "columnGap4xl",
          "columnGap",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap2xl",
          "columnGap3xl",
          "columnGap4xl",
          "columnGap",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap2xl",
          "columnGap3xl",
          "columnGap4xl",
          "columnGap",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap2xl",
          "columnGap3xl",
          "columnGap4xl",
          "columnGap",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap2xl",
          "columnGap3xl",
          "columnGap4xl",
          "2xl",
          "columnGap",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap2xl",
          "columnGap3xl",
          "columnGap4xl"
        ]
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: React.ElementType<any> | React.ComponentType<any>)",
        "default": "'div'"
      },
      "direction": {
        "description": "Value to add for flex-direction property at various breakpoints",
        "enum": [
          "column",
          "columnReverse",
          "row",
          "rowReverse",
          "column",
          "columnReverse",
          "row",
          "rowReverse",
          "column",
          "columnReverse",
          "row",
          "rowReverse",
          "column",
          "columnReverse",
          "row",
          "rowReverse",
          "column",
          "columnReverse",
          "row",
          "rowReverse",
          "2xl",
          "column",
          "columnReverse",
          "row",
          "rowReverse"
        ]
      },
      "display": {
        "description": "Value to set to display property at various breakpoints",
        "enum": [
          "inlineFlex",
          "flex",
          "inlineFlex",
          "flex",
          "inlineFlex",
          "flex",
          "inlineFlex",
          "flex",
          "inlineFlex",
          "2xl",
          "flex",
          "inlineFlex"
        ]
      },
      "flex": {
        "description": "Value to add for flex property at various breakpoints",
        "enum": [
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4",
          "2xl",
          "flexDefault",
          "flexNone",
          "flex_1",
          "flex_2",
          "flex_3",
          "flex_4"
        ]
      },
      "flexWrap": {
        "description": "Value to set for flex-wrap property at various breakpoints",
        "enum": [
          "wrap",
          "wrapReverse",
          "nowrap",
          "wrap",
          "wrapReverse",
          "nowrap",
          "wrap",
          "wrapReverse",
          "nowrap",
          "wrap",
          "wrapReverse",
          "nowrap",
          "wrap",
          "wrapReverse",
          "nowrap",
          "2xl",
          "wrap",
          "wrapReverse",
          "nowrap"
        ]
      },
      "fullWidth": {
        "description": "Whether to set width: 100% at various breakpoints (Type: {\n  default?: 'fullWidth';\n  sm?: 'fullWidth';\n  md?: 'fullWidth';\n  lg?: 'fullWidth';\n  xl?: 'fullWidth';\n  '2xl'?: 'fullWidth';\n})"
      },
      "gap": {
        "description": "Gap between items at various breakpoints. This will override spacers for the main axis.",
        "enum": [
          "gap",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap2xl",
          "gap3xl",
          "gap4xl",
          "gap",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap2xl",
          "gap3xl",
          "gap4xl",
          "gap",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap2xl",
          "gap3xl",
          "gap4xl",
          "gap",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap2xl",
          "gap3xl",
          "gap4xl",
          "gap",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap2xl",
          "gap3xl",
          "gap4xl",
          "2xl",
          "gap",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap2xl",
          "gap3xl",
          "gap4xl"
        ]
      },
      "grow": {
        "description": "Whether to add flex: grow at various breakpoints (Type: {\n  default?: 'grow';\n  sm?: 'grow';\n  md?: 'grow';\n  lg?: 'grow';\n  xl?: 'grow';\n  '2xl'?: 'grow';\n})"
      },
      "justifyContent": {
        "description": "Value to add for justify-content property at various breakpoints",
        "enum": [
          "justifyContentFlexStart",
          "justifyContentFlexEnd",
          "justifyContentCenter",
          "justifyContentSpaceBetween",
          "justifyContentSpaceAround",
          "justifyContentSpaceEvenly",
          "justifyContentFlexStart",
          "justifyContentFlexEnd",
          "justifyContentCenter",
          "justifyContentSpaceBetween",
          "justifyContentSpaceAround",
          "justifyContentSpaceEvenly",
          "justifyContentFlexStart",
          "justifyContentFlexEnd",
          "justifyContentCenter",
          "justifyContentSpaceBetween",
          "justifyContentSpaceAround",
          "justifyContentSpaceEvenly",
          "justifyContentFlexStart",
          "justifyContentFlexEnd",
          "justifyContentCenter",
          "justifyContentSpaceBetween",
          "justifyContentSpaceAround",
          "justifyContentSpaceEvenly",
          "justifyContentFlexStart",
          "justifyContentFlexEnd",
          "justifyContentCenter",
          "justifyContentSpaceBetween",
          "justifyContentSpaceAround",
          "justifyContentSpaceEvenly",
          "2xl",
          "justifyContentFlexStart",
          "justifyContentFlexEnd",
          "justifyContentCenter",
          "justifyContentSpaceBetween",
          "justifyContentSpaceAround",
          "justifyContentSpaceEvenly"
        ]
      },
      "order": {
        "description": "Modifies the flex layout element order property (Type: {\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      },
      "rowGap": {
        "description": "Gap between rows at various breakpoints. This will override spacers for the main axis.",
        "enum": [
          "rowGap",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap2xl",
          "rowGap3xl",
          "rowGap4xl",
          "rowGap",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap2xl",
          "rowGap3xl",
          "rowGap4xl",
          "rowGap",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap2xl",
          "rowGap3xl",
          "rowGap4xl",
          "rowGap",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap2xl",
          "rowGap3xl",
          "rowGap4xl",
          "rowGap",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap2xl",
          "rowGap3xl",
          "rowGap4xl",
          "2xl",
          "rowGap",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap2xl",
          "rowGap3xl",
          "rowGap4xl"
        ]
      },
      "shrink": {
        "description": "Whether to add flex: shrink at various breakpoints (Type: {\n  default?: 'shrink';\n  sm?: 'shrink';\n  md?: 'shrink';\n  lg?: 'shrink';\n  xl?: 'shrink';\n  '2xl'?: 'shrink';\n})"
      },
      "spaceItems": {
        "description": "Space items at various breakpoints",
        "enum": [
          "spaceItemsNone",
          "spaceItemsXs",
          "spaceItemsSm",
          "spaceItemsMd",
          "spaceItemsLg",
          "spaceItemsXl",
          "spaceItems2xl",
          "spaceItems3xl",
          "spaceItems4xl",
          "spaceItemsNone",
          "spaceItemsXs",
          "spaceItemsSm",
          "spaceItemsMd",
          "spaceItemsLg",
          "spaceItemsXl",
          "spaceItems2xl",
          "spaceItems3xl",
          "spaceItems4xl",
          "spaceItemsNone",
          "spaceItemsXs",
          "spaceItemsSm",
          "spaceItemsMd",
          "spaceItemsLg",
          "spaceItemsXl",
          "spaceItems2xl",
          "spaceItems3xl",
          "spaceItems4xl",
          "spaceItemsNone",
          "spaceItemsXs",
          "spaceItemsSm",
          "spaceItemsMd",
          "spaceItemsLg",
          "spaceItemsXl",
          "spaceItems2xl",
          "spaceItems3xl",
          "spaceItems4xl",
          "spaceItemsNone",
          "spaceItemsXs",
          "spaceItemsSm",
          "spaceItemsMd",
          "spaceItemsLg",
          "spaceItemsXl",
          "spaceItems2xl",
          "spaceItems3xl",
          "spaceItems4xl",
          "2xl",
          "spaceItemsNone",
          "spaceItemsXs",
          "spaceItemsSm",
          "spaceItemsMd",
          "spaceItemsLg",
          "spaceItemsXl",
          "spaceItems2xl",
          "spaceItems3xl",
          "spaceItems4xl"
        ]
      },
      "spacer": {
        "description": "Spacers at various breakpoints",
        "enum": [
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl",
          "2xl",
          "spacerNone",
          "spacerXs",
          "spacerSm",
          "spacerMd",
          "spacerLg",
          "spacerXl",
          "spacer2xl",
          "spacer3xl",
          "spacer4xl"
        ]
      }
    },
    "additionalProperties": false
  },
  "GridItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "GridItem Props",
    "description": "Props for the GridItem component",
    "properties": {
      "children": {
        "description": "content rendered inside the Grid Layout Item (React component or element)",
        "default": null
      },
      "className": {
        "description": "additional classes added to the Grid Layout Item",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: React.ElementType<any> | React.ComponentType<any>)",
        "default": "'div'"
      },
      "lg": {
        "description": "the number of columns the grid item spans on large device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "lgOffset": {
        "description": "the number of columns the grid item is offset on large device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "lgRowSpan": {
        "description": "the number of rows the grid item spans on large device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "md": {
        "description": "the number of columns the grid item spans on medium device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "mdOffset": {
        "description": "the number of columns the grid item is offset on medium device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "mdRowSpan": {
        "description": "the number of rows the grid item spans on medium device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "offset": {
        "description": "the number of columns a grid item is offset (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)",
        "default": null
      },
      "order": {
        "description": "Modifies the flex layout element order property (Type: {\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      },
      "rowSpan": {
        "description": "the number of rows the grid item spans. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)",
        "default": null
      },
      "sm": {
        "description": "the number of columns the grid item spans on small device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "smOffset": {
        "description": "the number of columns the grid item is offset on small device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "smRowSpan": {
        "description": "the number of rows the grid item spans on medium device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "span": {
        "description": "the number of columns the grid item spans. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)",
        "default": null
      },
      "xl": {
        "description": "the number of columns the grid item spans on xLarge device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "xl2": {
        "description": "the number of columns the grid item spans on 2xLarge device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "xl2Offset": {
        "description": "the number of columns the grid item is offset on 2xLarge device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "xl2RowSpan": {
        "description": "the number of rows the grid item spans on 2xLarge device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "xlOffset": {
        "description": "the number of columns the grid item is offset on xLarge device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "xlRowSpan": {
        "description": "the number of rows the grid item spans on large device. Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      }
    },
    "additionalProperties": false
  },
  "gridSpans": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "gridSpans Props",
    "description": "Props for the gridSpans component",
    "properties": {},
    "additionalProperties": false
  },
  "Grid": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Grid Props",
    "description": "Props for the Grid component",
    "properties": {
      "children": {
        "description": "content rendered inside the Grid layout (React component or element)",
        "default": null
      },
      "className": {
        "description": "additional classes added to the Grid layout",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: React.ElementType<any> | React.ComponentType<any>)",
        "default": "'div'"
      },
      "hasGutter": {
        "description": "Adds space between children.",
        "type": "boolean"
      },
      "lg": {
        "description": "the number of columns all grid items should span on a large device (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "md": {
        "description": "the number of columns all grid items should span on a medium device (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "order": {
        "description": "Modifies the flex layout element order property (Type: {\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      },
      "sm": {
        "description": "the number of columns all grid items should span on a small device (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "span": {
        "description": "The number of rows a column in the grid should span.  Value should be a number 1-12 (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)",
        "default": null
      },
      "xl": {
        "description": "the number of columns all grid items should span on a xLarge device (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      },
      "xl2": {
        "description": "the number of columns all grid items should span on a 2xLarge device (Type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)"
      }
    },
    "additionalProperties": false
  },
  "gridItemSpanValueShape": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "gridItemSpanValueShape Props",
    "description": "Props for the gridItemSpanValueShape component",
    "properties": {},
    "additionalProperties": false
  },
  "GalleryItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "GalleryItem Props",
    "description": "Props for the GalleryItem component",
    "properties": {
      "children": {
        "description": "content rendered inside the Gallery Item (React component or element)",
        "default": null
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: React.ElementType<any> | React.ComponentType<any>)",
        "default": "'div'"
      }
    },
    "additionalProperties": false
  },
  "Gallery": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Gallery Props",
    "description": "Props for the Gallery component",
    "properties": {
      "children": {
        "description": "content rendered inside the Gallery layout (React component or element)",
        "default": null
      },
      "className": {
        "description": "additional classes added to the Gallery layout",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: React.ElementType<any> | React.ComponentType<any>)",
        "default": "'div'"
      },
      "hasGutter": {
        "description": "Adds space between children.",
        "type": "boolean",
        "default": false
      },
      "maxWidths": {
        "description": "Maximum widths at various breakpoints. (Type: {\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      },
      "minWidths": {
        "description": "Minimum widths at various breakpoints. (Type: {\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      }
    },
    "additionalProperties": false
  },
  "Bullseye": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Bullseye Props",
    "description": "Props for the Bullseye component",
    "properties": {
      "children": {
        "description": "content rendered inside the Bullseye layout (React component or element)",
        "default": null
      },
      "className": {
        "description": "additional classes added to the Bullseye layout",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: JSX.IntrinsicElements)",
        "default": "'div'"
      }
    },
    "additionalProperties": false
  },
  "Popper": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Popper Props",
    "description": "Props for the Popper component",
    "properties": {
      "animationDuration": {
        "description": " (Type: No type info)",
        "default": 0
      },
      "appendTo": {
        "description": " (Type: No type info)",
        "default": "() => document.body"
      },
      "direction": {
        "description": " (Type: No type info)",
        "default": "'down'"
      },
      "distance": {
        "description": " (Type: No type info)",
        "default": 0
      },
      "enableFlip": {
        "description": " (Type: No type info)",
        "default": true
      },
      "entryDelay": {
        "description": " (Type: No type info)",
        "default": 0
      },
      "exitDelay": {
        "description": " (Type: No type info)",
        "default": 0
      },
      "flipBehavior": {
        "description": " (Type: No type info)",
        "default": "'flip'"
      },
      "isVisible": {
        "description": " (Type: No type info)",
        "default": true
      },
      "minWidth": {
        "description": " (Type: No type info)",
        "default": "'trigger'"
      },
      "onHidden": {
        "description": " (Type: No type info)",
        "default": "() => {}"
      },
      "onHide": {
        "description": " (Type: No type info)",
        "default": "() => {}"
      },
      "onMount": {
        "description": " (Type: No type info)",
        "default": "() => {}"
      },
      "onShow": {
        "description": " (Type: No type info)",
        "default": "() => {}"
      },
      "onShown": {
        "description": " (Type: No type info)",
        "default": "() => {}"
      },
      "position": {
        "description": " (Type: No type info)",
        "default": "'start'"
      },
      "preventOverflow": {
        "description": " (Type: No type info)",
        "default": false
      },
      "zIndex": {
        "description": " (Type: No type info)",
        "default": 9999
      }
    },
    "additionalProperties": false
  },
  "FocusTrap": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FocusTrap Props",
    "description": "Props for the FocusTrap component",
    "properties": {
      "active": {
        "description": "",
        "type": "boolean",
        "default": true
      },
      "focusTrapOptions": {
        "description": " (Type: FocusTrapOptions)",
        "default": {}
      },
      "paused": {
        "description": "",
        "type": "boolean",
        "default": false
      },
      "preventScrollOnDeactivate": {
        "description": "Prevent from scrolling to the previously focused element on deactivation",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "WizardBasicStep": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardBasicStep Props",
    "description": "Type used to define 'basic' steps, or in other words, steps that are neither parents or children of parents.",
    "properties": {
      "component": {
        "description": "Content shown when the step's navigation item is selected. When treated as a parent step, only sub-step content will be shown. (Type: React.ReactElement<any>)"
      },
      "footer": {
        "description": "Replaces the step's footer. The step's footer takes precedence over the wizard's footer. (Type: React.ReactElement<any> | Partial<WizardFooterProps>)"
      },
      "id": {
        "description": "Unique identifier (Type: string | number)"
      },
      "index": {
        "description": "Order index of step (starts at 1)",
        "type": "number"
      },
      "isDisabled": {
        "description": "Flag to disable the step's navigation item",
        "type": "boolean"
      },
      "isHidden": {
        "description": "Flag to determine whether the step is hidden",
        "type": "boolean"
      },
      "isVisited": {
        "description": "Flag to represent whether the step has been visited (navigated to)",
        "type": "boolean"
      },
      "name": {
        "description": "Name of the step's navigation item (React component or element)"
      },
      "navItem": {
        "description": "Replaces the step's navigation item or its properties. (Type: WizardNavItemType)"
      },
      "status": {
        "description": "Used to determine icon next to the step's navItem",
        "enum": [
          "default",
          "error",
          "success"
        ]
      }
    },
    "required": [
      "id",
      "index",
      "name"
    ],
    "additionalProperties": false
  },
  "WizardParentStep": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardParentStep Props",
    "description": "Type used to define parent steps.",
    "properties": {
      "isExpandable": {
        "description": "Flag to determine whether the step can expand or not.",
        "type": "boolean"
      },
      "subStepIds": {
        "description": "Nested step IDs (Type: (string | number)[])"
      }
    },
    "required": [
      "subStepIds"
    ],
    "additionalProperties": false
  },
  "WizardSubStep": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardSubStep Props",
    "description": "Type used to define sub-steps.",
    "properties": {
      "parentId": {
        "description": "Unique identifier of the parent step (Type: string | number)"
      }
    },
    "required": [
      "parentId"
    ],
    "additionalProperties": false
  },
  "WizardStepType": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardStepType Props",
    "description": "Encompasses all step type variants that are internally controlled by the Wizard.",
    "properties": {},
    "additionalProperties": false
  },
  "WizardFooterType": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardFooterType Props",
    "description": "Props for the WizardFooterType component",
    "properties": {},
    "additionalProperties": false
  },
  "WizardNavType": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardNavType Props",
    "description": "Props for the WizardNavType component",
    "properties": {},
    "additionalProperties": false
  },
  "WizardNavItemType": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardNavItemType Props",
    "description": "Props for the WizardNavItemType component",
    "properties": {},
    "additionalProperties": false
  },
  "CustomWizardNavFunction": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CustomWizardNavFunction Props",
    "description": "Callback for the Wizard's 'nav' property. Returns element which replaces the Wizard's default navigation.",
    "properties": {},
    "additionalProperties": false
  },
  "CustomWizardNavItemFunction": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CustomWizardNavItemFunction Props",
    "description": "Callback for the Wizard's 'navItem' property. Returns element which replaces the WizardStep's default navigation item.",
    "properties": {},
    "additionalProperties": false
  },
  "CustomWizardFooterFunction": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CustomWizardFooterFunction Props",
    "description": "Callback for the Wizard's 'footer' property. Returns element which replaces the Wizard's default footer.",
    "properties": {},
    "additionalProperties": false
  },
  "WizardToggle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardToggle Props",
    "description": "Used to toggle between step content, including the body and footer. This is also where the navigation and its expandability is controlled.",
    "properties": {
      "activeStep": {
        "description": "The current step (Type: WizardBasicStep | WizardParentStep | WizardSubStep)"
      },
      "aria-label": {
        "description": "The expandable dropdown button's aria-label",
        "type": "string",
        "default": "'Wizard toggle'"
      },
      "footer": {
        "description": "Wizard footer (Type: React.ReactElement<any>)"
      },
      "isNavExpanded": {
        "description": "Flag to determine whether the dropdown navigation is expanded",
        "type": "boolean"
      },
      "nav": {
        "description": "Wizard navigation (Type: React.ReactElement<WizardNavProps>)"
      },
      "steps": {
        "description": "List of steps and/or sub-steps (Type: WizardStepType[])",
        "type": "array"
      },
      "toggleNavExpanded": {
        "description": "Callback to expand or collapse the dropdown navigation (Type: (event: React.MouseEvent<HTMLButtonElement> | KeyboardEvent) => void)"
      }
    },
    "required": [
      "activeStep",
      "footer",
      "nav",
      "steps"
    ],
    "additionalProperties": false
  },
  "WizardStep": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardStep Props",
    "description": "The primary child component for Wizard. Step props are used for the list of steps managed in context.",
    "properties": {
      "body": {
        "description": "Props for WizardBody that wraps content by default. (Type: Omit<Omit<WizardBodyProps, 'children'>, 'children'>)"
      },
      "children": {
        "description": "Optional for when the step is used as a parent to sub-steps (React component or element)"
      },
      "footer": {
        "description": "Replaces the step's footer. The step's footer takes precedence over the wizard's footer. (Type: React.ReactElement<any> | Partial<WizardFooterProps>)"
      },
      "id": {
        "description": "Unique identifier (Type: string | number)"
      },
      "isDisabled": {
        "description": "Flag to disable the step's navigation item",
        "type": "boolean"
      },
      "isExpandable": {
        "description": "Flag to determine whether parent steps can expand or not. Defaults to false.",
        "type": "boolean"
      },
      "isHidden": {
        "description": "Flag to determine whether the step is hidden",
        "type": "boolean"
      },
      "name": {
        "description": "Name of the step's navigation item (React component or element)"
      },
      "navItem": {
        "description": "Replaces the step's navigation item or its properties. (Type: Partial<WizardNavItemProps> | CustomWizardNavItemFunction | React.ReactElement<any>)"
      },
      "status": {
        "description": "Used to determine icon next to the step's navigation item",
        "enum": [
          "default",
          "error",
          "success"
        ]
      },
      "steps": {
        "description": "Optional list of sub-steps (Type: React.ReactElement<WizardStepProps>[])",
        "type": "array"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "additionalProperties": false
  },
  "WizardNavItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardNavItem Props",
    "description": "Props for the WizardNavItem component",
    "properties": {
      "children": {
        "description": "Can nest a WizardNav component for substeps (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes spread to the wizard nav item",
        "type": "string"
      },
      "component": {
        "description": "Component used to render WizardNavItem",
        "enum": [
          "button",
          "a"
        ],
        "default": "'button'"
      },
      "content": {
        "description": "The content to display in the navigation item (React component or element)",
        "default": "''"
      },
      "href": {
        "description": "An optional url to use for when using an anchor component",
        "type": "string"
      },
      "id": {
        "description": "The id for the navigation item (Type: string | number)"
      },
      "isCurrent": {
        "description": "Whether the navigation item is the currently active item",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Whether the navigation item is disabled",
        "type": "boolean",
        "default": false
      },
      "isExpandable": {
        "description": "Flag indicating that this NavItem has child steps and is expandable",
        "type": "boolean",
        "default": false
      },
      "isVisited": {
        "description": "Whether the navigation item has been visited",
        "type": "boolean",
        "default": false
      },
      "onClick": {
        "description": "Callback for when the navigation item is clicked (Type: (event: React.MouseEvent<HTMLButtonElement> | React.MouseEvent<HTMLAnchorElement>, index: number) => any)"
      },
      "ouiaId": {
        "description": " (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean",
        "default": true
      },
      "status": {
        "description": "Used to determine the icon displayed next to content. Default has no icon.",
        "enum": [
          "default",
          "error",
          "success"
        ],
        "default": "'default'"
      },
      "stepIndex": {
        "description": "The step index passed into the onNavItemClick callback",
        "type": "number"
      },
      "target": {
        "description": "Where to display the linked URL when using an anchor component (Type: React.HTMLAttributeAnchorTarget)"
      }
    },
    "required": [
      "stepIndex"
    ],
    "additionalProperties": false
  },
  "WizardNavInternal": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardNavInternal Props",
    "description": "Hosts default wizard navigation logic by utilizing the wizard's context and WizardNav/WizardNavItem.\nThis component is not exposed to consumers.",
    "properties": {
      "isNavExpanded": {
        "description": "",
        "type": "boolean"
      },
      "nav": {
        "description": " (Type: Partial<WizardNavProps>)"
      },
      "navAriaLabel": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "isNavExpanded",
      "nav",
      "navAriaLabel"
    ],
    "additionalProperties": false
  },
  "WizardNav": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardNav Props",
    "description": "Props for the WizardNav component",
    "properties": {
      "aria-label": {
        "description": "Aria-label applied to the navigation element",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "Sets the aria-labelledby attribute on the navigation element",
        "type": "string"
      },
      "children": {
        "description": "children should be WizardNavItem components (Type: any)"
      },
      "className": {
        "description": "Additional classes spread to the wizard nav",
        "type": "string"
      },
      "isExpanded": {
        "description": "Whether the navigation is expanded",
        "type": "boolean",
        "default": false
      },
      "isInnerList": {
        "description": "True to return the inner list without the wrapping navigation element",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "WizardHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardHeader Props",
    "description": "Props for the WizardHeader component",
    "properties": {
      "className": {
        "description": "Additional classes spread to the wizard header",
        "type": "string"
      },
      "closeButtonAriaLabel": {
        "description": "Aria-label applied to the X (Close) button",
        "type": "string"
      },
      "description": {
        "description": "Description of the wizard (React component or element)"
      },
      "descriptionComponent": {
        "description": "Component type of the description",
        "enum": [
          "div",
          "p"
        ],
        "default": "'div'"
      },
      "descriptionId": {
        "description": "id for the description",
        "type": "string"
      },
      "isCloseHidden": {
        "description": "Flag indicating whether the close button should be in the header",
        "type": "boolean"
      },
      "onClose": {
        "description": "Callback function called when the X (Close) button is clicked (Function: (event: React.MouseEvent<HTMLButtonElement>) => void)",
        "default": "() => undefined"
      },
      "title": {
        "description": "Title of the wizard",
        "type": "string"
      },
      "titleId": {
        "description": "id for the title",
        "type": "string"
      }
    },
    "required": [
      "title"
    ],
    "additionalProperties": false
  },
  "WizardContextProvider": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardContextProvider Props",
    "description": "Props for the WizardContextProvider component",
    "properties": {},
    "additionalProperties": false
  },
  "WizardBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardBody Props",
    "description": "Used as a wrapper for WizardStep content, where the wrapping element is customizable.",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible name to the wrapper element when the content overflows and renders\na scrollbar.",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "Adds an accessible name to the wrapper element by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the content overflows and renders a scrollbar.",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered in the Wizard body (React component or element)"
      },
      "className": {
        "description": "Additional classes spread to the wizard body",
        "type": "string"
      },
      "component": {
        "description": "Component used as the wrapping content container (Type: React.ElementType)",
        "default": "'div'"
      },
      "hasNoPadding": {
        "description": "Flag to remove the default body padding",
        "type": "boolean",
        "default": false
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "Wizard": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Wizard Props",
    "description": "Wrapper for all steps and hosts state, including navigation helpers, within context.\nThe WizardContext provided by default gives any child of wizard access to those resources.",
    "properties": {
      "children": {
        "description": "Step components (React component or element)"
      },
      "className": {
        "description": "Additional classes spread to the wizard",
        "type": "string"
      },
      "footer": {
        "description": "Wizard footer (Type: Partial<WizardFooterProps> | CustomWizardFooterFunction | React.ReactElement<any>)"
      },
      "header": {
        "description": "Wizard header (React component or element)"
      },
      "height": {
        "description": "Custom height of the wizard (Type: number | string)"
      },
      "isProgressive": {
        "description": "Progressively shows steps, where all steps following the active step are hidden. Defaults to false.",
        "type": "boolean",
        "default": false
      },
      "isVisitRequired": {
        "description": "Disables steps that haven't been visited. Defaults to false.",
        "type": "boolean",
        "default": false
      },
      "nav": {
        "description": "Wizard navigation (Type: Partial<WizardNavProps> | CustomWizardNavFunction | React.ReactElement<any>)"
      },
      "navAriaLabel": {
        "description": "Aria-label for the Nav",
        "type": "string"
      },
      "onClose": {
        "description": "Callback function to close the wizard (Function: (event: React.MouseEvent<HTMLButtonElement>) => void)"
      },
      "onSave": {
        "description": "Callback function to save at the end of the wizard, if not specified uses onClose (Type: (event: React.MouseEvent<HTMLButtonElement>) => void | Promise<void>)"
      },
      "onStepChange": {
        "description": "Callback function when navigating between steps (Type: (\n  event: React.MouseEvent<HTMLButtonElement>,\n  currentStep: WizardStepType,\n  prevStep: WizardStepType,\n  scope: WizardStepChangeScope\n) => void | Promise<void>)"
      },
      "shouldFocusContent": {
        "description": "Flag indicating whether the wizard content should be focused after the onNext or onBack callbacks\nare called.",
        "type": "boolean",
        "default": true
      },
      "startIndex": {
        "description": "The initial index the wizard is to start on (1 or higher). Defaults to 1.",
        "type": "number",
        "default": 1
      },
      "width": {
        "description": "Custom width of the wizard (Type: number | string)"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "Truncate": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Truncate Props",
    "description": "Props for the Truncate component",
    "properties": {
      "className": {
        "description": "Class to add to outer span",
        "type": "string"
      },
      "content": {
        "description": "Text to truncate",
        "type": "string"
      },
      "position": {
        "description": "Where the text will be truncated",
        "enum": [
          "start",
          "middle",
          "end"
        ],
        "default": "'end'"
      },
      "tooltipPosition": {
        "description": "Tooltip position (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')",
        "default": "'top'"
      },
      "trailingNumChars": {
        "description": "The number of characters displayed in the second half of the truncation",
        "type": "number",
        "default": 7
      }
    },
    "required": [
      "content"
    ],
    "additionalProperties": false
  },
  "TreeViewSearch": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TreeViewSearch Props",
    "description": "Renders a search input for the tree view. This sub-component should be passed into the\ntree view component's toolbar property.",
    "properties": {
      "aria-label": {
        "description": "Accessible label for the search input.",
        "type": "string"
      },
      "className": {
        "description": "Classes applied to the wrapper for the search input.",
        "type": "string"
      },
      "id": {
        "description": "Id for the search input.",
        "type": "string"
      },
      "name": {
        "description": "Name for the search input.",
        "type": "string"
      },
      "onSearch": {
        "description": "Callback for search input. (Function: (event: React.ChangeEvent<HTMLInputElement>) => void)"
      }
    },
    "additionalProperties": false
  },
  "TreeViewRoot": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TreeViewRoot Props",
    "description": "Props for the TreeViewRoot component",
    "properties": {
      "children": {
        "description": "Child nodes of the tree view (React component or element)"
      },
      "className": {
        "description": "Class to add to add if not passed a parentItem",
        "type": "string"
      },
      "hasCheckboxes": {
        "description": "Flag indicating if the tree view has checkboxes.",
        "type": "boolean"
      },
      "hasGuides": {
        "description": "Flag indicating if tree view has guide lines.",
        "type": "boolean"
      },
      "hasSelectableNodes": {
        "description": "Flag indicating that tree nodes should be independently selectable, even when having children",
        "type": "boolean"
      },
      "variant": {
        "description": "Variant presentation styles for the tree view.",
        "enum": [
          "default",
          "compact",
          "compactNoBackground"
        ]
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "TreeViewListItemBase": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TreeViewListItemBase Props",
    "description": "Props for the TreeViewListItemBase component",
    "properties": {
      "action": {
        "description": "Action of a tree view item, which can be either a button or dropdown component. (React component or element)"
      },
      "activeItems": {
        "description": "Active items of tree view. (Type: TreeViewDataItem[])",
        "type": "array",
        "default": []
      },
      "badgeProps": {
        "description": "Additional properties of the tree view item badge. (Type: any)",
        "default": "{ isRead: true }"
      },
      "checkProps": {
        "description": "Additional properties of the tree view item checkbox. (Type: TreeViewCheckProps)",
        "default": "{\n  checked: false\n}"
      },
      "children": {
        "description": "Child nodes of a tree view item. (React component or element)",
        "default": null
      },
      "compareItems": {
        "description": "Callback for item comparison function. (Function: (item: TreeViewDataItem, itemToCheck: TreeViewDataItem) => boolean)"
      },
      "customBadgeContent": {
        "description": "Optional prop for a custom badge. (React component or element)"
      },
      "defaultExpanded": {
        "description": "Flag indicating if node is expanded by default.",
        "type": "boolean",
        "default": false
      },
      "expandedIcon": {
        "description": "Expanded icon of a tree view item. (React component or element)"
      },
      "hasBadge": {
        "description": "Flag indicating if a tree view item has a badge.",
        "type": "boolean",
        "default": false
      },
      "hasCheckbox": {
        "description": "Flag indicating if a tree view item has a checkbox.",
        "type": "boolean",
        "default": false
      },
      "icon": {
        "description": "Default icon of a tree view item. (React component or element)"
      },
      "id": {
        "description": "ID of a tree view item.",
        "type": "string"
      },
      "isCompact": {
        "description": "Flag indicating if the tree view is using a compact variation.",
        "type": "boolean"
      },
      "isExpanded": {
        "description": "Flag indicating if the node is expanded, overrides internal state.",
        "type": "boolean"
      },
      "isSelectable": {
        "description": "Flag indicating that tree nodes should be independently selectable, even when having\nchildren.",
        "type": "boolean",
        "default": false
      },
      "itemData": {
        "description": "Data structure of tree view item. (Type: TreeViewDataItem)"
      },
      "name": {
        "description": "Internal content of a tree view item. (React component or element)"
      },
      "onCheck": {
        "description": "Callback for item checkbox selection. (Function: (event: React.ChangeEvent<HTMLInputElement>, item: TreeViewDataItem, parent: TreeViewDataItem) => void)"
      },
      "onCollapse": {
        "description": "Callback for collapsing a node with children. (Function: (event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void)"
      },
      "onExpand": {
        "description": "Callback for expanding a node with children. (Function: (event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void)"
      },
      "onSelect": {
        "description": "Callback for item selection. Note: calling event.preventDefault() will prevent the node\nfrom toggling. (Function: (event: React.MouseEvent, item: TreeViewDataItem, parent: TreeViewDataItem) => void)"
      },
      "parentItem": {
        "description": "Parent item of tree view item. (Type: TreeViewDataItem)"
      },
      "title": {
        "description": "Title of a tree view item. (React component or element)"
      },
      "useMemo": {
        "description": "Flag indicating the tree view should utilize memoization to help render large data sets.\nSetting this property requires that the activeItems property is passed an array containing\nevery node in the selected item's path.",
        "type": "boolean"
      }
    },
    "required": [
      "name",
      "title"
    ],
    "additionalProperties": false
  },
  "TreeViewList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TreeViewList Props",
    "description": "Props for the TreeViewList component",
    "properties": {
      "aria-label": {
        "description": "A text string that sets the accessible name of the tree view list. Either this or the aria-labelledby property must\nbe passed in.",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "A space separated list of element id's that sets the accessible name of the tree view list. Either\nthis or the aria-label property must be passed in.",
        "type": "string"
      },
      "children": {
        "description": "Child nodes of the current tree view. (React component or element)"
      },
      "isMultiSelectable": {
        "description": "Flag indicating whether multiple nodes can be selected in the tree view. This will also set the\naria-multiselectable attribute on the tree view list which is required to be true when multiple selection is intended.\nCan only be applied to the root tree view list.",
        "type": "boolean",
        "default": false
      },
      "isNested": {
        "description": "Flag indicating if the tree view is nested under another tree view.",
        "type": "boolean",
        "default": false
      },
      "toolbar": {
        "description": "Toolbar to display above the tree view. (React component or element)"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "TreeView": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TreeView Props",
    "description": "The main tree view component.",
    "properties": {
      "activeItems": {
        "description": "Active items of tree view. (Type: TreeViewDataItem[])",
        "type": "array"
      },
      "allExpanded": {
        "description": "Sets the expanded state on all tree nodes, overriding default behavior and current\ninternal state.",
        "type": "boolean"
      },
      "aria-label": {
        "description": "A text string that sets the accessible name of the tree view list. Either this or the aria-labelledby property must\nbe passed in.",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "A space separated list of element id's that sets the accessible name of the tree view list. Either\nthis or the aria-label property must be passed in.",
        "type": "string"
      },
      "className": {
        "description": "Class to add if not passed a parentItem property.",
        "type": "string"
      },
      "compareItems": {
        "description": "Comparison function for determining active items. (Function: (item: TreeViewDataItem, itemToCheck: TreeViewDataItem) => boolean)",
        "default": "(item, itemToCheck) => item.id === itemToCheck.id"
      },
      "data": {
        "description": "Data of the tree view. (Type: TreeViewDataItem[])",
        "type": "array"
      },
      "defaultAllExpanded": {
        "description": "Sets the default expanded behavior.",
        "type": "boolean",
        "default": false
      },
      "expandedIcon": {
        "description": "Icon for all expanded node items. (React component or element)"
      },
      "hasBadges": {
        "description": "Flag indicating if all nodes in the tree view should have badges.",
        "type": "boolean",
        "default": false
      },
      "hasCheckboxes": {
        "description": "Flag indicating if all nodes in the tree view should have checkboxes.",
        "type": "boolean",
        "default": false
      },
      "hasGuides": {
        "description": "Flag indicating if the tree view has guide lines.",
        "type": "boolean",
        "default": false
      },
      "hasSelectableNodes": {
        "description": "Flag indicating that tree nodes should be independently selectable, even when having\nchildren.",
        "type": "boolean",
        "default": false
      },
      "icon": {
        "description": "Icon for all leaf or unexpanded node items. (React component or element)"
      },
      "id": {
        "description": "ID of the tree view.",
        "type": "string"
      },
      "isMultiSelectable": {
        "description": "Flag indicating whether multiple nodes can be selected in the tree view. This will also set the\naria-multiselectable attribute on the tree view list which is required to be true when multiple selection is intended.\nCan only be applied to the root tree view list.",
        "type": "boolean",
        "default": false
      },
      "isNested": {
        "description": "Flag indicating if the tree view is nested.",
        "type": "boolean",
        "default": false
      },
      "onCheck": {
        "description": "Callback for item checkbox selection. (Function: (event: React.ChangeEvent<HTMLInputElement>, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void)"
      },
      "onCollapse": {
        "description": "Callback for collapsing a node with children. (Function: (event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void)"
      },
      "onExpand": {
        "description": "Callback for expanding a node with children. (Function: (event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void)"
      },
      "onSelect": {
        "description": "Callback for item selection. (Function: (event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void)"
      },
      "parentItem": {
        "description": "Internal. Parent item of a tree view list item. (Type: TreeViewDataItem)"
      },
      "toolbar": {
        "description": "Toolbar to display above the tree view. (React component or element)"
      },
      "useMemo": {
        "description": "Flag indicating the tree view should utilize memoization to help render large data sets.\nSetting this property requires that the activeItems property is passed an array containing\nevery node in the selected item's path.",
        "type": "boolean"
      },
      "variant": {
        "description": "Variant presentation styles for the tree view.",
        "enum": [
          "default",
          "compact",
          "compactNoBackground"
        ],
        "default": "'default'"
      }
    },
    "required": [
      "data"
    ],
    "additionalProperties": false
  },
  "TreeViewDataItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TreeViewDataItem Props",
    "description": "Properties that make up a tree view data item. These properties should be passed in as an\nobject to one of the various tree view component properties which accept TreeViewDataItem as\na type.",
    "properties": {
      "action": {
        "description": "Action of a tree view item, which can be either a button or dropdown component. (React component or element)"
      },
      "badgeProps": {
        "description": "Additional properties of the tree view item badge. (Type: any)"
      },
      "checkProps": {
        "description": "Additional properties of the tree view item checkbox. (Type: TreeViewCheckProps)"
      },
      "children": {
        "description": "Child nodes of a tree view item. (Type: TreeViewDataItem[])",
        "type": "array"
      },
      "customBadgeContent": {
        "description": "Optional prop for a custom badge. (React component or element)"
      },
      "defaultExpanded": {
        "description": "Flag indicating if node is expanded by default.",
        "type": "boolean"
      },
      "expandedIcon": {
        "description": "Expanded icon of a tree view item. (React component or element)"
      },
      "hasBadge": {
        "description": "Flag indicating if a tree view item has a badge.",
        "type": "boolean"
      },
      "hasCheckbox": {
        "description": "Flag indicating if a tree view item has a checkbox.",
        "type": "boolean"
      },
      "icon": {
        "description": "Default icon of a tree view item. (React component or element)"
      },
      "id": {
        "description": "ID of a tree view item.",
        "type": "string"
      },
      "name": {
        "description": "Internal content of a tree view item. (React component or element)"
      },
      "title": {
        "description": "Title of a tree view item. Only used in compact presentations. (React component or element)"
      }
    },
    "required": [
      "name"
    ],
    "additionalProperties": false
  },
  "ToggleGroupItemElement": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToggleGroupItemElement Props",
    "description": "Props for the ToggleGroupItemElement component",
    "properties": {},
    "additionalProperties": false
  },
  "ToggleGroupItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToggleGroupItem Props",
    "description": "Props for the ToggleGroupItem component",
    "properties": {
      "aria-label": {
        "description": "required when icon is used with no supporting text",
        "type": "string"
      },
      "buttonId": {
        "description": "Optional id for the button within the toggle group item",
        "type": "string"
      },
      "className": {
        "description": "Additional classes added to the toggle group item",
        "type": "string"
      },
      "icon": {
        "description": "Icon rendered inside the toggle group item (React component or element)"
      },
      "iconPosition": {
        "description": "Sets position of the icon when text is also passed in",
        "enum": [
          "start",
          "end"
        ],
        "default": "'start'"
      },
      "isDisabled": {
        "description": "Flag indicating if the toggle group item is disabled",
        "type": "boolean",
        "default": false
      },
      "isSelected": {
        "description": "Flag indicating if the toggle group item is selected",
        "type": "boolean",
        "default": false
      },
      "onChange": {
        "description": "A callback for when the toggle group item selection changes. (Type: (event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent, selected: boolean) => void)",
        "default": "() => {}"
      },
      "text": {
        "description": "Text rendered inside the toggle group item (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "ToggleGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToggleGroup Props",
    "description": "Props for the ToggleGroup component",
    "properties": {
      "areAllGroupsDisabled": {
        "description": "Disable all toggle group items under this component.",
        "type": "boolean",
        "default": false
      },
      "aria-label": {
        "description": "Accessible label for the toggle group",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the toggle group (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the toggle group",
        "type": "string"
      },
      "isCompact": {
        "description": "Modifies the toggle group to include compact styling.",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "TooltipContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TooltipContent Props",
    "description": "Props for the TooltipContent component",
    "properties": {
      "children": {
        "description": "PopoverContent content (React component or element)"
      },
      "className": {
        "description": "PopoverContent additional class",
        "type": "string"
      },
      "isLeftAligned": {
        "description": "Flag to align text to the left",
        "type": "boolean"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "TooltipArrow": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TooltipArrow Props",
    "description": "Props for the TooltipArrow component",
    "properties": {
      "className": {
        "description": "className",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Tooltip": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Tooltip Props",
    "description": "Props for the Tooltip component",
    "properties": {
      "animationDuration": {
        "description": "CSS fade transition animation duration",
        "type": "number",
        "default": 300
      },
      "appendTo": {
        "description": "The element to append the tooltip to, defaults to body (Type: HTMLElement | ((ref?: HTMLElement) => HTMLElement))",
        "default": "() => document.body"
      },
      "aria": {
        "description": "aria-labelledby or aria-describedby for tooltip.\nThe trigger will be cloned to add the aria attribute, and the corresponding id in the form of 'pf-tooltip-#' is added to the content container.\nIf you don't want that or prefer to add the aria attribute yourself on the trigger, set aria to 'none'.",
        "enum": [
          "describedby",
          "labelledby",
          "none"
        ],
        "default": "'describedby'"
      },
      "aria-live": {
        "description": "Determines whether the tooltip is an aria-live region. If the triggerRef prop is passed in the\ndefault behavior is 'polite' in order to ensure the tooltip contents is announced to\nassistive technologies. Otherwise the default behavior is 'off'.",
        "enum": [
          "off",
          "polite"
        ],
        "default": "triggerRef ? 'polite' : 'off'"
      },
      "children": {
        "description": "The trigger reference element to which the Tooltip is relatively placed to.\nIf you cannot wrap the element with the Tooltip, you can use the triggerRef prop instead.\nUsage: <Tooltip><Button>Reference</Button></Tooltip> (Type: ReactElement<any>)"
      },
      "className": {
        "description": "Tooltip additional class",
        "type": "string",
        "default": "''"
      },
      "content": {
        "description": "Tooltip content (React component or element)"
      },
      "distance": {
        "description": "Distance of the tooltip to its target, defaults to 15",
        "type": "number",
        "default": 15
      },
      "enableFlip": {
        "description": "If true, tries to keep the tooltip in view by flipping it if necessary",
        "type": "boolean",
        "default": true
      },
      "entryDelay": {
        "description": "Delay in ms before the tooltip appears",
        "type": "number",
        "default": 300
      },
      "exitDelay": {
        "description": "Delay in ms before the tooltip disappears, Avoid passing in a value of \"0\", as users should\nbe given ample time to move their mouse from the trigger to the tooltip content without the content\nbeing hidden.",
        "type": "number",
        "default": 300
      },
      "flipBehavior": {
        "description": "The desired position to flip the tooltip to if the initial position is not possible.\nBy setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.\nYou can also pass an array of positions that determines the flip order. It should contain the initial position\nfollowed by alternative positions if that position is unavailable.\nExample: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to\n['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\nspace to the right, so it finally shows the tooltip on the left.",
        "enum": [
          "flip",
          "top",
          "bottom",
          "left",
          "right",
          "top-start",
          "top-end",
          "bottom-start",
          "bottom-end",
          "left-start",
          "left-end",
          "right-start",
          "right-end"
        ],
        "default": "['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']"
      },
      "id": {
        "description": "id of the tooltip",
        "type": "string"
      },
      "isContentLeftAligned": {
        "description": "Flag to indicate that the text content is left aligned",
        "type": "boolean",
        "default": false
      },
      "isVisible": {
        "description": "value for visibility when trigger is 'manual'",
        "type": "boolean",
        "default": false
      },
      "maxWidth": {
        "description": "Maximum width of the tooltip (default 18.75rem)",
        "type": "string",
        "default": "18.75rem"
      },
      "minWidth": {
        "description": "Minimum width of the tooltip. If set to \"trigger\", the minimum width will be set to the reference element width.",
        "enum": [
          "trigger"
        ]
      },
      "onTooltipHidden": {
        "description": "Callback when tooltip's hide transition has finished executing (Function: () => void)",
        "default": "() => {}"
      },
      "position": {
        "description": "Tooltip position. Note: With 'enableFlip' set to true,\nit will change the position if there is not enough space for the starting position.\nThe behavior of where it flips to can be controlled through the flipBehavior prop.\nThe 'auto' position chooses the side with the most space.\nThe 'auto' position requires the 'enableFlip' prop to be true. (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')",
        "default": "'top'"
      },
      "trigger": {
        "description": "Tooltip trigger: click, mouseenter, focus, manual\nSet to manual to trigger tooltip programmatically (through the isVisible prop)",
        "type": "string",
        "default": "'mouseenter focus'"
      },
      "triggerRef": {
        "description": "The trigger reference element to which the Tooltip is relatively placed to.\nIf you can wrap the element with the Tooltip, you can use the children prop instead, or both props together.\nWhen passed along with the trigger prop, the div element that wraps the trigger will be removed.\nUsage: <Tooltip triggerRef={() => document.getElementById('reference-element')} /> (Type: HTMLElement | (() => HTMLElement) | React.RefObject<any>)"
      },
      "zIndex": {
        "description": "z-index of the tooltip",
        "type": "number",
        "default": 9999
      }
    },
    "required": [
      "content"
    ],
    "additionalProperties": false
  },
  "ToolbarToggleGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarToggleGroup Props",
    "description": "Props for the ToolbarToggleGroup component",
    "properties": {
      "align": {
        "description": "Applies to a child of a flex layout, and aligns that child (and any adjacent children on the other side of it) to one side of the main axis",
        "enum": [
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "2xl",
          "alignEnd",
          "alignStart",
          "alignCenter"
        ]
      },
      "alignItems": {
        "description": "Vertical alignment of children",
        "enum": [
          "start",
          "center",
          "baseline",
          "default",
          "end",
          "stretch"
        ]
      },
      "alignSelf": {
        "description": "Vertical alignment",
        "enum": [
          "start",
          "center",
          "baseline",
          "default",
          "end",
          "stretch"
        ]
      },
      "breakpoint": {
        "description": "Controls when filters are shown and when the toggle button is hidden.",
        "enum": [
          "md",
          "lg",
          "xl",
          "2xl"
        ]
      },
      "children": {
        "description": "Content to be rendered inside the data toolbar group (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of the data toolbar group",
        "type": "string"
      },
      "clearAllFilters": {
        "description": "Optional callback for clearing all filters in the toolbar toggle group (Function: () => void)"
      },
      "clearFiltersButtonText": {
        "description": "Text to display in the clear all filters button of the toolbar toggle group",
        "type": "string"
      },
      "columnGap": {
        "description": "Sets only the column gap at various breakpoints.",
        "enum": [
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "2xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl"
        ]
      },
      "gap": {
        "description": "Sets both the column and row gap at various breakpoints.",
        "enum": [
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "2xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl"
        ]
      },
      "isExpanded": {
        "description": "Flag indicating when toggle group is expanded for non-managed toolbar toggle groups.",
        "type": "boolean"
      },
      "isOverflowContainer": {
        "description": "Flag that modifies the toolbar group to hide overflow and respond to available space. Used for horizontal navigation.",
        "type": "boolean"
      },
      "labelContainerRef": {
        "description": "Reference to a label container group for filters inside the toolbar toggle group (Type: React.RefObject<any>)"
      },
      "onToggle": {
        "description": "Callback for toggle group click event for non-managed toolbar toggle groups. (Function: (event: React.MouseEvent) => void)"
      },
      "rowGap": {
        "description": "Sets only the row gap at various breakpoints.",
        "enum": [
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "2xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl"
        ]
      },
      "rowWrap": {
        "description": "Value to set for row wrapping at various breakpoints",
        "enum": [
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "2xl",
          "wrap",
          "nowrap"
        ]
      },
      "showClearFiltersButton": {
        "description": "Flag indicating that the clear all filters button should be visible in the toolbar toggle group",
        "type": "boolean"
      },
      "toggleIcon": {
        "description": "An icon to be rendered when the toggle group has collapsed down (React component or element)"
      },
      "variant": {
        "description": "A type modifier which modifies spacing specifically depending on the type of group (Type: | ToolbarGroupVariant\n| 'filter-group'\n| 'action-group'\n| 'action-group-inline'\n| 'action-group-plain'\n| 'label-group')"
      },
      "visibility": {
        "description": "Visibility at various breakpoints.",
        "enum": [
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "2xl",
          "hidden",
          "visible"
        ]
      }
    },
    "required": [
      "breakpoint",
      "toggleIcon"
    ],
    "additionalProperties": false
  },
  "ToolbarLabelGroupContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarLabelGroupContent Props",
    "description": "Props for the ToolbarLabelGroupContent component",
    "properties": {
      "className": {
        "description": "Classes applied to root element of the data toolbar content row",
        "type": "string"
      },
      "clearAllFilters": {
        "description": "optional callback for clearing all filters in the toolbar (Function: () => void)"
      },
      "clearFiltersButtonText": {
        "description": "Text to display in the clear all filters button",
        "type": "string",
        "default": "'Clear all filters'"
      },
      "collapseListedFiltersBreakpoint": {
        "description": "The breakpoint at which the listed filters in label groups are collapsed down to a summary",
        "enum": [
          "all",
          "md",
          "lg",
          "xl",
          "2xl"
        ],
        "default": "'lg'"
      },
      "customLabelGroupContent": {
        "description": "Custom additional content appended to the generated labels. To maintain spacing and styling, each node should be a ToolbarItem or ToolbarGroup. This property will remove the built in \"Clear all filters\" button. (React component or element)"
      },
      "isExpanded": {
        "description": "Flag indicating if a data toolbar toggle group's expandable content is expanded",
        "type": "boolean"
      },
      "labelGroupContentRef": {
        "description": "Label group content reference for passing to data toolbar children (Type: RefObject<any>)"
      },
      "numberOfFilters": {
        "description": "Total number of filters currently being applied across all ToolbarFilter components",
        "type": "number"
      },
      "numberOfFiltersText": {
        "description": "Text to display in the total number of applied filters ToolbarFilter (Function: (numberOfFilters: number) => string)",
        "default": "(numberOfFilters: number) => `${numberOfFilters} filters applied`"
      },
      "showClearFiltersButton": {
        "description": "Flag indicating that the clear all filters button should be visible",
        "type": "boolean"
      }
    },
    "required": [
      "numberOfFilters",
      "showClearFiltersButton"
    ],
    "additionalProperties": false
  },
  "ToolbarItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarItem Props",
    "description": "Props for the ToolbarItem component",
    "properties": {
      "align": {
        "description": "Applies to a child of a flex layout, and aligns that child (and any adjacent children on the other side of it) to one side of the main axis",
        "enum": [
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "2xl",
          "alignEnd",
          "alignStart",
          "alignCenter"
        ]
      },
      "alignItems": {
        "description": "Vertical alignment of children",
        "enum": [
          "start",
          "center",
          "baseline",
          "default",
          "end",
          "stretch"
        ]
      },
      "alignSelf": {
        "description": "Vertical alignment",
        "enum": [
          "start",
          "center",
          "baseline",
          "default",
          "end",
          "stretch"
        ]
      },
      "children": {
        "description": "Content to be rendered inside the data toolbar item (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of the data toolbar item",
        "type": "string"
      },
      "columnGap": {
        "description": "Sets only the column gap at various breakpoints.",
        "enum": [
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "2xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl"
        ]
      },
      "gap": {
        "description": "Sets both the column and row gap at various breakpoints.",
        "enum": [
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "2xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl"
        ]
      },
      "id": {
        "description": "id for this data toolbar item",
        "type": "string"
      },
      "isAllExpanded": {
        "description": "Flag indicating if the expand-all variant is expanded or not",
        "type": "boolean"
      },
      "isOverflowContainer": {
        "description": "Flag that modifies the toolbar item to hide overflow and respond to available space. Used for horizontal navigation.",
        "type": "boolean"
      },
      "rowGap": {
        "description": "Sets only the row gap at various breakpoints.",
        "enum": [
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "2xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl"
        ]
      },
      "rowWrap": {
        "description": "Value to set for row wrapping at various breakpoints",
        "enum": [
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "2xl",
          "wrap",
          "nowrap"
        ]
      },
      "variant": {
        "description": "A type modifier which modifies spacing specifically depending on the type of item",
        "enum": [
          "pagination",
          "label",
          "label-group",
          "separator",
          "expand-all"
        ]
      },
      "visibility": {
        "description": "Visibility at various breakpoints.",
        "enum": [
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "2xl",
          "hidden",
          "visible"
        ]
      }
    },
    "additionalProperties": false
  },
  "ToolbarGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarGroup Props",
    "description": "Props for the ToolbarGroup component",
    "properties": {
      "align": {
        "description": "Applies to a child of a flex layout, and aligns that child (and any adjacent children on the other side of it) to one side of the main axis",
        "enum": [
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "2xl",
          "alignEnd",
          "alignStart",
          "alignCenter"
        ]
      },
      "alignItems": {
        "description": "Vertical alignment of children",
        "enum": [
          "start",
          "center",
          "baseline",
          "default",
          "end",
          "stretch"
        ]
      },
      "alignSelf": {
        "description": "Vertical alignment",
        "enum": [
          "start",
          "center",
          "baseline",
          "default",
          "end",
          "stretch"
        ]
      },
      "children": {
        "description": "Content to be rendered inside the data toolbar group (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of the data toolbar group",
        "type": "string"
      },
      "columnGap": {
        "description": "Sets only the column gap at various breakpoints.",
        "enum": [
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "2xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl"
        ]
      },
      "gap": {
        "description": "Sets both the column and row gap at various breakpoints.",
        "enum": [
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "2xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl"
        ]
      },
      "isOverflowContainer": {
        "description": "Flag that modifies the toolbar group to hide overflow and respond to available space. Used for horizontal navigation.",
        "type": "boolean"
      },
      "rowGap": {
        "description": "Sets only the row gap at various breakpoints.",
        "enum": [
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "2xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl"
        ]
      },
      "rowWrap": {
        "description": "Value to set for row wrapping at various breakpoints",
        "enum": [
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "2xl",
          "wrap",
          "nowrap"
        ]
      },
      "variant": {
        "description": "A type modifier which modifies spacing specifically depending on the type of group (Type: | ToolbarGroupVariant\n| 'filter-group'\n| 'action-group'\n| 'action-group-inline'\n| 'action-group-plain'\n| 'label-group')"
      },
      "visibility": {
        "description": "Visibility at various breakpoints.",
        "enum": [
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "2xl",
          "hidden",
          "visible"
        ]
      }
    },
    "additionalProperties": false
  },
  "ToolbarFilter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarFilter Props",
    "description": "Props for the ToolbarFilter component",
    "properties": {
      "align": {
        "description": "Applies to a child of a flex layout, and aligns that child (and any adjacent children on the other side of it) to one side of the main axis",
        "enum": [
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "alignEnd",
          "alignStart",
          "alignCenter",
          "2xl",
          "alignEnd",
          "alignStart",
          "alignCenter"
        ]
      },
      "alignItems": {
        "description": "Vertical alignment of children",
        "enum": [
          "start",
          "center",
          "baseline",
          "default",
          "end",
          "stretch"
        ]
      },
      "alignSelf": {
        "description": "Vertical alignment",
        "enum": [
          "start",
          "center",
          "baseline",
          "default",
          "end",
          "stretch"
        ]
      },
      "categoryName": {
        "description": "Unique category name to be used as a label for the label group (Type: string | ToolbarLabelGroup)"
      },
      "children": {
        "description": "Content to be rendered inside the data toolbar item (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of the data toolbar item",
        "type": "string"
      },
      "columnGap": {
        "description": "Sets only the column gap at various breakpoints.",
        "enum": [
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl",
          "2xl",
          "columnGapNone",
          "columnGapXs",
          "columnGapSm",
          "columnGapMd",
          "columnGapLg",
          "columnGapXl",
          "columnGap_2xl",
          "columnGap_3xl",
          "columnGap_4xl"
        ]
      },
      "deleteLabel": {
        "description": "Callback passed by consumer used to delete a label from the labels[] (Type: (category: string | ToolbarLabelGroup, label: ToolbarLabel | string) => void)"
      },
      "deleteLabelGroup": {
        "description": "Callback passed by consumer used to close the entire label group (Type: (category: string | ToolbarLabelGroup) => void)"
      },
      "expandableLabelContainerRef": {
        "description": "Reference to a label container created with a custom expandable content group, for non-managed multiple toolbar toggle groups. (Type: React.RefObject<HTMLDivElement | null>)"
      },
      "gap": {
        "description": "Sets both the column and row gap at various breakpoints.",
        "enum": [
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl",
          "2xl",
          "gapNone",
          "gapXs",
          "gapSm",
          "gapMd",
          "gapLg",
          "gapXl",
          "gap_2xl",
          "gap_3xl",
          "gap_4xl"
        ]
      },
      "id": {
        "description": "id for this data toolbar item",
        "type": "string"
      },
      "isAllExpanded": {
        "description": "Flag indicating if the expand-all variant is expanded or not",
        "type": "boolean"
      },
      "isExpanded": {
        "description": "Flag indicating when toolbar toggle group is expanded for non-managed toolbar toggle groups.",
        "type": "boolean"
      },
      "isOverflowContainer": {
        "description": "Flag that modifies the toolbar item to hide overflow and respond to available space. Used for horizontal navigation.",
        "type": "boolean"
      },
      "labelGroupCollapsedText": {
        "description": "Customizable template string for the label group. Use variable \"${remaining}\" for the overflow label count.",
        "type": "string"
      },
      "labelGroupExpandedText": {
        "description": "Customizable \"Show Less\" text string for the label group",
        "type": "string"
      },
      "labels": {
        "description": "An array of strings to be displayed as labels in the expandable content (Type: (string | ToolbarLabel)[])",
        "default": []
      },
      "rowGap": {
        "description": "Sets only the row gap at various breakpoints.",
        "enum": [
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl",
          "2xl",
          "rowGapNone",
          "rowGapXs",
          "rowGapSm",
          "rowGapMd",
          "rowGapLg",
          "rowGapXl",
          "rowGap_2xl",
          "rowGap_3xl",
          "rowGap_4xl"
        ]
      },
      "rowWrap": {
        "description": "Value to set for row wrapping at various breakpoints",
        "enum": [
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "2xl",
          "wrap",
          "nowrap"
        ]
      },
      "showToolbarItem": {
        "description": "Flag to show the toolbar item",
        "type": "boolean",
        "default": true
      },
      "variant": {
        "description": "A type modifier which modifies spacing specifically depending on the type of item",
        "enum": [
          "pagination",
          "label",
          "label-group",
          "separator",
          "expand-all"
        ]
      },
      "visibility": {
        "description": "Visibility at various breakpoints.",
        "enum": [
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "2xl",
          "hidden",
          "visible"
        ]
      }
    },
    "required": [
      "categoryName",
      "children"
    ],
    "additionalProperties": false
  },
  "ToolbarLabelGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarLabelGroup Props",
    "description": "Props for the ToolbarLabelGroup component",
    "properties": {
      "key": {
        "description": "A unique key to identify this label group category",
        "type": "string"
      },
      "name": {
        "description": "The category name to display for the label group",
        "type": "string"
      }
    },
    "required": [
      "key",
      "name"
    ],
    "additionalProperties": false
  },
  "ToolbarLabel": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarLabel Props",
    "description": "Props for the ToolbarLabel component",
    "properties": {
      "key": {
        "description": "A unique key to identify this label",
        "type": "string"
      },
      "node": {
        "description": "The ReactNode to display in the label (React component or element)"
      }
    },
    "required": [
      "key",
      "node"
    ],
    "additionalProperties": false
  },
  "ToolbarFilterState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarFilterState Props",
    "description": "Props for the ToolbarFilterState component",
    "properties": {
      "isMounted": {
        "description": "",
        "type": "boolean"
      }
    },
    "required": [
      "isMounted"
    ],
    "additionalProperties": false
  },
  "ToolbarExpandableContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarExpandableContent Props",
    "description": "Props for the ToolbarExpandableContent component",
    "properties": {
      "className": {
        "description": "Classes added to the root element of the data toolbar expandable content",
        "type": "string"
      },
      "clearAllFilters": {
        "description": "optional callback for clearing all filters in the toolbar (Function: () => void)"
      },
      "clearFiltersButtonText": {
        "description": "Text to display in the clear all filters button",
        "type": "string",
        "default": "'Clear all filters'"
      },
      "expandableContentRef": {
        "description": "Expandable content reference for passing to data toolbar children (Type: RefObject<HTMLDivElement | null>)"
      },
      "isExpanded": {
        "description": "Flag indicating the expandable content is expanded",
        "type": "boolean",
        "default": false
      },
      "labelContainerRef": {
        "description": "Label container reference for passing to data toolbar children (Type: RefObject<any>)"
      },
      "showClearFiltersButton": {
        "description": "Flag indicating that the clear all filters button should be visible",
        "type": "boolean"
      }
    },
    "required": [
      "showClearFiltersButton"
    ],
    "additionalProperties": false
  },
  "ToolbarExpandIconWrapper": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarExpandIconWrapper Props",
    "description": "Props for the ToolbarExpandIconWrapper component",
    "properties": {
      "children": {
        "description": "Icon content used for the expand all or collapse all indication. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the span",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ToolbarContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarContent Props",
    "description": "Props for the ToolbarContent component",
    "properties": {
      "alignItems": {
        "description": "Vertical alignment of children",
        "enum": [
          "start",
          "center",
          "baseline",
          "default"
        ]
      },
      "children": {
        "description": "Content to be rendered as children of the content row (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of the data toolbar content row",
        "type": "string"
      },
      "clearAllFilters": {
        "description": "Optional callback for clearing all filters in the toolbar (Function: () => void)"
      },
      "clearFiltersButtonText": {
        "description": "Text to display in the clear all filters button",
        "type": "string"
      },
      "isExpanded": {
        "description": "Flag indicating if a data toolbar toggle group's expandable content is expanded",
        "type": "boolean",
        "default": false
      },
      "rowWrap": {
        "description": "Value to set for content wrapping at various breakpoints",
        "enum": [
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "wrap",
          "nowrap",
          "2xl",
          "wrap",
          "nowrap"
        ]
      },
      "showClearFiltersButton": {
        "description": "Flag indicating that the clear all filters button should be visible",
        "type": "boolean",
        "default": false
      },
      "toolbarId": {
        "description": "Id of the parent Toolbar component",
        "type": "string"
      },
      "visibility": {
        "description": "Visibility at various breakpoints.",
        "enum": [
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "2xl",
          "hidden",
          "visible"
        ]
      }
    },
    "additionalProperties": false
  },
  "Toolbar": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Toolbar Props",
    "description": "Props for the Toolbar component",
    "properties": {
      "children": {
        "description": "Content to be rendered as rows in the data toolbar (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of the data toolbar",
        "type": "string"
      },
      "clearAllFilters": {
        "description": "Optional callback for clearing all filters in the toolbar (Function: () => void)"
      },
      "clearFiltersButtonText": {
        "description": "Text to display in the clear all filters button",
        "type": "string"
      },
      "collapseListedFiltersBreakpoint": {
        "description": "The breakpoint at which the listed filters in label groups are collapsed down to a summary",
        "enum": [
          "all",
          "md",
          "lg",
          "xl",
          "2xl"
        ]
      },
      "colorVariant": {
        "description": "Background color variant of the toolbar",
        "enum": [
          "default",
          "no-background",
          "primary",
          "secondary"
        ]
      },
      "customLabelGroupContent": {
        "description": "Custom content appended to the filter generated label group. To maintain spacing and styling, each node should be wrapped in a ToolbarItem or ToolbarGroup. This property will remove the default \"Clear all filters\" button. (React component or element)"
      },
      "hasNoPadding": {
        "description": "Flag indicating the toolbar padding is removed",
        "type": "boolean"
      },
      "id": {
        "description": "Id of the data toolbar",
        "type": "string"
      },
      "inset": {
        "description": "Insets at various breakpoints.",
        "enum": [
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl"
        ]
      },
      "isExpanded": {
        "description": "Flag indicating if a data toolbar toggle group's expandable content is expanded",
        "type": "boolean"
      },
      "isFullHeight": {
        "description": "Flag indicating the toolbar height should expand to the full height of the container",
        "type": "boolean"
      },
      "isStatic": {
        "description": "Flag indicating the toolbar is static",
        "type": "boolean"
      },
      "isSticky": {
        "description": "Flag indicating the toolbar should stick to the top of its container",
        "type": "boolean"
      },
      "numberOfFiltersText": {
        "description": "Text to display in the total number of applied filters ToolbarFilter (Function: (numberOfFilters: number) => string)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "toggleIsExpanded": {
        "description": "A callback for setting the isExpanded flag (Function: () => void)"
      }
    },
    "additionalProperties": false
  },
  "ToolbarState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToolbarState Props",
    "description": "Props for the ToolbarState component",
    "properties": {
      "filterInfo": {
        "description": "Object managing information about how many labels are in each label group (Type: FilterInfo)"
      },
      "isManagedToggleExpanded": {
        "description": "Flag used if the user has opted NOT to manage the 'isExpanded' state of the toggle group.\nIndicates whether or not the toggle group is expanded.",
        "type": "boolean"
      },
      "ouiaStateId": {
        "description": "",
        "type": "string"
      },
      "windowWidth": {
        "description": "Used to keep track of window width so we can collapse expanded content when window is resizing",
        "type": "number"
      }
    },
    "required": [
      "filterInfo",
      "isManagedToggleExpanded",
      "ouiaStateId",
      "windowWidth"
    ],
    "additionalProperties": false
  },
  "FilterInfo": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FilterInfo Props",
    "description": "Props for the FilterInfo component",
    "properties": {
      "[key: string]": {
        "description": "",
        "type": "number"
      }
    },
    "required": [
      "[key: string]"
    ],
    "additionalProperties": false
  },
  "Title": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Title Props",
    "description": "Props for the Title component",
    "properties": {
      "children": {
        "description": "Content rendered inside the Title (React component or element)",
        "default": "''"
      },
      "className": {
        "description": "Additional classes added to the Title",
        "type": "string",
        "default": "''"
      },
      "headingLevel": {
        "description": "The heading level to use",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ]
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "size": {
        "description": "The size of the Title",
        "enum": [
          "md",
          "lg",
          "xl",
          "2xl",
          "3xl",
          "4xl"
        ]
      }
    },
    "required": [
      "headingLevel"
    ],
    "additionalProperties": false
  },
  "Size": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Size Props",
    "description": "Props for the Size component",
    "properties": {},
    "additionalProperties": false
  },
  "Timestamp": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Timestamp Props",
    "description": "Props for the Timestamp component",
    "properties": {
      "children": {
        "description": "Displays custom content inside the timestamp, such as a relative time. This prop will\noverride the default content that is displayed. Custom content will not be affected by\nany props that format or add to displayed content. (React component or element)"
      },
      "className": {
        "description": "Class to add to the outer span.",
        "type": "string"
      },
      "customFormat": {
        "description": "Applies custom formatting to the displayed date and/or time. Passing this prop in will\noverride the dateFormat and timeFormat props. (Type: { [key: string]: string })"
      },
      "date": {
        "description": "Determines the default content that is displayed inside the timestamp and the value of\nthe inner time element's datetime attribute. (Type: Date)"
      },
      "dateFormat": {
        "description": "Determines the format of the displayed date in the timestamp and UTC tooltip. Examples:\n\"Full\" => Tuesday, August 9, 2022;\n\"Long\" => August 9, 2022;\n\"Medium\" => Aug 9, 2022;\n\"Short\" => 8/9/22",
        "enum": [
          "full",
          "long",
          "medium",
          "short"
        ]
      },
      "displaySuffix": {
        "description": "Applies a custom suffix to the displayed content, usually after the time, such as a\ncustom time zone.",
        "type": "string",
        "default": "''"
      },
      "is12Hour": {
        "description": "Flag for displaying the time in a 12 hour format. If this prop is not passed in,\nthe hour format will be based on the locale prop's value.",
        "type": "boolean"
      },
      "locale": {
        "description": "Determines which locale to use in the displayed content. Defaults to the current locale\nwhen this prop is not passed in. For more information about locale's:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation",
        "type": "string"
      },
      "shouldDisplayUTC": {
        "description": "Flag indicating whether the default content should be displayed as a UTC string\ninstead of a local string.",
        "type": "boolean"
      },
      "timeFormat": {
        "description": "Determines the format of the displayed time in the timestamp and UTC tooltip. Examples:\n\"Full\" => 11:25:00 AM Eastern Daylight Time\n\"Long\" => 11:25:00 AM EDT\n\"Medium\" => 11:25:00 AM\n\"Short\" => 11:25 AM",
        "enum": [
          "full",
          "long",
          "medium",
          "short"
        ]
      },
      "tooltip": {
        "description": "Adds a tooltip to the timestamp. (Type: TimestampTooltip)"
      }
    },
    "additionalProperties": false
  },
  "TimestampTooltip": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TimestampTooltip Props",
    "description": "Props for the TimestampTooltip component",
    "properties": {
      "content": {
        "description": "Content displayed in the tooltip when using the \"custom\" variant. (React component or element)"
      },
      "suffix": {
        "description": "A custom suffix to apply to a \"default\" variant tooltip.",
        "type": "string"
      },
      "tooltipProps": {
        "description": "Additional props passed to the tooltip. (Type: any)"
      },
      "variant": {
        "description": "The variant of the tooltip. The \"default\" variant displays the date passed into\nthe timestamp's date prop as a UTC string.",
        "enum": [
          "default",
          "custom"
        ]
      }
    },
    "required": [
      "variant"
    ],
    "additionalProperties": false
  },
  "TimePicker": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TimePicker Props",
    "description": "Props for the TimePicker component",
    "properties": {
      "aria-label": {
        "description": "Accessible label for the time picker",
        "type": "string",
        "default": "'Time picker'"
      },
      "className": {
        "description": "Additional classes added to the time picker.",
        "type": "string",
        "default": "''"
      },
      "delimiter": {
        "description": "Character to display between the hour and minute",
        "type": "string",
        "default": "':'"
      },
      "id": {
        "description": "Id of the time picker",
        "type": "string"
      },
      "includeSeconds": {
        "description": "Includes number of seconds with the chosen time and allows users to manually edit the seconds value.",
        "type": "boolean"
      },
      "inputProps": {
        "description": "Additional props for input field (Type: TextInputProps)",
        "default": {}
      },
      "invalidFormatErrorMessage": {
        "description": "Error message to display when the time is provided in an invalid format.",
        "type": "string",
        "default": "'Invalid time format'"
      },
      "invalidMinMaxErrorMessage": {
        "description": "Error message to display when the time provided is not within the minTime/maxTime constraints",
        "type": "string",
        "default": "'Invalid time entered'"
      },
      "is24Hour": {
        "description": "True if the time is 24 hour time. False if the time is 12 hour time",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Flag indicating the time picker is disabled",
        "type": "boolean",
        "default": false
      },
      "isOpen": {
        "description": "Flag to control the opened state of the time picker menu",
        "type": "boolean",
        "default": false
      },
      "maxTime": {
        "description": "A time string indicating the maximum value allowed. The format could be an ISO 8601 formatted date string or in 'HH{delimiter}MM' format (Type: string | Date)",
        "default": "''"
      },
      "menuAppendTo": {
        "description": "The container to append the menu to. Defaults to 'inline'.\nIf your menu is being cut off you can append it to an element higher up the DOM tree.\nSome examples:\nmenuAppendTo=\"parent\"\nmenuAppendTo={() => document.body}\nmenuAppendTo={document.getElementById('target')}",
        "enum": [
          "inline",
          "parent"
        ],
        "default": "'inline'"
      },
      "minTime": {
        "description": "A time string indicating the minimum value allowed. The format could be an ISO 8601 formatted date string or in 'HH{delimiter}MM' format (Type: string | Date)",
        "default": "''"
      },
      "onChange": {
        "description": "Optional event handler called each time the value in the time picker input changes. (Function: (\n  event: React.FormEvent<HTMLInputElement>,\n  time: string,\n  hour?: number,\n  minute?: number,\n  seconds?: number,\n  isValid?: boolean\n) => void)"
      },
      "placeholder": {
        "description": "String to display in the empty time picker field as a hint for the expected time format",
        "type": "string",
        "default": "'hh:mm'"
      },
      "setIsOpen": {
        "description": "Handler invoked each time the open state of time picker updates (Function: (isOpen?: boolean) => void)",
        "default": "() => {}"
      },
      "stepMinutes": {
        "description": "Size of step between time options in minutes.",
        "type": "number",
        "default": 30
      },
      "time": {
        "description": "A time string. The format could be  an ISO 8601 formatted date string or in 'HH{delimiter}MM' format (Type: string | Date)",
        "default": "''"
      },
      "validateTime": {
        "description": "Optional validator can be provided to override the internal time validator. (Function: (time: string) => boolean)"
      },
      "width": {
        "description": "Width of the time picker.",
        "type": "string",
        "default": "'150px'"
      },
      "zIndex": {
        "description": "z-index of the time picker",
        "type": "number",
        "default": 9999
      }
    },
    "additionalProperties": false
  },
  "TimePickerState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TimePickerState Props",
    "description": "Props for the TimePickerState component",
    "properties": {
      "focusedIndex": {
        "description": "",
        "type": "number"
      },
      "isInvalid": {
        "description": "",
        "type": "boolean"
      },
      "isTimeOptionsOpen": {
        "description": "",
        "type": "boolean"
      },
      "maxTimeState": {
        "description": "",
        "type": "string"
      },
      "minTimeState": {
        "description": "",
        "type": "string"
      },
      "scrollIndex": {
        "description": "",
        "type": "number"
      },
      "timeRegex": {
        "description": " (Type: RegExp)"
      },
      "timeState": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "focusedIndex",
      "isInvalid",
      "isTimeOptionsOpen",
      "maxTimeState",
      "minTimeState",
      "scrollIndex",
      "timeRegex",
      "timeState"
    ],
    "additionalProperties": false
  },
  "TextInputGroupUtilities": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TextInputGroupUtilities Props",
    "description": "Props for the TextInputGroupUtilities component",
    "properties": {
      "children": {
        "description": "Content rendered inside the text input group utilities div (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the text input group utilities container",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "TextInputGroupMain": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TextInputGroupMain Props",
    "description": "Props for the TextInputGroupMain component",
    "properties": {
      "aria-activedescendant": {
        "description": "The id of the active element. Required if role has a value of \"combobox\", and focus\nshould remain on the input.",
        "type": "string"
      },
      "aria-controls": {
        "description": "The id of the element(s) controlled by the input. Required if role has a value of \"combobox\".",
        "type": "string"
      },
      "aria-label": {
        "description": "Accessibility label for the input",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the text input group main div (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the text input group main container",
        "type": "string"
      },
      "hint": {
        "description": "Suggestion that will show up like a placeholder even with text in the input",
        "type": "string"
      },
      "icon": {
        "description": "Icon to be shown on the left side of the text input group main container (React component or element)"
      },
      "inputId": {
        "description": "The id of the input element",
        "type": "string"
      },
      "inputProps": {
        "description": "Additional props to spread to the input element. (Type: any)"
      },
      "isExpanded": {
        "description": "Flag for whether an associated element controlled by the input is visible. Required if\nrole has a value of \"combobox\".",
        "type": "boolean"
      },
      "name": {
        "description": "Name for the input",
        "type": "string"
      },
      "onBlur": {
        "description": "Callback for when focus is lost on the input field (Function: (event?: any) => void)"
      },
      "onChange": {
        "description": "Callback for when there is a change in the input field (Function: (event: React.FormEvent<HTMLInputElement>, value: string) => void)"
      },
      "onFocus": {
        "description": "Callback for when the input field is focused (Function: (event?: any) => void)"
      },
      "placeholder": {
        "description": "Placeholder value for the input",
        "type": "string"
      },
      "role": {
        "description": "Determines the accessible role of the input.",
        "type": "string"
      },
      "type": {
        "description": "Type that the input accepts. (Type: | 'text'\n| 'date'\n| 'datetime-local'\n| 'email'\n| 'month'\n| 'number'\n| 'password'\n| 'search'\n| 'tel'\n| 'time'\n| 'url')"
      },
      "value": {
        "description": "Value for the input (Type: string | number)"
      }
    },
    "additionalProperties": false
  },
  "TextInputGroupIcon": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TextInputGroupIcon Props",
    "description": "Props for the TextInputGroupIcon component",
    "properties": {
      "children": {
        "description": "Content rendered inside the text input group utilities div (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the text input group utilities container",
        "type": "string"
      },
      "isStatus": {
        "description": "Flag indicating if the icon is a status icon and should inherit status styling.",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "TextInputGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TextInputGroup Props",
    "description": "Props for the TextInputGroup component",
    "properties": {
      "children": {
        "description": "Content rendered inside the text input group (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the text input group container",
        "type": "string"
      },
      "isDisabled": {
        "description": "Adds disabled styling and a disabled context value which text input group main hooks into for the input itself",
        "type": "boolean"
      },
      "isPlain": {
        "description": "Flag to indicate the toggle has no border or background",
        "type": "boolean"
      },
      "validated": {
        "description": "Status variant of the text input group.",
        "enum": [
          "success",
          "warning",
          "error"
        ]
      }
    },
    "additionalProperties": false
  },
  "TextInputExpandedObj": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TextInputExpandedObj Props",
    "description": "Props for the TextInputExpandedObj component",
    "properties": {
      "ariaControls": {
        "description": "Id of the element that the text input is controlling expansion of.",
        "type": "string"
      },
      "isExpanded": {
        "description": "Flag to apply expanded styling.",
        "type": "boolean"
      }
    },
    "required": [
      "ariaControls",
      "isExpanded"
    ],
    "additionalProperties": false
  },
  "TextInputState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TextInputState Props",
    "description": "Props for the TextInputState component",
    "properties": {
      "ouiaStateId": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "ouiaStateId"
    ],
    "additionalProperties": false
  },
  "TextArea": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TextArea Props",
    "description": "Props for the TextArea component",
    "properties": {
      "aria-label": {
        "description": "Custom flag to show that the text area requires an associated id or aria-label.",
        "type": "string"
      },
      "autoResize": {
        "description": "Flag to modify height based on contents.",
        "type": "boolean"
      },
      "className": {
        "description": "Additional classes added to the text area.",
        "type": "string"
      },
      "isDisabled": {
        "description": "Flag to show if the text area is disabled.",
        "type": "boolean"
      },
      "isRequired": {
        "description": "Flag to show if the text area is required.",
        "type": "boolean"
      },
      "onChange": {
        "description": "A callback for when the text area value changes. (Function: (event: React.ChangeEvent<HTMLTextAreaElement>, value: string) => void)"
      },
      "readOnlyVariant": {
        "description": "Read only variant.",
        "enum": [
          "default",
          "plain"
        ]
      },
      "resizeOrientation": {
        "description": "Sets the orientation to limit the resize to",
        "enum": [
          "horizontal",
          "vertical",
          "both",
          "none"
        ]
      },
      "validated": {
        "description": "Value to indicate if the text area is modified to show that validation state.\nIf set to success, text area will be modified to indicate valid state.\nIf set to error, text area will be modified to indicate error state.",
        "enum": [
          "success",
          "warning",
          "error",
          "default"
        ]
      },
      "value": {
        "description": "Value of the text area. (Type: string | number)"
      }
    },
    "additionalProperties": false
  },
  "Tabs": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Tabs Props",
    "description": "Props for the Tabs component",
    "properties": {
      "activeKey": {
        "description": "The index of the active tab (Type: number | string)",
        "default": 0
      },
      "addButtonAriaLabel": {
        "description": "Aria-label for the add button",
        "type": "string"
      },
      "aria-label": {
        "description": "Provides an accessible label for the tabs. Labels should be unique for each set of tabs that are present on a page. When component is set to nav, this prop should be defined to differentiate the tabs from other navigation regions on the page.",
        "type": "string"
      },
      "backScrollAriaLabel": {
        "description": "Aria-label for the back scroll button",
        "type": "string",
        "default": "'Scroll back'"
      },
      "children": {
        "description": "Content rendered inside the tabs component. Only `Tab` components or expressions resulting in a falsy value are allowed here. (Type: TabsChild | TabsChild[])"
      },
      "className": {
        "description": "Additional classes added to the tabs",
        "type": "string"
      },
      "component": {
        "description": "Determines what tag is used around the tabs. Use \"nav\" to define the tabs inside a navigation region",
        "enum": [
          "div",
          "nav"
        ],
        "default": "TabsComponent.div"
      },
      "defaultActiveKey": {
        "description": "The index of the default active tab. Set this for uncontrolled Tabs (Type: number | string)"
      },
      "defaultIsExpanded": {
        "description": "Flag indicating the default expanded state for uncontrolled expand/collapse of",
        "type": "boolean"
      },
      "expandable": {
        "description": "Enable expandable vertical tabs at various breakpoints. (isVertical should be set to true for this to work)",
        "enum": [
          "expandable",
          "nonExpandable",
          "expandable",
          "nonExpandable",
          "expandable",
          "nonExpandable",
          "expandable",
          "nonExpandable",
          "expandable",
          "nonExpandable",
          "2xl",
          "expandable",
          "nonExpandable"
        ]
      },
      "forwardScrollAriaLabel": {
        "description": "Aria-label for the forward scroll button",
        "type": "string",
        "default": "'Scroll forward'"
      },
      "hasNoBorderBottom": {
        "description": "Disables border bottom tab styling on tabs. Defaults to false. To remove the bottom border, set this prop to true.",
        "type": "boolean",
        "default": false
      },
      "id": {
        "description": "Uniquely identifies the tabs",
        "type": "string"
      },
      "inset": {
        "description": "Insets at various breakpoints.",
        "enum": [
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl"
        ]
      },
      "isBox": {
        "description": "Enables box styling to the tab component",
        "type": "boolean",
        "default": false
      },
      "isExpanded": {
        "description": "Flag to indicate if the vertical tabs are expanded",
        "type": "boolean"
      },
      "isFilled": {
        "description": "Enables the filled tab list layout",
        "type": "boolean",
        "default": false
      },
      "isOverflowHorizontal": {
        "description": "Flag which places overflowing tabs into a menu triggered by the last tab. Additionally an object can be passed with custom settings for the overflow tab. (Type: boolean | HorizontalOverflowObject)"
      },
      "isSubtab": {
        "description": "Enables subtab tab styling",
        "type": "boolean",
        "default": false
      },
      "isVertical": {
        "description": "Enables vertical tab styling",
        "type": "boolean",
        "default": false
      },
      "leftScrollAriaLabel": {
        "description": "Please use backScrollAriaLabel. Aria-label for the left scroll button",
        "type": "string",
        "default": "'Scroll left'"
      },
      "mountOnEnter": {
        "description": "Waits until the first \"enter\" transition to mount tab children (add them to the DOM)",
        "type": "boolean",
        "default": false
      },
      "onAdd": {
        "description": "Callback for the add button. Passing this property inserts the add button (Function: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void)"
      },
      "onClose": {
        "description": "Callback to handle tab closing and adds a basic close button to all tabs. This is overridden by the tab actions property. (Type: (event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string) => void)"
      },
      "onSelect": {
        "description": "Callback to handle tab selection (Type: (event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string) => void)",
        "default": "() => undefined as any"
      },
      "onToggle": {
        "description": "Callback function to toggle the expandable tabs. (Function: (event: React.MouseEvent, isExpanded: boolean) => void)",
        "default": "(_event: React.MouseEvent, _isExpanded: boolean): void => undefined"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "rightScrollAriaLabel": {
        "description": "Please use forwardScrollAriaLabel. Aria-label for the right scroll button",
        "type": "string",
        "default": "'Scroll right'"
      },
      "toggleAriaLabel": {
        "description": "Aria-label for the expandable toggle",
        "type": "string"
      },
      "toggleText": {
        "description": "Text that appears in the expandable toggle",
        "type": "string"
      },
      "unmountOnExit": {
        "description": "Unmounts tab children (removes them from the DOM) when they are no longer visible",
        "type": "boolean",
        "default": false
      },
      "usePageInsets": {
        "description": "Flag indicates that the tabs should use page insets.",
        "type": "boolean"
      },
      "variant": {
        "description": "Tabs background color variant",
        "enum": [
          "default",
          "secondary"
        ],
        "default": "'default'"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "HorizontalOverflowObject": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "HorizontalOverflowObject Props",
    "description": "Props for the HorizontalOverflowObject component",
    "properties": {
      "defaultTitleText": {
        "description": "The text which displays when an overflowing tab isn't selected",
        "type": "string"
      },
      "showTabCount": {
        "description": "Flag which shows the count of overflowing tabs when enabled",
        "type": "boolean"
      },
      "toggleAriaLabel": {
        "description": "The aria label applied to the button which toggles the tab overflow menu",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "TabsState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TabsState Props",
    "description": "Props for the TabsState component",
    "properties": {
      "disableBackScrollButton": {
        "description": "",
        "type": "boolean"
      },
      "disableForwardScrollButton": {
        "description": "",
        "type": "boolean"
      },
      "enableScrollButtons": {
        "description": "Used to signal if the scroll buttons should be used",
        "type": "boolean"
      },
      "ouiaStateId": {
        "description": "",
        "type": "string"
      },
      "overflowingTabCount": {
        "description": "",
        "type": "number"
      },
      "renderScrollButtons": {
        "description": "Used to control if the scroll buttons should be rendered. Rendering must occur before the scroll buttons are\nshown and rendering must be stopped after they stop being shown to preserve CSS transitions.",
        "type": "boolean"
      },
      "shownKeys": {
        "description": " (Type: (string | number)[])"
      },
      "showScrollButtons": {
        "description": "Used to control if the scroll buttons should be shown to the user via the pf-m-scrollable class",
        "type": "boolean"
      },
      "uncontrolledActiveKey": {
        "description": " (Type: number | string)"
      },
      "uncontrolledIsExpandedLocal": {
        "description": "",
        "type": "boolean"
      }
    },
    "required": [
      "disableBackScrollButton",
      "disableForwardScrollButton",
      "enableScrollButtons",
      "ouiaStateId",
      "overflowingTabCount",
      "renderScrollButtons",
      "shownKeys",
      "showScrollButtons",
      "uncontrolledActiveKey",
      "uncontrolledIsExpandedLocal"
    ],
    "additionalProperties": false
  },
  "TabElement": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TabElement Props",
    "description": "Props for the TabElement component",
    "properties": {},
    "additionalProperties": false
  },
  "TabsChild": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TabsChild Props",
    "description": "Props for the TabsChild component",
    "properties": {},
    "additionalProperties": false
  },
  "TabTitleText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TabTitleText Props",
    "description": "Props for the TabTitleText component",
    "properties": {
      "children": {
        "description": "Text to be rendered inside the tab button title. (React component or element)"
      },
      "className": {
        "description": "additional classes added to the tab title text",
        "type": "string",
        "default": "''"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "TabTitleIcon": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TabTitleIcon Props",
    "description": "Props for the TabTitleIcon component",
    "properties": {
      "children": {
        "description": "Icon to be rendered inside the tab button title. (React component or element)"
      },
      "className": {
        "description": "additional classes added to the tab title icon",
        "type": "string",
        "default": "''"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "TabContentBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TabContentBody Props",
    "description": "Props for the TabContentBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the tab content body. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the tab content body.",
        "type": "string"
      },
      "hasPadding": {
        "description": "Indicates if there should be padding around the tab content body",
        "type": "boolean"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "TabContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TabContent Props",
    "description": "Props for the TabContent component",
    "properties": {
      "activeKey": {
        "description": "Identifies the active Tab (Type: number | string)"
      },
      "aria-label": {
        "description": "title of controlling Tab if used outside Tabs component",
        "type": "string"
      },
      "child": {
        "description": "Child to show in the content area (Type: React.ReactElement<any>)"
      },
      "children": {
        "description": "content rendered inside the tab content area if used outside Tabs component (Type: any)"
      },
      "className": {
        "description": "class of tab content area if used outside Tabs component",
        "type": "string"
      },
      "eventKey": {
        "description": "uniquely identifies the controlling Tab if used outside Tabs component (Type: number | string)"
      },
      "id": {
        "description": "id passed from parent to identify the content section",
        "type": "string"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      }
    },
    "required": [
      "id"
    ],
    "additionalProperties": false
  },
  "TabButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TabButton Props",
    "description": "Props for the TabButton component",
    "properties": {
      "children": {
        "description": "content rendered inside the Tab content area. (React component or element)"
      },
      "className": {
        "description": "additional classes added to the Tab",
        "type": "string"
      },
      "href": {
        "description": "URL associated with the Tab. A Tab with an href will render as an <a> instead of a <button>. A Tab inside a <Tabs component=\"nav\"> should have an href.",
        "type": "string"
      },
      "ouiaId": {
        "description": " (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean"
      },
      "parentInnerRef": {
        "description": "Parents' innerRef passed down for properly displaying Tooltips (Type: React.Ref<any>)"
      },
      "tabContentRef": {
        "description": "child reference for case in which a TabContent section is defined outside of a Tabs component (Type: React.Ref<any>)"
      }
    },
    "additionalProperties": false
  },
  "TabAction": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TabAction Props",
    "description": "Props for the TabAction component",
    "properties": {
      "aria-label": {
        "description": "Accessible label for the tab action",
        "type": "string"
      },
      "children": {
        "description": "Content rendered in the tab action (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the tab action span",
        "type": "string"
      },
      "isDisabled": {
        "description": "Flag indicating if the tab action is disabled",
        "type": "boolean"
      },
      "onClick": {
        "description": "Click callback for tab action button (Function: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void)"
      },
      "ouiaId": {
        "description": " (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "Tab": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Tab Props",
    "description": "Props for the Tab component",
    "properties": {
      "actions": {
        "description": "Actions rendered beside the tab content (React component or element)"
      },
      "children": {
        "description": "content rendered inside the Tab content area. (React component or element)"
      },
      "className": {
        "description": "additional classes added to the Tab",
        "type": "string"
      },
      "closeButtonAriaLabel": {
        "description": "Aria-label for the close button added by passing the onClose property to Tabs.",
        "type": "string"
      },
      "eventKey": {
        "description": "uniquely identifies the tab (Type: number | string)"
      },
      "href": {
        "description": "URL associated with the Tab. A Tab with an href will render as an <a> instead of a <button>. A Tab inside a <Tabs component=\"nav\"> should have an href.",
        "type": "string"
      },
      "inoperableEvents": {
        "description": "Events to prevent when the button is in an aria-disabled state (Type: string[])",
        "type": "array"
      },
      "isAriaDisabled": {
        "description": "Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute",
        "type": "boolean"
      },
      "isCloseDisabled": {
        "description": "Flag indicating the close button should be disabled",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Adds disabled styling and disables the button using the disabled html attribute",
        "type": "boolean"
      },
      "isHidden": {
        "description": "whether to render the tab or not",
        "type": "boolean"
      },
      "ouiaId": {
        "description": "Value to set the data-ouia-component-id for the tab button. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean"
      },
      "tabContentId": {
        "description": "child id for case in which a TabContent section is defined outside of a Tabs component (Type: string | number)"
      },
      "tabContentRef": {
        "description": "child reference for case in which a TabContent section is defined outside of a Tabs component (Type: React.RefObject<any>)"
      },
      "title": {
        "description": "Content rendered in the tab title. Should be <TabTitleText> and/or <TabTitleIcon> for proper styling. (React component or element)"
      },
      "tooltip": {
        "description": "Optional Tooltip rendered to a Tab. Should be <Tooltip> with appropriate props for proper rendering. (Type: React.ReactElement<any>)"
      }
    },
    "required": [
      "eventKey",
      "title"
    ],
    "additionalProperties": false
  },
  "OverflowTab": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OverflowTab Props",
    "description": "Props for the OverflowTab component",
    "properties": {
      "className": {
        "description": "Additional classes added to the overflow tab",
        "type": "string"
      },
      "defaultTitleText": {
        "description": "The text which displays when an overflowing tab isn't selected",
        "type": "string",
        "default": "'More'"
      },
      "focusTimeoutDelay": {
        "description": "Time in ms to wait before firing the toggles' focus event. Defaults to 0",
        "type": "number",
        "default": 0
      },
      "overflowingTabs": {
        "description": "The tabs that should be displayed in the menu (Type: TabProps[])",
        "type": "array",
        "default": []
      },
      "shouldPreventScrollOnItemFocus": {
        "description": "Flag indicating if scroll on focus of the first menu item should occur.",
        "type": "boolean",
        "default": true
      },
      "showTabCount": {
        "description": "Flag which shows the count of overflowing tabs when enabled",
        "type": "boolean"
      },
      "toggleAriaLabel": {
        "description": "The aria label applied to the button which toggles the tab overflow menu",
        "type": "string"
      },
      "zIndex": {
        "description": "z-index of the overflow tab",
        "type": "number",
        "default": 9999
      }
    },
    "additionalProperties": false
  },
  "Switch": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Switch Props",
    "description": "Props for the Switch component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible name to the switch when the label prop is not passed, and must describe the isChecked=\"true\" state.",
        "type": "string",
        "default": "undefined"
      },
      "aria-labelledby": {
        "description": "Adds an accessible name to the switch via one or more referenced id(s). The computed accessible name must describe the isChecked=\"true\" state.",
        "type": "string",
        "default": "undefined"
      },
      "className": {
        "description": "Additional classes added to the switch",
        "type": "string"
      },
      "defaultChecked": {
        "description": "Flag to set the default checked value of the switch when it is uncontrolled by React state.\nTo make the switch controlled instead use the isChecked prop, but do not use both.",
        "type": "boolean"
      },
      "hasCheckIcon": {
        "description": "Flag to show if the switch has a check icon.",
        "type": "boolean"
      },
      "id": {
        "description": "id for the label.",
        "type": "string"
      },
      "isChecked": {
        "description": "Flag to show if the switch is checked when it is controlled by React state.\nTo make the switch uncontrolled instead use the defaultChecked prop, but do not use both.",
        "type": "boolean",
        "default": true
      },
      "isDisabled": {
        "description": "Flag to show if the switch is disabled.",
        "type": "boolean",
        "default": false
      },
      "isReversed": {
        "description": "Flag to reverse the layout of toggle and label (label at start, toggle at end).",
        "type": "boolean",
        "default": false
      },
      "label": {
        "description": "Text value for the visible label (React component or element)"
      },
      "onChange": {
        "description": "A callback for when the switch selection changes. (event, isChecked) => {} (Function: (event: React.FormEvent<HTMLInputElement>, checked: boolean) => void)",
        "default": "() => undefined as any"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "Spinner": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Spinner Props",
    "description": "Props for the Spinner component",
    "properties": {
      "aria-label": {
        "description": "Accessible label to describe what is loading",
        "type": "string"
      },
      "aria-labelledBy": {
        "description": "Id of element which describes what is being loaded",
        "type": "string"
      },
      "aria-valuetext": {
        "description": "Text describing that current loading status or progress",
        "type": "string",
        "default": "'Loading...'"
      },
      "className": {
        "description": "Additional classes added to the Spinner.",
        "type": "string",
        "default": "''"
      },
      "diameter": {
        "description": "Diameter of spinner set as CSS variable",
        "type": "string"
      },
      "isInline": {
        "description": "Indicates the spinner is inline and the size should inherit the text font size. This will override the size prop.",
        "type": "boolean",
        "default": false
      },
      "size": {
        "description": "Size variant of progress.",
        "enum": [
          "sm",
          "md",
          "lg",
          "xl"
        ],
        "default": "'xl'"
      }
    },
    "additionalProperties": false
  },
  "SkipToContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SkipToContent Props",
    "description": "Props for the SkipToContent component",
    "properties": {
      "children": {
        "description": "Content to display within the skip to content component, typically a string. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional styles to apply to the skip to content component.",
        "type": "string",
        "default": "''"
      },
      "href": {
        "description": "The skip to content link.",
        "type": "string"
      }
    },
    "required": [
      "href"
    ],
    "additionalProperties": false
  },
  "Skeleton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Skeleton Props",
    "description": "Props for the Skeleton component",
    "properties": {
      "className": {
        "description": "Additional classes added to the Skeleton",
        "type": "string"
      },
      "fontSize": {
        "description": "The font size height of the Skeleton",
        "enum": [
          "sm",
          "md",
          "lg",
          "xl",
          "2xl",
          "3xl",
          "4xl"
        ]
      },
      "height": {
        "description": "The height of the Skeleton. Must specify pixels or percentage.",
        "type": "string"
      },
      "screenreaderText": {
        "description": "Text read just to screen reader users",
        "type": "string"
      },
      "shape": {
        "description": "The shape of the Skeleton",
        "enum": [
          "circle",
          "square"
        ]
      },
      "width": {
        "description": "The width of the Skeleton. Must specify pixels or percentage.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "SliderStep": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SliderStep Props",
    "description": "Props for the SliderStep component",
    "properties": {
      "className": {
        "description": "Additional classes added to the slider step.",
        "type": "string"
      },
      "isActive": {
        "description": "Flag indicating the step is active.",
        "type": "boolean",
        "default": false
      },
      "isLabelHidden": {
        "description": "Flag indicating that the label should be hidden.",
        "type": "boolean",
        "default": false
      },
      "isTickHidden": {
        "description": "Flag indicating that the tick should be hidden.",
        "type": "boolean",
        "default": false
      },
      "label": {
        "description": "Step label. *",
        "type": "string"
      },
      "value": {
        "description": "Step value. *",
        "type": "number"
      }
    },
    "additionalProperties": false
  },
  "Slider": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Slider Props",
    "description": "The main slider component.",
    "properties": {
      "areCustomStepsContinuous": {
        "description": "Flag indicating if the slider is discrete for custom steps. This will cause the slider\nto snap to the closest value.",
        "type": "boolean",
        "default": false
      },
      "aria-describedby": {
        "description": "One or more id's to use for the slider thumb's accessible description.",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "One or more id's to use for the slider thumb's accessible label.",
        "type": "string"
      },
      "className": {
        "description": "Additional classes added to the slider.",
        "type": "string"
      },
      "customSteps": {
        "description": "Array of custom slider step objects (value and label of each step) for the slider. (Type: SliderStepObject[])",
        "type": "array"
      },
      "endActions": {
        "description": "Actions placed at the end of the slider. (React component or element)"
      },
      "hasTooltipOverThumb": {
        "description": "",
        "type": "boolean",
        "default": false
      },
      "inputAriaLabel": {
        "description": "Accessible label for the input field.",
        "type": "string",
        "default": "'Slider value input'"
      },
      "inputLabel": {
        "description": "Text label that is place after the input field. (Type: string | number)"
      },
      "inputPosition": {
        "description": "Position of the input. Note \"right\" is deprecated. Use \"end\" instead",
        "enum": [
          "aboveThumb",
          "right",
          "end"
        ],
        "default": "'end'"
      },
      "inputValue": {
        "description": "Value displayed in the input field.",
        "type": "number",
        "default": 0
      },
      "isDisabled": {
        "description": "Adds disabled styling, and disables the slider and the input component if present.",
        "type": "boolean",
        "default": false
      },
      "isInputVisible": {
        "description": "Flag to show value input field.",
        "type": "boolean",
        "default": false
      },
      "leftActions": {
        "description": "Use startActions instead. Actions placed at the start of the slider. (React component or element)"
      },
      "max": {
        "description": "The maximum permitted value.",
        "type": "number",
        "default": 100
      },
      "min": {
        "description": "The minimum permitted value.",
        "type": "number",
        "default": 0
      },
      "onChange": {
        "description": "Value change callback. This is called when the slider value changes. (Function: (\n  event: SliderOnChangeEvent,\n  value: number,\n  inputValue?: number,\n  setLocalInputValue?: React.Dispatch<React.SetStateAction<number>>\n) => void)"
      },
      "rightActions": {
        "description": "Use endActions instead. Actions placed to the right of the slider. (React component or element)"
      },
      "showBoundaries": {
        "description": "Flag to indicate if boundaries should be shown for slider that does not have custom steps.",
        "type": "boolean",
        "default": true
      },
      "showTicks": {
        "description": "Flag to indicate if ticks should be shown for slider that does not have custom steps.",
        "type": "boolean",
        "default": false
      },
      "startActions": {
        "description": "Actions placed at the start of the slider. (React component or element)"
      },
      "step": {
        "description": "The step interval.",
        "type": "number",
        "default": 1
      },
      "thumbAriaLabel": {
        "description": "",
        "type": "string",
        "default": "'Value'"
      },
      "value": {
        "description": "Current value of the slider.",
        "type": "number",
        "default": 0
      }
    },
    "additionalProperties": false
  },
  "SliderStepObject": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SliderStepObject Props",
    "description": "Properties for creating custom steps in a slider. These properties should be passed in as\nan object within an array to the slider component's customSteps property.",
    "properties": {
      "isLabelHidden": {
        "description": "Flag to hide the label.",
        "type": "boolean"
      },
      "label": {
        "description": "The display label for the step value. This is also used for the aria-valuetext attribute.",
        "type": "string"
      },
      "value": {
        "description": "Value of the step. This value is a percentage of the slider where the tick is drawn.",
        "type": "number"
      }
    },
    "required": [
      "label",
      "value"
    ],
    "additionalProperties": false
  },
  "SliderOnChangeEvent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SliderOnChangeEvent Props",
    "description": "Props for the SliderOnChangeEvent component",
    "properties": {},
    "additionalProperties": false
  },
  "SimpleListItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SimpleListItem Props",
    "description": "Props for the SimpleListItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the SimpleList item (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the SimpleList <li>",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Component type of the SimpleList item",
        "enum": [
          "button",
          "a"
        ],
        "default": "'button'"
      },
      "componentClassName": {
        "description": "Additional classes added to the SimpleList <a> or <button>",
        "type": "string",
        "default": "''"
      },
      "componentProps": {
        "description": "Additional props added to the SimpleList <a> or <button> (Type: any)"
      },
      "href": {
        "description": "Default hyperlink location",
        "type": "string",
        "default": "''"
      },
      "isActive": {
        "description": "Indicates if the link is current/highlighted",
        "type": "boolean",
        "default": false
      },
      "itemId": {
        "description": "id for the item. (Type: number | string)"
      },
      "onClick": {
        "description": "OnClick callback for the SimpleList item (Type: (event: React.MouseEvent | React.ChangeEvent) => void)",
        "default": "() => {}"
      },
      "type": {
        "description": "Type of button SimpleList item",
        "enum": [
          "button",
          "submit",
          "reset"
        ],
        "default": "'button'"
      }
    },
    "additionalProperties": false
  },
  "SimpleListGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SimpleListGroup Props",
    "description": "Props for the SimpleListGroup component",
    "properties": {
      "children": {
        "description": "Content rendered inside the SimpleList group (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the SimpleList <ul>",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "ID of SimpleList group",
        "type": "string",
        "default": "''"
      },
      "title": {
        "description": "Title of the SimpleList group (React component or element)",
        "default": "''"
      },
      "titleClassName": {
        "description": "Additional classes added to the SimpleList group title",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "SimpleList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SimpleList Props",
    "description": "Props for the SimpleList component",
    "properties": {
      "aria-label": {
        "description": "aria-label for the <ul> element that wraps the SimpleList items.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the SimpleList (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the SimpleList container",
        "type": "string",
        "default": "''"
      },
      "isControlled": {
        "description": "Indicates whether component is controlled by its internal state",
        "type": "boolean",
        "default": true
      },
      "onSelect": {
        "description": "Callback when an item is selected (Type: (\n  ref: React.RefObject<HTMLButtonElement | null> | React.RefObject<HTMLAnchorElement | null>,\n  props: SimpleListItemProps\n) => void)"
      }
    },
    "additionalProperties": false
  },
  "SimpleListState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SimpleListState Props",
    "description": "Props for the SimpleListState component",
    "properties": {
      "currentRef": {
        "description": "Ref of the current SimpleListItem (Type: React.RefObject<HTMLButtonElement | null> | React.RefObject<HTMLAnchorElement | null>)"
      }
    },
    "required": [
      "currentRef"
    ],
    "additionalProperties": false
  },
  "SidebarPanel": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SidebarPanel Props",
    "description": "Props for the SidebarPanel component",
    "properties": {
      "backgroundVariant": {
        "description": "Variant of the sidebar panel background.",
        "enum": [
          "default",
          "secondary"
        ],
        "default": "'default'"
      },
      "children": {
        "description": " (React component or element)"
      },
      "hasNoBackground": {
        "description": "Removes the background color.",
        "type": "boolean"
      },
      "hasPadding": {
        "description": "Adds padding to the panel.",
        "type": "boolean"
      },
      "variant": {
        "description": "Indicates whether the panel is positioned statically or sticky to the top. Default is sticky on small screens when the orientation is stack, and static on medium and above screens when the orientation is split.",
        "enum": [
          "default",
          "sticky",
          "static"
        ],
        "default": "'default'"
      },
      "width": {
        "description": "Sets the panel width at various breakpoints. Default is 250px when the orientation is split.",
        "enum": [
          "default",
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100",
          "default",
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100",
          "default",
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100",
          "default",
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100",
          "default",
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100",
          "2xl",
          "default",
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100"
        ]
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "SidebarContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SidebarContent Props",
    "description": "Props for the SidebarContent component",
    "properties": {
      "backgroundVariant": {
        "description": "Variant of the sidebar content background.",
        "enum": [
          "default",
          "secondary"
        ],
        "default": "'default'"
      },
      "children": {
        "description": " (React component or element)"
      },
      "hasNoBackground": {
        "description": "Removes the background color.",
        "type": "boolean"
      },
      "hasPadding": {
        "description": "Adds padding to the content.",
        "type": "boolean"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "Sidebar": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Sidebar Props",
    "description": "Props for the Sidebar component",
    "properties": {
      "children": {
        "description": " (React component or element)"
      },
      "hasBorder": {
        "description": "Adds a border between the panel and content.",
        "type": "boolean"
      },
      "hasGutter": {
        "description": "Adds space between the panel and content.",
        "type": "boolean"
      },
      "hasNoBackground": {
        "description": "Removes the background color.",
        "type": "boolean"
      },
      "isPanelRight": {
        "description": "Indicates that the panel is displayed to the right of the content when the oritentation is split.",
        "type": "boolean",
        "default": false
      },
      "orientation": {
        "description": "Indicates the direction of the layout. Default orientation is stack on small screens, and split on medium screens and above.",
        "enum": [
          "stack",
          "split"
        ]
      }
    },
    "additionalProperties": false
  },
  "SearchInput": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SearchInput Props",
    "description": "The main search input component.",
    "properties": {
      "advancedSearchDelimiter": {
        "description": "Delimiter in the query string for pairing attributes with search values.\nRequired whenever attributes are passed as props.",
        "type": "string"
      },
      "appendTo": {
        "description": "The container to append the menu to.\nIf your menu is being cut off you can append it to an element higher up the DOM tree.\nSome examples:\nappendTo={() => document.body}\nappendTo={document.getElementById('target')}",
        "enum": [
          "inline"
        ]
      },
      "areUtilitiesDisplayed": {
        "description": "Flag to indicate utilities should be displayed. By default if this prop is undefined or false, utilities will only be displayed when the search input has a value.",
        "type": "boolean"
      },
      "aria-label": {
        "description": "An accessible label for the search input.",
        "type": "string"
      },
      "attributes": {
        "description": "Array of attribute values used for dynamically generated advanced search. (Type: string[] | SearchInputSearchAttribute[])",
        "default": []
      },
      "className": {
        "description": "Additional classes added to the advanced search menu.",
        "type": "string"
      },
      "expandableInput": {
        "description": "Object that makes the search input expandable/collapsible. (Type: SearchInputExpandable)"
      },
      "formAdditionalItems": {
        "description": " (React component or element)"
      },
      "hasWordsAttrLabel": {
        "description": "Attribute label for strings unassociated with one of the provided listed attributes. (React component or element)",
        "default": "'Has words'"
      },
      "hint": {
        "description": "A suggestion for autocompleting.",
        "type": "string"
      },
      "inputProps": {
        "description": "Additional props to spread to the search input element. (Type: any)"
      },
      "isAdvancedSearchOpen": {
        "description": "A flag for controlling the open state of a custom advanced search implementation.",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag indicating if search input is disabled.",
        "type": "boolean"
      },
      "isNextNavigationButtonDisabled": {
        "description": "Flag indicating if the next navigation button is disabled.",
        "type": "boolean"
      },
      "isPreviousNavigationButtonDisabled": {
        "description": "Flag indicating if the previous navigation button is disabled.",
        "type": "boolean"
      },
      "name": {
        "description": "Name attribute for the search input",
        "type": "string"
      },
      "nextNavigationButtonAriaLabel": {
        "description": "Accessible label for the button to navigate to next result.",
        "type": "string"
      },
      "onChange": {
        "description": "A callback for when the input value changes. (Function: (event: React.FormEvent<HTMLInputElement>, value: string) => void)"
      },
      "onClear": {
        "description": "A callback for when the user clicks the clear button. (Function: (event: React.SyntheticEvent<HTMLButtonElement>) => void)"
      },
      "onNextClick": {
        "description": "A callback for when the user clicks to navigate to next result. (Function: (event: React.SyntheticEvent<HTMLButtonElement>) => void)"
      },
      "onPreviousClick": {
        "description": "A callback for when the user clicks to navigate to previous result. (Function: (event: React.SyntheticEvent<HTMLButtonElement>) => void)"
      },
      "onSearch": {
        "description": "A callback for when the search button is clicked. (Function: (\n  event: React.SyntheticEvent<HTMLButtonElement>,\n  value: string,\n  attrValueMap: { [key: string]: string }\n) => void)"
      },
      "onToggleAdvancedSearch": {
        "description": "A callback for when the open advanced search button is clicked. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, isOpen?: boolean) => void)"
      },
      "openMenuButtonAriaLabel": {
        "description": "Accessible label for the button which opens the advanced search form menu.",
        "type": "string"
      },
      "placeholder": {
        "description": "Placeholder text of the search input.",
        "type": "string"
      },
      "previousNavigationButtonAriaLabel": {
        "description": "Accessible label for the button to navigate to previous result.",
        "type": "string"
      },
      "resetButtonLabel": {
        "description": "Label for the button which resets the advanced search form and clears the search input.",
        "type": "string",
        "default": "'Reset'"
      },
      "resultsCount": {
        "description": "The number of search results returned. Either a total number of results,\nor a string representing the current result over the total number of results. i.e. \"1 / 5\". (Type: number | string)"
      },
      "searchInputId": {
        "description": "Id for the search input",
        "type": "string"
      },
      "submitSearchButtonLabel": {
        "description": "Label for the button which calls the onSearch event handler.",
        "type": "string",
        "default": "'Search'"
      },
      "value": {
        "description": "Value of the search input.",
        "type": "string",
        "default": "''"
      },
      "zIndex": {
        "description": "z-index of the advanced search form when appendTo is not inline.",
        "type": "number"
      },
      "getAttrValueMap": {
        "description": "Function which builds an attribute-value map by parsing the value in the search input. (Function: () => { [key: string]: string })"
      },
      "isSearchMenuOpen": {
        "description": "Flag for toggling the open/close state of the advanced search menu.",
        "type": "boolean"
      },
      "onToggleAdvancedMenu": {
        "description": "A callback for when the open advanced search button is clicked. (Function: (e: React.SyntheticEvent<HTMLButtonElement>) => void)"
      },
      "parentInputRef": {
        "description": "Ref of the input element within the search input. (Type: React.RefObject<any>)"
      },
      "parentRef": {
        "description": "Ref of the div wrapping the whole search input. (Type: React.RefObject<any>)"
      }
    },
    "additionalProperties": false
  },
  "SearchInputSearchAttribute": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SearchInputSearchAttribute Props",
    "description": "Properties for adding search attributes to an advanced search input. These properties must\nbe passed in as an object within an array to the search input component's attribute property.",
    "properties": {
      "attr": {
        "description": "The search attribute's value to be provided in the search input's query string.\nIt should have no spaces and be unique for every attribute.",
        "type": "string"
      },
      "display": {
        "description": "The search attribute's display name. It is used to label the field in the advanced\nsearch menu. (React component or element)"
      }
    },
    "required": [
      "attr",
      "display"
    ],
    "additionalProperties": false
  },
  "SearchInputExpandable": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SearchInputExpandable Props",
    "description": "Properties for creating an expandable search input. These properties should be passed into\nthe search input component's expandableInput property.",
    "properties": {
      "isExpanded": {
        "description": "Flag to indicate if the search input is expanded.",
        "type": "boolean"
      },
      "onToggleExpand": {
        "description": "Callback function to toggle the expandable search input. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, isExpanded: boolean) => void)"
      },
      "toggleAriaLabel": {
        "description": "An accessible label for the expandable search input toggle.",
        "type": "string"
      }
    },
    "required": [
      "isExpanded",
      "onToggleExpand",
      "toggleAriaLabel"
    ],
    "additionalProperties": false
  },
  "SelectOption": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SelectOption Props",
    "description": "See the MenuItem section of the Menu documentation for additional props that may be passed.",
    "properties": {
      "children": {
        "description": "Anything which can be rendered in a select option (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of select option",
        "type": "string"
      },
      "description": {
        "description": "Description of the option (React component or element)"
      },
      "hasCheckbox": {
        "description": "Indicates the option has a checkbox",
        "type": "boolean"
      },
      "icon": {
        "description": "Render option with icon (React component or element)"
      },
      "isDisabled": {
        "description": "Indicates the option is disabled",
        "type": "boolean"
      },
      "isExternalLink": {
        "description": "Render an external link icon on focus or hover, and set the link's\n\"target\" attribute to a value of \"_blank\".",
        "type": "boolean"
      },
      "isFocused": {
        "description": "Indicates the option is focused",
        "type": "boolean"
      },
      "isSelected": {
        "description": "Indicates the option is selected",
        "type": "boolean"
      },
      "value": {
        "description": "Identifies the component in the Select onSelect callback (Type: any)"
      }
    },
    "additionalProperties": false
  },
  "SelectList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SelectList Props",
    "description": "Props for the SelectList component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible name to the menu.",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered inside of menu list (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the menu list",
        "type": "string"
      },
      "isAriaMultiselectable": {
        "description": "Indicates to assistive technologies whether more than one item can be selected\nfor a non-checkbox menu. Only applies when the menu's role is \"listbox\".",
        "type": "boolean",
        "default": false
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "SelectGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "SelectGroup Props",
    "description": "See the MenuGroup section of the Menu documentation for additional props that may be passed.",
    "properties": {
      "children": {
        "description": "Anything which can be rendered in a select group (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of select group",
        "type": "string"
      },
      "label": {
        "description": "Label of the select group (React component or element)"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "Select": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Select Props",
    "description": "See the Menu documentation for additional props that may be passed.",
    "properties": {
      "activeItemId": {
        "description": "itemId of the currently active item. You can also specify isActive on the MenuItem. (Type: string | number)"
      },
      "activeMenu": {
        "description": "ID of the currently active menu for the drilldown variant",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered inside of the Menu (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Menu",
        "type": "string"
      },
      "containsDrilldown": {
        "description": "Indicates if menu contains a drilldown menu",
        "type": "boolean"
      },
      "containsFlyout": {
        "description": "Indicates if menu contains a flyout menu",
        "type": "boolean"
      },
      "drilldownItemPath": {
        "description": "Indicates the path of drilled in menu itemIds (Type: string[])",
        "type": "array"
      },
      "drilledInMenus": {
        "description": "Array of menus that are drilled in (Type: string[])",
        "type": "array"
      },
      "focusTimeoutDelay": {
        "description": "Time in ms to wait before firing the toggles' focus event. Defaults to 0",
        "type": "number"
      },
      "id": {
        "description": "ID of the menu",
        "type": "string"
      },
      "isMenuDrilledIn": {
        "description": "Indicates if a menu is drilled into",
        "type": "boolean"
      },
      "isNavFlyout": {
        "description": "Indicating that the menu should have nav flyout styling",
        "type": "boolean"
      },
      "isOpen": {
        "description": "Flag to indicate if select is open",
        "type": "boolean"
      },
      "isPlain": {
        "description": "Indicates if the menu should be without the outer box-shadow",
        "type": "boolean"
      },
      "isRootMenu": {
        "description": "Internal flag indicating if the Menu is the root of a menu tree",
        "type": "boolean"
      },
      "isScrollable": {
        "description": "Indicates if the menu should be srollable",
        "type": "boolean"
      },
      "maxMenuHeight": {
        "description": "Maximum height of select menu",
        "type": "string"
      },
      "menuHeight": {
        "description": "Height of the select menu",
        "type": "string"
      },
      "onActionClick": {
        "description": "Callback called when an MenuItems's action button is clicked. You can also specify it within a MenuItemAction. (Function: (event?: any, itemId?: any, actionId?: any) => void)"
      },
      "onDrillIn": {
        "description": "Callback for drilling into a submenu (Type: (\n  event: React.KeyboardEvent | React.MouseEvent,\n  fromItemId: string,\n  toItemId: string,\n  itemId: string\n) => void)"
      },
      "onDrillOut": {
        "description": "Callback for drilling out of a submenu (Type: (event: React.KeyboardEvent | React.MouseEvent, toItemId: string, itemId: string) => void)"
      },
      "onGetMenuHeight": {
        "description": "Callback for collecting menu heights (Function: (menuId: string, height: number) => void)"
      },
      "onOpenChange": {
        "description": "Callback to allow the select component to change the open state of the menu.\nTriggered by clicking outside of the menu, or by pressing any keys specified in onOpenChangeKeys. (Function: (isOpen: boolean) => void)"
      },
      "onOpenChangeKeys": {
        "description": "Keys that trigger onOpenChange, defaults to tab and escape. It is highly recommended to include Escape in the array, while Tab may be omitted if the menu contains non-menu items that are focusable. (Type: string[])",
        "type": "array"
      },
      "onSelect": {
        "description": "Callback for updating when item selection changes. You can also specify onClick on the MenuItem. (Type: (event?: React.MouseEvent<Element, MouseEvent>, value?: string | number) => void)"
      },
      "onToggleKeydown": {
        "description": "Callback to override the toggle keydown behavior. By default, when the toggle has focus and the menu is open, pressing the up/down arrow keys will focus a valid non-disabled menu item - the first item for the down arrow key and last item for the up arrow key. (Function: (event: KeyboardEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "parentMenu": {
        "description": "ID of parent menu for drilldown menus",
        "type": "string"
      },
      "popperProps": {
        "description": "Additional properties to pass to the popper (Type: SelectPopperProps)"
      },
      "role": {
        "description": "Determines the accessible role of the menu. For a non-checkbox menu that can have\none or more items selected, pass in \"listbox\".",
        "type": "string"
      },
      "selected": {
        "description": "Single itemId for single select menus, or array of itemIds for multi select. You can also specify isSelected on the MenuItem. (Type: any | any[])"
      },
      "shouldFocusFirstItemOnOpen": {
        "description": "Flag indicating the first menu item should be focused after opening the menu.",
        "type": "boolean"
      },
      "shouldFocusToggleOnSelect": {
        "description": "Flag indicating the toggle should be focused after a selection. If this use case is too restrictive, the optional toggleRef property with a node toggle may be used to control focus.",
        "type": "boolean"
      },
      "shouldPreventScrollOnItemFocus": {
        "description": "Flag indicating if scroll on focus of the first menu item should occur.",
        "type": "boolean"
      },
      "toggle": {
        "description": "Select toggle. The toggle should either be a renderer function which forwards the given toggle ref, or a direct ReactNode that should be passed along with the toggleRef property. (React component or element)"
      },
      "variant": {
        "description": "Select variant. For typeahead variant focus won't shift to menu items when pressing up/down arrows.",
        "enum": [
          "default",
          "typeahead"
        ]
      },
      "zIndex": {
        "description": "z-index of the select menu",
        "type": "number"
      }
    },
    "required": [
      "toggle"
    ],
    "additionalProperties": false
  },
  "Radio": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Radio Props",
    "description": "Props for the Radio component",
    "properties": {
      "aria-label": {
        "description": "Aria label for the radio.",
        "type": "string"
      },
      "body": {
        "description": "Body of the radio. (React component or element)"
      },
      "checked": {
        "description": "Flag to show if the radio is checked.",
        "type": "boolean"
      },
      "className": {
        "description": "Additional classes added to the radio wrapper. This wrapper will be div element by default. It will be a label element if\nisLabelWrapped is true, or it can be overridden by any element specified in the component prop.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the radio wrapper component to render. Defaults to \"div\". If set to \"label\", behaves the same as if isLabelWrapped prop was specified. (Type: React.ElementType)"
      },
      "description": {
        "description": "Description text of the radio. (React component or element)"
      },
      "id": {
        "description": "Id of the radio.",
        "type": "string"
      },
      "inputClassName": {
        "description": "Additional classes added to the radio input.",
        "type": "string"
      },
      "isChecked": {
        "description": "Flag to show if the radio is checked.",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag to show if the radio is disabled.",
        "type": "boolean",
        "default": false
      },
      "isLabelWrapped": {
        "description": "Flag to indicate whether the radio wrapper element is a native label element for the radio input. Will not apply if a component prop (with a value other than a \"label\") is specified.",
        "type": "boolean"
      },
      "isValid": {
        "description": "Flag to show if the radio selection is valid or invalid.",
        "type": "boolean",
        "default": true
      },
      "label": {
        "description": "Label text of the radio. (React component or element)"
      },
      "labelPosition": {
        "description": "Sets the position of the label. Defaults to 'end' (after the radio input).",
        "enum": [
          "start",
          "end"
        ]
      },
      "name": {
        "description": "Name for group of radios",
        "type": "string"
      },
      "onChange": {
        "description": "A callback for when the radio selection changes. (Function: (event: React.FormEvent<HTMLInputElement>, checked: boolean) => void)",
        "default": "() => {}"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "additionalProperties": false
  },
  "ProgressStepper": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ProgressStepper Props",
    "description": "Props for the ProgressStepper component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible label to the progress stepper.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the progress stepper. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the progress stepper container.",
        "type": "string"
      },
      "isCenterAligned": {
        "description": "Flag indicating the progress stepper should be centered.",
        "type": "boolean"
      },
      "isCompact": {
        "description": "Flag indicating the progress stepper should be rendered compactly.",
        "type": "boolean"
      },
      "isVertical": {
        "description": "Flag indicating the progress stepper has a vertical layout.",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "ProgressStep": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ProgressStep Props",
    "description": "Props for the ProgressStep component",
    "properties": {
      "aria-label": {
        "description": "Accessible label for the progress step. Should communicate all information being communicated by the progress\nstep's icon, including the variant and the completed status.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the progress step. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the progress step container.",
        "type": "string"
      },
      "description": {
        "description": "Description text of a progress step. (React component or element)"
      },
      "icon": {
        "description": "Custom icon of a progress step. Will override default icons provided by the variant. (React component or element)"
      },
      "isCurrent": {
        "description": "Flag indicating the progress step is the current step.",
        "type": "boolean"
      },
      "popoverRender": {
        "description": "Forwards the step ref to rendered function.  Use this prop to add a popover to the step. (React component or element)"
      },
      "titleId": {
        "description": "ID of the title of the progress step.",
        "type": "string"
      },
      "variant": {
        "description": "Variant of the progress step. Each variant has a default icon.",
        "enum": [
          "default",
          "success",
          "info",
          "pending",
          "warning",
          "danger"
        ]
      }
    },
    "additionalProperties": false
  },
  "ProgressHelperText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ProgressHelperText Props",
    "description": "Props for the ProgressHelperText component",
    "properties": {
      "children": {
        "description": "Content which can be used to convey additional information about the progress component.\nWe recommend the helper text component as it was designed for this purpose. (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "ProgressContainer": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ProgressContainer Props",
    "description": "Props for the ProgressContainer component",
    "properties": {
      "helperText": {
        "description": "Content which can be used to convey additional information about the progress component.\nWe recommend the helper text component as it was designed for this purpose. (React component or element)"
      },
      "isTitleTruncated": {
        "description": "Whether string title should be truncated",
        "type": "boolean",
        "default": false
      },
      "label": {
        "description": "Label to indicate what progress is showing. (React component or element)",
        "default": null
      },
      "measureLocation": {
        "description": "Location of progress value.",
        "enum": [
          "outside",
          "inside",
          "top",
          "none"
        ],
        "default": "ProgressMeasureLocation.top"
      },
      "parentId": {
        "description": "Progress component DOM ID.",
        "type": "string"
      },
      "progressBarAriaProps": {
        "description": "Properties needed for aria support (Type: AriaProps)"
      },
      "title": {
        "description": "Progress title. The isTitleTruncated property will only affect string titles. Node title truncation must be handled manually. (React component or element)",
        "default": "''"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if title is truncated (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')"
      },
      "value": {
        "description": "Actual progress value.",
        "type": "number"
      },
      "variant": {
        "description": "Type of progress status.",
        "enum": [
          "danger",
          "success",
          "warning"
        ],
        "default": null
      }
    },
    "required": [
      "parentId",
      "value"
    ],
    "additionalProperties": false
  },
  "ProgressBar": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ProgressBar Props",
    "description": "Props for the ProgressBar component",
    "properties": {
      "children": {
        "description": "What should be rendered inside progress bar. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes for Progres bar.",
        "type": "string",
        "default": "''"
      },
      "progressBarAriaProps": {
        "description": "Minimal value of progress. (Type: AriaProps)"
      },
      "value": {
        "description": "Actual progress value.",
        "type": "number"
      }
    },
    "required": [
      "value"
    ],
    "additionalProperties": false
  },
  "Progress": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Progress Props",
    "description": "Props for the Progress component",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the ProgressBar. Required when title not used and there is not any label associated with the progress bar",
        "type": "string",
        "default": null
      },
      "aria-labelledby": {
        "description": "Associates the ProgressBar with it's label for accessibility purposes. Required when title not used",
        "type": "string",
        "default": null
      },
      "className": {
        "description": "Classname for progress component.",
        "type": "string",
        "default": "''"
      },
      "helperText": {
        "description": "Content which can be used to convey additional information about the progress component.\nWe recommend the helper text component as it was designed for this purpose. (React component or element)"
      },
      "id": {
        "description": "DOM id for progress component.",
        "type": "string",
        "default": "''"
      },
      "isTitleTruncated": {
        "description": "Indicate whether to truncate the string title",
        "type": "boolean",
        "default": false
      },
      "label": {
        "description": "Text description of current progress value to display instead of percentage. (React component or element)",
        "default": null
      },
      "max": {
        "description": "Maximum value of progress.",
        "type": "number",
        "default": 100
      },
      "measureLocation": {
        "description": "Where the measure percent will be located.",
        "enum": [
          "outside",
          "inside",
          "top",
          "none"
        ],
        "default": "ProgressMeasureLocation.top"
      },
      "min": {
        "description": "Minimal value of progress.",
        "type": "number",
        "default": 0
      },
      "size": {
        "description": "Size variant of progress.",
        "enum": [
          "sm",
          "md",
          "lg"
        ],
        "default": null
      },
      "title": {
        "description": "Title above progress. The isTitleTruncated property will only affect string titles. Node title truncation must be handled manually. (React component or element)",
        "default": "''"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if title is truncated",
        "enum": [
          "auto",
          "top",
          "bottom",
          "left",
          "right"
        ],
        "default": "'top'"
      },
      "value": {
        "description": "Actual value of progress.",
        "type": "number",
        "default": 0
      },
      "valueText": {
        "description": "Accessible text description of current progress value, for when value is not a percentage. Use with label.",
        "type": "string",
        "default": null
      },
      "variant": {
        "description": "Status variant of progress.",
        "enum": [
          "danger",
          "success",
          "warning"
        ],
        "default": null
      }
    },
    "additionalProperties": false
  },
  "PopoverHeaderText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PopoverHeaderText Props",
    "description": "Props for the PopoverHeaderText component",
    "properties": {
      "children": {
        "description": "Content of the header text (React component or element)"
      },
      "className": {
        "description": "Class to be applied to the header text",
        "type": "string"
      },
      "headingLevel": {
        "description": "Heading level of the header title",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ]
      }
    },
    "required": [
      "children",
      "headingLevel"
    ],
    "additionalProperties": false
  },
  "PopoverHeaderIcon": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PopoverHeaderIcon Props",
    "description": "Props for the PopoverHeaderIcon component",
    "properties": {
      "children": {
        "description": "Content of the header icon (React component or element)"
      },
      "className": {
        "description": "Class to be applied to the header icon",
        "type": "string"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "PopoverHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PopoverHeader Props",
    "description": "Props for the PopoverHeader component",
    "properties": {
      "alertSeverityScreenReaderText": {
        "description": "Text announced by screen reader when alert severity variant is set to indicate severity level",
        "type": "string"
      },
      "alertSeverityVariant": {
        "description": "Severity variants for an alert popover. This modifies the color of the header to match the severity.",
        "enum": [
          "custom",
          "info",
          "warning",
          "success",
          "danger"
        ]
      },
      "children": {
        "description": "Content of the popover header. (React component or element)"
      },
      "className": {
        "description": "Class to be applied to the header.",
        "type": "string"
      },
      "icon": {
        "description": "Indicates the header contains an icon. (React component or element)"
      },
      "id": {
        "description": "Id of the header",
        "type": "string"
      },
      "titleHeadingLevel": {
        "description": "Heading level of the header title",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "default": "'h6'"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "PopoverFooter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PopoverFooter Props",
    "description": "Props for the PopoverFooter component",
    "properties": {
      "children": {
        "description": "Footer node (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Popover footer",
        "type": "string",
        "default": "''"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "PopoverDialog": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PopoverDialog Props",
    "description": "Props for the PopoverDialog component",
    "properties": {
      "children": {
        "description": "PopoverDialog body (React component or element)",
        "default": null
      },
      "className": {
        "description": "PopoverDialog additional class",
        "type": "string",
        "default": null
      },
      "position": {
        "description": "PopoverDialog position",
        "enum": [
          "top",
          "bottom",
          "left",
          "right"
        ],
        "default": "'top'"
      }
    },
    "additionalProperties": false
  },
  "PopoverContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PopoverContent Props",
    "description": "Props for the PopoverContent component",
    "properties": {
      "children": {
        "description": "PopoverContent content (React component or element)"
      },
      "className": {
        "description": "PopoverContent additional class",
        "type": "string",
        "default": null
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "PopoverCloseButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PopoverCloseButton Props",
    "description": "Props for the PopoverCloseButton component",
    "properties": {
      "aria-label": {
        "description": "Aria label for the Close button",
        "type": "string"
      },
      "onClose": {
        "description": "PopoverCloseButton onClose function (Function: (event: any) => void)",
        "default": "() => undefined as void"
      }
    },
    "required": [
      "aria-label"
    ],
    "additionalProperties": false
  },
  "PopoverBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PopoverBody Props",
    "description": "Props for the PopoverBody component",
    "properties": {
      "children": {
        "description": "Popover body content (React component or element)"
      },
      "className": {
        "description": "Classes to be applied to the popover body.",
        "type": "string"
      },
      "id": {
        "description": "Popover body id",
        "type": "string"
      }
    },
    "required": [
      "children",
      "id"
    ],
    "additionalProperties": false
  },
  "PopoverArrow": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PopoverArrow Props",
    "description": "Props for the PopoverArrow component",
    "properties": {
      "className": {
        "description": "Popover arrow additional className",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "Popover": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Popover Props",
    "description": "The main popover component. The following properties can also be passed into another component\nthat has a property specifically for passing in popover properties.",
    "properties": {
      "alertSeverityScreenReaderText": {
        "description": "Text announced by screen reader when alert severity variant is set to indicate\nseverity level.",
        "type": "string"
      },
      "alertSeverityVariant": {
        "description": "Severity variants for an alert popover. This modifies the color of the header to\nmatch the severity.",
        "enum": [
          "custom",
          "info",
          "warning",
          "success",
          "danger"
        ]
      },
      "animationDuration": {
        "description": "The duration of the CSS fade transition animation.",
        "type": "number",
        "default": 300
      },
      "appendTo": {
        "description": "The element to append the popover to. Defaults to \"inline\".",
        "enum": [
          "inline"
        ],
        "default": "() => document.body"
      },
      "aria-label": {
        "description": "Accessible label for the popover, required when header is not present.",
        "type": "string",
        "default": "''"
      },
      "bodyContent": {
        "description": "Body content of the popover. If you want to close the popover after an action within the\nbody content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nbodyContent={hide => <Button onClick={() => hide()}>Close</Button>} (React component or element)"
      },
      "children": {
        "description": "The trigger reference element to which the popover is relatively placed to. If you cannot wrap\nthe element with the Popover, you can use the triggerRef prop instead.\nUsage: <Popover><Button>Reference</Button></Popover> (Type: ReactElement<any>)"
      },
      "className": {
        "description": "Additional classes added to the popover.",
        "type": "string",
        "default": "''"
      },
      "closeBtnAriaLabel": {
        "description": "Accessible label for the close button.",
        "type": "string",
        "default": "'Close'"
      },
      "distance": {
        "description": "Distance of the popover to its target. Defaults to 25.",
        "type": "number",
        "default": 25
      },
      "elementToFocus": {
        "description": "The element to focus when the popover becomes visible. By default the first\nfocusable element will receive focus. (Type: HTMLElement | SVGElement | string)"
      },
      "enableFlip": {
        "description": "If true, tries to keep the popover in view by flipping it if necessary.\nIf the position is set to 'auto', this prop is ignored.",
        "type": "boolean",
        "default": true
      },
      "flipBehavior": {
        "description": "The desired position to flip the popover to if the initial position is not possible.\nBy setting this prop to 'flip' it attempts to flip the popover to the opposite side if\nthere is no space.\nYou can also pass an array of positions that determines the flip order. It should contain\nthe initial position followed by alternative positions if that position is unavailable.\nExample: Initial position is 'top'. Button with popover is in the top right corner.\n'flipBehavior' is set to ['top', 'right', 'left']. Since there is no space to the top, it\nchecks if right is available. There's also no space to the right, so it finally shows the\npopover on the left.",
        "enum": [
          "flip",
          "top",
          "bottom",
          "left",
          "right",
          "top-start",
          "top-end",
          "bottom-start",
          "bottom-end",
          "left-start",
          "left-end",
          "right-start",
          "right-end"
        ],
        "default": "[\n  'top',\n  'bottom',\n  'left',\n  'right',\n  'top-start',\n  'top-end',\n  'bottom-start',\n  'bottom-end',\n  'left-start',\n  'left-end',\n  'right-start',\n  'right-end'\n]"
      },
      "footerContent": {
        "description": "Footer content of the popover. If you want to close the popover after an action within the\nfooter content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nfooterContent={hide => <Button onClick={() => hide()}>Close</Button>} (React component or element)",
        "default": null
      },
      "hasAutoWidth": {
        "description": "Removes fixed-width and allows width to be defined by contents.",
        "type": "boolean",
        "default": false
      },
      "hasNoPadding": {
        "description": "Allows content to touch edges of popover container.",
        "type": "boolean",
        "default": false
      },
      "headerComponent": {
        "description": "Sets the heading level to use for the popover header. Defaults to h6.",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "default": "'h6'"
      },
      "headerContent": {
        "description": "Simple header content to be placed within a title. If you want to close the popover after\nan action within the header content, you can use the isVisible prop for manual control,\nor you can provide a function which will receive a callback as an argument to hide the\npopover, i.e. headerContent={hide => <Button onClick={() => hide()}>Close</Button>} (React component or element)",
        "default": null
      },
      "headerIcon": {
        "description": "Icon to be displayed in the popover header. * (React component or element)",
        "default": null
      },
      "hideOnOutsideClick": {
        "description": "Hides the popover when a click occurs outside (only works if isVisible is not controlled\nby the user).",
        "type": "boolean",
        "default": true
      },
      "id": {
        "description": "Id used as part of the various popover elements (popover-${id}-header/body/footer).",
        "type": "string"
      },
      "isVisible": {
        "description": "True to show the popover programmatically. Used in conjunction with the shouldClose prop.\nBy default, the popover child element handles click events automatically. If you want to\ncontrol this programmatically, the popover will not auto-close if the close button is\nclicked, the escape key is used, or if a click occurs outside the popover. Instead, the\nconsumer is responsible for closing the popover themselves by adding a callback listener\nfor the shouldClose prop.",
        "type": "boolean",
        "default": null
      },
      "maxWidth": {
        "description": "Maximum width of the popover (default 18.75rem).",
        "type": "string",
        "default": "popoverMaxWidth && popoverMaxWidth.value"
      },
      "minWidth": {
        "description": "Minimum width of the popover (default 6.25rem).",
        "type": "string",
        "default": "popoverMinWidth && popoverMinWidth.value"
      },
      "onHidden": {
        "description": "Lifecycle function invoked when the popover has fully transitioned out. (Function: () => void)",
        "default": "(): void => null"
      },
      "onHide": {
        "description": "Lifecycle function invoked when the popover begins to transition out. (Type: (event: MouseEvent | KeyboardEvent) => void)",
        "default": "(): void => null"
      },
      "onMount": {
        "description": "Lifecycle function invoked when the popover has been mounted to the DOM. (Function: () => void)",
        "default": "(): void => null"
      },
      "onShow": {
        "description": "Lifecycle function invoked when the popover begins to transition in. (Type: (event: MouseEvent | KeyboardEvent) => void)",
        "default": "(): void => null"
      },
      "onShown": {
        "description": "Lifecycle function invoked when the popover has fully transitioned in. (Function: () => void)",
        "default": "(): void => null"
      },
      "position": {
        "description": "Popover position. Note: With the enableFlip property set to true, it will change the\nposition if there is not enough space for the starting position. The behavior of where it\nflips to can be controlled through the flipBehavior property. (Type: | PopoverPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')",
        "default": "'top'"
      },
      "shouldClose": {
        "description": "Callback function that is only invoked when isVisible is also controlled. Called when the\npopover close button is clicked, the enter key was used on it, or the escape key is used. (Type: (event: MouseEvent | KeyboardEvent, hideFunction?: () => void) => void)",
        "default": "(): void => null"
      },
      "shouldOpen": {
        "description": "Callback function that is only invoked when isVisible is also controlled. Called when the\nenter key is used on the focused trigger. (Type: (event: MouseEvent | KeyboardEvent, showFunction?: () => void) => void)",
        "default": "(): void => null"
      },
      "showClose": {
        "description": "Flag indicating whether the close button should be shown.",
        "type": "boolean",
        "default": true
      },
      "triggerAction": {
        "description": "Sets an interaction to open popover, defaults to \"click\"",
        "enum": [
          "click",
          "hover"
        ],
        "default": "'click'"
      },
      "triggerRef": {
        "description": "The trigger reference element to which the popover is relatively placed to. If you can wrap the\nelement with the popover, you can use the children prop instead, or both props together.\nWhen passed along with the trigger prop, the div element that wraps the trigger will be removed.\nUsage: <Popover triggerRef={() => document.getElementById('reference-element')} /> (Type: HTMLElement | (() => HTMLElement) | React.RefObject<any>)"
      },
      "withFocusTrap": {
        "description": "Whether to trap focus in the popover.",
        "type": "boolean"
      },
      "zIndex": {
        "description": "The z-index of the popover.",
        "type": "number",
        "default": 9999
      }
    },
    "required": [
      "bodyContent"
    ],
    "additionalProperties": false
  },
  "ToggleTemplate": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ToggleTemplate Props",
    "description": "Props for the ToggleTemplate component",
    "properties": {
      "firstIndex": {
        "description": "The first index of the items being paginated",
        "type": "number",
        "default": 0
      },
      "itemCount": {
        "description": "The total number of items being paginated",
        "type": "number",
        "default": 0
      },
      "itemsTitle": {
        "description": "The type or title of the items being paginated",
        "type": "string",
        "default": "'items'"
      },
      "lastIndex": {
        "description": "The last index of the items being paginated",
        "type": "number",
        "default": 0
      },
      "ofWord": {
        "description": "The word that joins the index and itemCount/itemsTitle (React component or element)",
        "default": "'of'"
      }
    },
    "additionalProperties": false
  },
  "PaginationOptionsMenu": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PaginationOptionsMenu Props",
    "description": "Props for the PaginationOptionsMenu component",
    "properties": {
      "appendTo": {
        "description": "The container to append the pagination options menu to. Overrides the containerRef prop.",
        "enum": [
          "inline"
        ]
      },
      "className": {
        "description": "Custom class name added to the pagination options menu.",
        "type": "string"
      },
      "containerRef": {
        "description": "React ref for the container to append the options menu to. This is a static ref provided by the main pagination component. (Type: React.RefObject<HTMLDivElement | null>)"
      },
      "dropDirection": {
        "description": "Menu will open up or open down from the options menu toggle.",
        "enum": [
          "up",
          "down"
        ],
        "default": "'down'"
      },
      "firstIndex": {
        "description": "The first index of the items being paginated.",
        "type": "number",
        "default": 0
      },
      "focusTimeoutDelay": {
        "description": "Time in ms to wait before firing the toggles' focus event. Defaults to 0",
        "type": "number",
        "default": 0
      },
      "isDisabled": {
        "description": "Flag indicating if pagination options menu is disabled.",
        "type": "boolean",
        "default": false
      },
      "isLastFullPageShown": {
        "description": "Flag to indicate whether to show last full page of results when user selects perPage\nvalue that is greater than remaining rows.",
        "type": "boolean",
        "default": false
      },
      "itemCount": {
        "description": "The total number of items being paginated.",
        "type": "number"
      },
      "itemsPerPageTitle": {
        "description": "The title of the pagination options menu.",
        "type": "string",
        "default": "'Items per page'"
      },
      "itemsTitle": {
        "description": "The type or title of the items being paginated.",
        "type": "string",
        "default": "''"
      },
      "lastIndex": {
        "description": "The last index of the items being paginated.",
        "type": "number",
        "default": 0
      },
      "lastPage": {
        "description": "The number of the last page.",
        "type": "number"
      },
      "minWidth": {
        "description": "Minimum width of the pagination options menu. If set to \"trigger\", the minimum width will be set to the toggle width.",
        "enum": [
          "trigger"
        ]
      },
      "ofWord": {
        "description": "Label for the English word \"of\".",
        "type": "string",
        "default": "'of'"
      },
      "onPerPageSelect": {
        "description": "Function called when user selects number of items per page. (Type: (\n  event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPerPage: number,\n  newPage: number,\n  startIdx?: number,\n  endIdx?: number\n) => void)",
        "default": "() => null as any"
      },
      "optionsToggleAriaLabel": {
        "description": "Accessible label for the options toggle.",
        "type": "string"
      },
      "page": {
        "description": "Current page number.",
        "type": "number"
      },
      "perPage": {
        "description": "The number of items to be displayed per page.",
        "type": "number",
        "default": 0
      },
      "perPageOptions": {
        "description": "Array of titles and values which will be the options on the options menu dropdown. (Type: PerPageOptions[])",
        "type": "array",
        "default": []
      },
      "perPageSuffix": {
        "description": "The suffix to be displayed after each option on the options menu dropdown.",
        "type": "string",
        "default": "'per page'"
      },
      "shouldPreventScrollOnItemFocus": {
        "description": "Flag indicating if scroll on focus of the first menu item should occur.",
        "type": "boolean",
        "default": true
      },
      "toggleTemplate": {
        "description": "This will be shown in pagination toggle span. You can use firstIndex, lastIndex,\nitemCount, and/or itemsTitle props. (Type: ((props: PaginationToggleTemplateProps) => React.ReactElement<any>) | string)"
      },
      "widgetId": {
        "description": "Id added to the title of the pagination options menu.",
        "type": "string"
      }
    },
    "required": [
      "toggleTemplate"
    ],
    "additionalProperties": false
  },
  "PaginationNavigation": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PaginationNavigation Props",
    "description": "Props for the PaginationNavigation component",
    "properties": {
      "className": {
        "description": "Additional classes for the pagination navigation container.",
        "type": "string",
        "default": "''"
      },
      "currPageAriaLabel": {
        "description": "Accessible label for the input displaying the current page.",
        "type": "string",
        "default": "'Current page'"
      },
      "firstPage": {
        "description": "The number of first page where pagination starts.",
        "type": "number",
        "default": 0
      },
      "isCompact": {
        "description": "Flag indicating if the pagination is compact.",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Flag indicating if the pagination is disabled.",
        "type": "boolean",
        "default": false
      },
      "itemCount": {
        "description": "Total number of items.",
        "type": "number"
      },
      "lastPage": {
        "description": "The number of the last page.",
        "type": "number",
        "default": 0
      },
      "ofWord": {
        "description": "Label for the English word \"of\".",
        "type": "string",
        "default": "'of'"
      },
      "onFirstClick": {
        "description": "Function called when user clicks to navigate to first page. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void)",
        "default": "() => undefined as any"
      },
      "onLastClick": {
        "description": "Function called when user clicks to navigate to last page. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void)",
        "default": "() => undefined as any"
      },
      "onNextClick": {
        "description": "Function called when user clicks to navigate to next page. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void)",
        "default": "() => undefined as any"
      },
      "onPageInput": {
        "description": "Function called when user inputs page number. (Function: (event: React.KeyboardEvent<HTMLInputElement>, page: number) => void)",
        "default": "() => undefined as any"
      },
      "onPreviousClick": {
        "description": "Function called when user clicks to navigate to previous page. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void)",
        "default": "() => undefined as any"
      },
      "onSetPage": {
        "description": "Function called when page is changed. (Type: (\n  event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPage: number,\n  perPage?: number,\n  startIdx?: number,\n  endIdx?: number\n) => void)"
      },
      "page": {
        "description": "The number of the current page.",
        "type": "number"
      },
      "pagesTitle": {
        "description": "The title of a page displayed beside the page number.",
        "type": "string",
        "default": "''"
      },
      "pagesTitlePlural": {
        "description": "The title of a page displayed beside the page number (the plural form).",
        "type": "string",
        "default": "''"
      },
      "paginationAriaLabel": {
        "description": "Accessible label for the pagination component.",
        "type": "string",
        "default": "'Pagination'"
      },
      "perPage": {
        "description": "Number of items per page.",
        "type": "number"
      },
      "toFirstPageAriaLabel": {
        "description": "Accessible label for the button which moves to the first page.",
        "type": "string",
        "default": "'Go to first page'"
      },
      "toLastPageAriaLabel": {
        "description": "Accessible label for the button which moves to the last page.",
        "type": "string",
        "default": "'Go to last page'"
      },
      "toNextPageAriaLabel": {
        "description": "Accessible label for the button which moves to the next page.",
        "type": "string",
        "default": "'Go to next page'"
      },
      "toPreviousPageAriaLabel": {
        "description": "Accessible label for the button which moves to the previous page.",
        "type": "string",
        "default": "'Go to previous page'"
      }
    },
    "required": [
      "onSetPage",
      "page"
    ],
    "additionalProperties": false
  },
  "PaginationNavigationState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PaginationNavigationState Props",
    "description": "Props for the PaginationNavigationState component",
    "properties": {
      "userInputPage": {
        "description": " (Type: number | string)"
      }
    },
    "additionalProperties": false
  },
  "Pagination": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Pagination Props",
    "description": "The main pagination component.",
    "properties": {
      "children": {
        "description": "What should be rendered inside the pagination. (React component or element)"
      },
      "className": {
        "description": "Additional classes for the pagination container.",
        "type": "string",
        "default": "''"
      },
      "dropDirection": {
        "description": "Direction of dropdown context menu.",
        "enum": [
          "up",
          "down"
        ]
      },
      "firstPage": {
        "description": "Page to start at.",
        "type": "number",
        "default": 1
      },
      "inset": {
        "description": "Insets at various breakpoints.",
        "enum": [
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "2xl",
          "insetNone",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl"
        ]
      },
      "isCompact": {
        "description": "Flag indicating if pagination is compact.",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Flag indicating if pagination is disabled.",
        "type": "boolean",
        "default": false
      },
      "isLastFullPageShown": {
        "description": "Indicate whether to show last full page of results when user selects perPage value\ngreater than remaining rows.",
        "type": "boolean",
        "default": false
      },
      "isStatic": {
        "description": "Flag indicating if pagination should not be sticky on mobile.",
        "type": "boolean",
        "default": false
      },
      "isSticky": {
        "description": "Flag indicating if pagination should stick to its position (based on variant).",
        "type": "boolean",
        "default": false
      },
      "itemCount": {
        "description": "Total number of items.",
        "type": "number"
      },
      "itemsEnd": {
        "description": "Last index of items on current page.",
        "type": "number",
        "default": null
      },
      "itemsStart": {
        "description": "First index of items on current page.",
        "type": "number",
        "default": null
      },
      "menuAppendTo": {
        "description": "The container to append the pagination options menu to.",
        "enum": [
          "inline"
        ]
      },
      "offset": {
        "description": "Start index of rows to display, used in place of providing page.",
        "type": "number",
        "default": null
      },
      "onFirstClick": {
        "description": "Function called when user clicks on navigate to first page. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void)",
        "default": "() => undefined"
      },
      "onLastClick": {
        "description": "Function called when user clicks on navigate to last page. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void)",
        "default": "() => undefined"
      },
      "onNextClick": {
        "description": "Function called when user clicks on navigate to next page. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void)",
        "default": "() => undefined"
      },
      "onPageInput": {
        "description": "Function called when user inputs page number. (Function: (event: React.KeyboardEvent<HTMLInputElement>, page: number) => void)",
        "default": "() => undefined"
      },
      "onPerPageSelect": {
        "description": "Function called when user selects number of items per page. (Type: (\n  event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPerPage: number,\n  newPage: number,\n  startIdx?: number,\n  endIdx?: number\n) => void)",
        "default": "() => undefined"
      },
      "onPreviousClick": {
        "description": "Function called when user clicks on navigate to previous page. (Function: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void)",
        "default": "() => undefined"
      },
      "onSetPage": {
        "description": "Function called when user sets page. (Type: (\n  event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPage: number,\n  perPage?: number,\n  startIdx?: number,\n  endIdx?: number\n) => void)",
        "default": "() => undefined"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "page": {
        "description": "Current page number.",
        "type": "number",
        "default": 1
      },
      "perPage": {
        "description": "Number of items per page.",
        "type": "number",
        "default": "defaultPerPageOptions[0].value"
      },
      "perPageOptions": {
        "description": "Array of the number of items per page options. (Type: PerPageOptions[])",
        "type": "array",
        "default": "[\n  {\n    title: '10',\n    value: 10\n  },\n  {\n    title: '20',\n    value: 20\n  },\n  {\n    title: '50',\n    value: 50\n  },\n  {\n    title: '100',\n    value: 100\n  }\n]"
      },
      "titles": {
        "description": "Object with titles to display in pagination. (Type: PaginationTitles)",
        "default": "{\n  items: '',\n  page: '',\n  pages: '',\n  itemsPerPage: 'Items per page',\n  perPageSuffix: 'per page',\n  toFirstPageAriaLabel: 'Go to first page',\n  toPreviousPageAriaLabel: 'Go to previous page',\n  toLastPageAriaLabel: 'Go to last page',\n  toNextPageAriaLabel: 'Go to next page',\n  optionsToggleAriaLabel: '',\n  currPageAriaLabel: 'Current page',\n  paginationAriaLabel: 'Pagination',\n  ofWord: 'of'\n}"
      },
      "toggleTemplate": {
        "description": "This will be shown in pagination toggle span. You can use firstIndex, lastIndex,\nitemCount, itemsTitle, and/or ofWord props. (Type: ((props: PaginationToggleTemplateProps) => React.ReactElement<any>) | string)"
      },
      "usePageInsets": {
        "description": "Flag indicating that pagination should use page insets.",
        "type": "boolean"
      },
      "variant": {
        "description": "Position where pagination is rendered.",
        "enum": [
          "top",
          "bottom"
        ],
        "default": "PaginationVariant.top"
      },
      "widgetId": {
        "description": "Id to identify widget on page.",
        "type": "string",
        "default": "'options-menu'"
      }
    },
    "additionalProperties": false
  },
  "PerPageOptions": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PerPageOptions Props",
    "description": "Properties to customize the content and behavior of the pagination dropdown options. These\nproperties should be passed into the pagination component's perPageOptions property.",
    "properties": {
      "title": {
        "description": "The text title of the option, which is rendered inside the pagination dropdown menu.",
        "type": "string"
      },
      "value": {
        "description": "The value of the option, which determines how many items are displayed per page.",
        "type": "number"
      }
    },
    "additionalProperties": false
  },
  "PaginationTitles": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PaginationTitles Props",
    "description": "Properties to customize various pagination titles. The following properties should be\npassed into the pagination component's title property.",
    "properties": {
      "currPageAriaLabel": {
        "description": "Accessible label for the input displaying the current page.",
        "type": "string"
      },
      "items": {
        "description": "The type or title of the items being paginated.",
        "type": "string"
      },
      "itemsPerPage": {
        "description": "The title of the pagination options menu.",
        "type": "string"
      },
      "ofWord": {
        "description": "Label for the English word \"of\".",
        "type": "string"
      },
      "optionsToggleAriaLabel": {
        "description": "Accessible label for the options toggle.",
        "type": "string"
      },
      "page": {
        "description": "The title of a page displayed beside the page number.",
        "type": "string"
      },
      "pages": {
        "description": "The title of a page displayed beside the page number (plural form).",
        "type": "string"
      },
      "paginationAriaLabel": {
        "description": "Accessible label for the pagination component.",
        "type": "string"
      },
      "perPageSuffix": {
        "description": "The suffix to be displayed after each option on the options menu dropdown.",
        "type": "string"
      },
      "toFirstPageAriaLabel": {
        "description": "Accessible label for the button which moves to the first page.",
        "type": "string"
      },
      "toLastPageAriaLabel": {
        "description": "Accessible label for the button which moves to the last page.",
        "type": "string"
      },
      "toNextPageAriaLabel": {
        "description": "Accessible label for the button which moves to the next page.",
        "type": "string"
      },
      "toPreviousPageAriaLabel": {
        "description": "Accessible label for the button which moves to the previous page.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "OnSetPage": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OnSetPage Props",
    "description": "Props for the OnSetPage component",
    "properties": {},
    "additionalProperties": false
  },
  "OnPerPageSelect": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OnPerPageSelect Props",
    "description": "Props for the OnPerPageSelect component",
    "properties": {},
    "additionalProperties": false
  },
  "OverflowMenuItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OverflowMenuItem Props",
    "description": "Props for the OverflowMenuItem component",
    "properties": {
      "children": {
        "description": "Any elements that can be rendered in the menu (Type: any)"
      },
      "className": {
        "description": "Additional classes added to the OverflowMenuItem",
        "type": "string"
      },
      "isPersistent": {
        "description": "Modifies the overflow menu item visibility",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "OverflowMenuGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OverflowMenuGroup Props",
    "description": "Props for the OverflowMenuGroup component",
    "properties": {
      "children": {
        "description": "Any elements that can be rendered in the menu (Type: any)"
      },
      "className": {
        "description": "Additional classes added to the OverflowMenuGroup",
        "type": "string"
      },
      "groupType": {
        "description": "Indicates a button or icon group",
        "enum": [
          "button",
          "icon"
        ]
      },
      "isPersistent": {
        "description": "Modifies the overflow menu group visibility",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "OverflowMenuDropdownItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OverflowMenuDropdownItem Props",
    "description": "Props for the OverflowMenuDropdownItem component",
    "properties": {
      "isShared": {
        "description": "Indicates when a dropdown item shows and hides the corresponding list item",
        "type": "boolean",
        "default": false
      },
      "itemId": {
        "description": "Identifies the component in the dropdown onSelect callback (Type: string | number)"
      }
    },
    "additionalProperties": false
  },
  "OverflowMenuControl": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OverflowMenuControl Props",
    "description": "Props for the OverflowMenuControl component",
    "properties": {
      "children": {
        "description": "Any elements that can be rendered in the menu (Type: any)"
      },
      "className": {
        "description": "Additional classes added to the OverflowMenuControl",
        "type": "string"
      },
      "hasAdditionalOptions": {
        "description": "Triggers the overflow dropdown to persist at all viewport sizes",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "OverflowMenuContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OverflowMenuContent Props",
    "description": "Props for the OverflowMenuContent component",
    "properties": {
      "children": {
        "description": "Any elements that can be rendered in the menu (Type: any)"
      },
      "className": {
        "description": "Additional classes added to the OverflowMenuContent",
        "type": "string"
      },
      "isPersistent": {
        "description": "Modifies the overflow menu content visibility",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "OverflowMenu": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OverflowMenu Props",
    "description": "Props for the OverflowMenu component",
    "properties": {
      "breakpoint": {
        "description": "Indicates breakpoint at which to switch between horizontal menu and vertical dropdown",
        "enum": [
          "sm",
          "md",
          "lg",
          "xl",
          "2xl"
        ]
      },
      "breakpointReference": {
        "description": "A container reference to base the specified breakpoint on instead of the viewport width. (Type: HTMLElement | (() => HTMLElement) | React.RefObject<any>)"
      },
      "children": {
        "description": "Any elements that can be rendered in the menu (Type: any)"
      },
      "className": {
        "description": "Additional classes added to the OverflowMenu.",
        "type": "string"
      }
    },
    "required": [
      "breakpoint"
    ],
    "additionalProperties": false
  },
  "OverflowMenuState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "OverflowMenuState Props",
    "description": "Props for the OverflowMenuState component",
    "properties": {
      "breakpointRef": {
        "description": " (Type: HTMLElement)"
      },
      "isBelowBreakpoint": {
        "description": "",
        "type": "boolean"
      }
    },
    "required": [
      "breakpointRef",
      "isBelowBreakpoint"
    ],
    "additionalProperties": false
  },
  "PageToggleButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PageToggleButton Props",
    "description": "Props for the PageToggleButton component",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the button.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the button (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the button",
        "type": "string"
      },
      "component": {
        "description": "Sets the base component to render. defaults to button (Type: React.ElementType<any> | React.ComponentType<any>)"
      },
      "countOptions": {
        "description": "Adds count number to button (Type: BadgeCountObject)"
      },
      "hasNoPadding": {
        "description": "Applies no padding on a plain button variant. Use when plain button is placed inline with text",
        "type": "boolean"
      },
      "icon": {
        "description": "Icon for the button. (React component or element)"
      },
      "iconPosition": {
        "description": "Sets position of the icon. Note: \"left\" and \"right\" are deprecated. Use \"start\" and \"end\" instead",
        "enum": [
          "start",
          "end",
          "left",
          "right"
        ]
      },
      "id": {
        "description": "Button id",
        "type": "string",
        "default": "'nav-toggle'"
      },
      "inoperableEvents": {
        "description": "Events to prevent when the button is in an aria-disabled state (Type: string[])",
        "type": "array"
      },
      "isAriaDisabled": {
        "description": "Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute",
        "type": "boolean"
      },
      "isBlock": {
        "description": "Adds block styling to button",
        "type": "boolean"
      },
      "isClicked": {
        "description": "Adds clicked styling to button.",
        "type": "boolean"
      },
      "isDanger": {
        "description": "Adds danger styling to secondary or link button variants",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Adds disabled styling and disables the button using the disabled html attribute",
        "type": "boolean"
      },
      "isInline": {
        "description": "Adds inline styling to a link button",
        "type": "boolean"
      },
      "isLoading": {
        "description": "Adds progress styling to button",
        "type": "boolean"
      },
      "isSidebarOpen": {
        "description": "True if the sidebar is shown",
        "type": "boolean",
        "default": true
      },
      "onSidebarToggle": {
        "description": "Callback function to handle the sidebar toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true (Function: () => void)",
        "default": "() => undefined as any"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "size": {
        "description": "Adds styling which affects the size of the button",
        "enum": [
          "default",
          "sm",
          "lg"
        ]
      },
      "spinnerAriaLabel": {
        "description": "Accessible label for the spinner to describe what is loading",
        "type": "string"
      },
      "spinnerAriaLabelledBy": {
        "description": "Id of element which describes what is being loaded",
        "type": "string"
      },
      "spinnerAriaValueText": {
        "description": "Text describing that current loading status or progress",
        "type": "string"
      },
      "state": {
        "description": "Sets state of the stateful button variant. Default is \"unread\"",
        "enum": [
          "read",
          "unread",
          "attention"
        ]
      },
      "tabIndex": {
        "description": "Sets the button tabindex.",
        "type": "number"
      },
      "type": {
        "description": "Sets button type",
        "enum": [
          "button",
          "submit",
          "reset"
        ]
      },
      "variant": {
        "description": "Adds button variant styles",
        "enum": [
          "primary",
          "secondary",
          "tertiary",
          "danger",
          "warning",
          "link",
          "plain",
          "control",
          "stateful"
        ]
      }
    },
    "additionalProperties": false
  },
  "PageSidebarBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PageSidebarBody Props",
    "description": "Props for the PageSidebarBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the page sidebar body (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the page sidebar body",
        "type": "string"
      },
      "isContextSelector": {
        "description": "Flag indicating that the page sidebar body is for a context selector/perspective switcher",
        "type": "boolean"
      },
      "isFilled": {
        "description": "Flag indicating that the page sidebar body should fill the available vertical space.",
        "type": "boolean"
      },
      "usePageInsets": {
        "description": "Flag indicating that the page sidebar body should use page insets.",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "PageSidebar": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PageSidebar Props",
    "description": "Props for the PageSidebar component",
    "properties": {
      "children": {
        "description": "Content rendered inside the page sidebar (e.g. <PageSidebarBody /> (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the page sidebar",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "Sidebar id",
        "type": "string",
        "default": "'page-sidebar'"
      },
      "isManagedSidebar": {
        "description": "If true, manages the sidebar open/close state and there is no need to pass the isSidebarOpen boolean into\nthe sidebar component or add a callback onSidebarToggle function into the Masthead component",
        "type": "boolean"
      },
      "isSidebarOpen": {
        "description": "Programmatically manage if the sidebar is shown, if isManagedSidebar is set to true in the Page component, this prop is managed",
        "type": "boolean",
        "default": true
      }
    },
    "additionalProperties": false
  },
  "PageSection": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PageSection Props",
    "description": "Props for the PageSection component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible name to the page section. Required when the hasOverflowScroll prop is set to true.\nThis prop should also be passed in if a heading is not being used to describe the content of the page section.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the section (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the section",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. Defaults to section (Type: React.JSX.IntrinsicElements)",
        "default": "'section'"
      },
      "hasBodyWrapper": {
        "description": "Flag indicating whether children passed to the component should be wrapped by a PageBody.\nSet this to false in order to pass multiple, custom PageBody's as children.",
        "type": "boolean",
        "default": true
      },
      "hasOverflowScroll": {
        "description": "Flag indicating if the PageSection has a scrolling overflow",
        "type": "boolean",
        "default": false
      },
      "hasShadowBottom": {
        "description": "Modifier indicating if PageSection should have a shadow at the bottom",
        "type": "boolean",
        "default": false
      },
      "hasShadowTop": {
        "description": "Modifier indicating if PageSection should have a shadow at the top",
        "type": "boolean",
        "default": false
      },
      "isCenterAligned": {
        "description": "Flag indicating if the section content is center aligned. isWidthLimited must be set for this to work",
        "type": "boolean",
        "default": false
      },
      "isFilled": {
        "description": "Enables the page section to fill the available vertical space if true, or disable filling if false.",
        "type": "boolean"
      },
      "isWidthLimited": {
        "description": "Limits the width of the section",
        "type": "boolean",
        "default": false
      },
      "padding": {
        "description": "Padding at various breakpoints.",
        "enum": [
          "padding",
          "noPadding",
          "padding",
          "noPadding",
          "padding",
          "noPadding",
          "padding",
          "noPadding",
          "padding",
          "noPadding",
          "2xl",
          "padding",
          "noPadding"
        ]
      },
      "stickyOnBreakpoint": {
        "description": "Modifier indicating if the PageBreadcrumb is sticky to the top or bottom at various breakpoints",
        "enum": [
          "top",
          "bottom",
          "top",
          "bottom",
          "top",
          "bottom",
          "top",
          "bottom",
          "top",
          "bottom",
          "2xl",
          "top",
          "bottom"
        ]
      },
      "type": {
        "description": "Section type variant",
        "enum": [
          "default",
          "subnav",
          "breadcrumb",
          "tabs",
          "wizard"
        ],
        "default": "'default'"
      },
      "variant": {
        "description": "Section background color variant. This will only apply when the type prop has the \"default\" value.",
        "enum": [
          "default",
          "secondary"
        ],
        "default": "'default'"
      }
    },
    "additionalProperties": false
  },
  "PageGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PageGroup Props",
    "description": "Props for the PageGroup component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible name to the page group when the hasOverflowScroll prop is set to true.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside of the PageGroup (React component or element)"
      },
      "className": {
        "description": "Additional classes to apply to the PageGroup",
        "type": "string",
        "default": "''"
      },
      "hasOverflowScroll": {
        "description": "Flag indicating if the PageGroup has a scrolling overflow",
        "type": "boolean",
        "default": false
      },
      "hasShadowBottom": {
        "description": "Modifier indicating if PageGroup should have a shadow at the bottom",
        "type": "boolean",
        "default": false
      },
      "hasShadowTop": {
        "description": "Modifier indicating if PageGroup should have a shadow at the top",
        "type": "boolean",
        "default": false
      },
      "isFilled": {
        "description": "Enables the page group to fill the available vertical space if true, or disable filling if false.",
        "type": "boolean"
      },
      "stickyOnBreakpoint": {
        "description": "Modifier indicating if the PageBreadcrumb is sticky to the top or bottom at various breakpoints",
        "enum": [
          "top",
          "bottom",
          "top",
          "bottom",
          "top",
          "bottom",
          "top",
          "bottom",
          "top",
          "bottom",
          "2xl",
          "top",
          "bottom"
        ]
      }
    },
    "additionalProperties": false
  },
  "PageBreadcrumb": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PageBreadcrumb Props",
    "description": "Props for the PageBreadcrumb component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible name to the breadcrumb section. Required when the hasOverflowScroll prop is set to true.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside of the PageBreadcrumb (React component or element)"
      },
      "className": {
        "description": "Additional classes to apply to the PageBreadcrumb",
        "type": "string",
        "default": "''"
      },
      "hasBodyWrapper": {
        "description": "Flag indicating whether children passed to the component should be wrapped by a PageBody.\nSet this to false in order to pass multiple, custom PageBody's as children.",
        "type": "boolean",
        "default": true
      },
      "hasOverflowScroll": {
        "description": "Flag indicating if the PageBreadcrumb has a scrolling overflow",
        "type": "boolean",
        "default": false
      },
      "hasShadowBottom": {
        "description": "Flag indicating if PageBreadcrumb should have a shadow at the bottom",
        "type": "boolean",
        "default": false
      },
      "hasShadowTop": {
        "description": "Flag indicating if PageBreadcrumb should have a shadow at the top",
        "type": "boolean",
        "default": false
      },
      "isWidthLimited": {
        "description": "Limits the width of the breadcrumb",
        "type": "boolean"
      },
      "stickyOnBreakpoint": {
        "description": "Modifier indicating if the PageBreadcrumb is sticky to the top or bottom at various breakpoints",
        "enum": [
          "top",
          "bottom",
          "top",
          "bottom",
          "top",
          "bottom",
          "top",
          "bottom",
          "top",
          "bottom",
          "2xl",
          "top",
          "bottom"
        ]
      }
    },
    "additionalProperties": false
  },
  "PageBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PageBody Props",
    "description": "Props for the PageBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the section (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the section",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Page": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Page Props",
    "description": "Props for the Page component",
    "properties": {
      "additionalGroupedContent": {
        "description": "Additional content of the group (React component or element)"
      },
      "banner": {
        "description": "Banner component for the page. This will be rendered above a breadcrumb if one is also passed. (React component or element)"
      },
      "breadcrumb": {
        "description": "Breadcrumb component for the page (React component or element)"
      },
      "breadcrumbProps": {
        "description": "Additional props of the breadcrumb (Type: PageBreadcrumbProps)"
      },
      "children": {
        "description": "Content rendered inside the main section of the page layout (e.g. <PageSection />) (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the page layout",
        "type": "string"
      },
      "defaultManagedSidebarIsOpen": {
        "description": "If true, the managed sidebar is initially open for desktop view",
        "type": "boolean",
        "default": true
      },
      "drawerDefaultSize": {
        "description": "Sets default drawer size",
        "type": "string"
      },
      "drawerMaxSize": {
        "description": "Sets the maximum drawer size",
        "type": "string"
      },
      "drawerMinSize": {
        "description": "Sets the minimum drawer size",
        "type": "string"
      },
      "getBreakpoint": {
        "description": "The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\nYou can override the default getBreakpoint function to return breakpoints at different sizes than the default\nYou can view the default getBreakpoint function here:\nhttps://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts",
        "enum": [
          "default",
          "sm",
          "md",
          "lg",
          "xl",
          "2xl"
        ],
        "default": "(width: number): 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' => {\n  if (width === null) {\n    return null;\n  }\n  if (width >= globalWidthBreakpoints['2xl']) {\n    return '2xl';\n  }\n  if (width >= globalWidthBreakpoints.xl) {\n    return 'xl';\n  }\n  if (width >= globalWidthBreakpoints.lg) {\n    return 'lg';\n  }\n  if (width >= globalWidthBreakpoints.md) {\n    return 'md';\n  }\n  if (width >= globalWidthBreakpoints.sm) {\n    return 'sm';\n  }\n  return 'default';\n}"
      },
      "getVerticalBreakpoint": {
        "description": "The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\nYou can override the default getVerticalBreakpoint function to return breakpoints at different sizes than the default\nYou can view the default getVerticalBreakpoint function here:\nhttps://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts",
        "enum": [
          "default",
          "sm",
          "md",
          "lg",
          "xl",
          "2xl"
        ],
        "default": "(height: number): 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' => {\n  if (height === null) {\n    return null;\n  }\n  if (height >= globalHeightBreakpoints['2xl']) {\n    return '2xl';\n  }\n  if (height >= globalHeightBreakpoints.xl) {\n    return 'xl';\n  }\n  if (height >= globalHeightBreakpoints.lg) {\n    return 'lg';\n  }\n  if (height >= globalHeightBreakpoints.md) {\n    return 'md';\n  }\n  if (height >= globalHeightBreakpoints.sm) {\n    return 'sm';\n  }\n  return 'default';\n}"
      },
      "groupProps": {
        "description": "Additional props of the group (Type: PageGroupProps)"
      },
      "horizontalSubnav": {
        "description": "Horizontal sub navigation component for the page (React component or element)"
      },
      "isBreadcrumbGrouped": {
        "description": "Flag indicating if the breadcrumb should be in a group",
        "type": "boolean"
      },
      "isBreadcrumbWidthLimited": {
        "description": "Flag indicating if breadcrumb width should be limited",
        "type": "boolean",
        "default": false
      },
      "isContentFilled": {
        "description": "Enables children to fill the available vertical space. Child page sections or groups that should fill should be passed the isFilled property.",
        "type": "boolean"
      },
      "isHorizontalSubnavGrouped": {
        "description": "Flag indicating if the horizontal sub navigation should be in a group",
        "type": "boolean"
      },
      "isHorizontalSubnavWidthLimited": {
        "description": "Flag indicating if horizontal sub navigation width should be limited",
        "type": "boolean"
      },
      "isManagedSidebar": {
        "description": "If true, manages the sidebar open/close state and there is no need to pass the isSidebarOpen boolean into\nthe sidebar component or add a callback onSidebarToggle function into the Masthead component",
        "type": "boolean",
        "default": false
      },
      "isNotificationDrawerExpanded": {
        "description": "Flag indicating Notification drawer in expanded",
        "type": "boolean",
        "default": false
      },
      "mainAriaLabel": {
        "description": "Accessible label, can be used to name main section",
        "type": "string"
      },
      "mainComponent": {
        "description": "HTML component used as main component of the page. Defaults to 'main', only pass in 'div' if another 'main' element already exists.",
        "enum": [
          "main",
          "div"
        ],
        "default": "'main'"
      },
      "mainContainerId": {
        "description": "an id to use for the [role=\"main\"] element",
        "type": "string"
      },
      "mainTabIndex": {
        "description": "tabIndex to use for the [role=\"main\"] element, null to unset it (Type: number | null)",
        "default": -1
      },
      "masthead": {
        "description": "Masthead component (e.g. <Masthead />) (React component or element)"
      },
      "notificationDrawer": {
        "description": "Notification drawer component for an optional notification drawer (e.g. <NotificationDrawer />) (React component or element)"
      },
      "onNotificationDrawerExpand": {
        "description": "Callback when notification drawer panel is finished expanding. (Type: (event: KeyboardEvent | React.MouseEvent | React.TransitionEvent) => void)",
        "default": "() => null"
      },
      "onPageResize": {
        "description": "Can add callback to be notified when resize occurs, for example to set the sidebar isSidebarOpen prop to false for a width < 768px\nReturns object { mobileView: boolean, windowSize: number } (Type: ((event: MouseEvent | TouchEvent | React.KeyboardEvent, object: any) => void) | null)"
      },
      "role": {
        "description": "Sets the value for role on the <main> element",
        "type": "string"
      },
      "sidebar": {
        "description": "Sidebar component for a side nav, recommended to be a PageSidebar. If set to null, the page grid layout\nwill render without a sidebar. (React component or element)"
      },
      "skipToContent": {
        "description": "Skip to content component for the page (Type: React.ReactElement<any>)"
      }
    },
    "additionalProperties": false
  },
  "PageState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PageState Props",
    "description": "Props for the PageState component",
    "properties": {
      "desktopIsSidebarOpen": {
        "description": "",
        "type": "boolean"
      },
      "height": {
        "description": "",
        "type": "number"
      },
      "mobileIsSidebarOpen": {
        "description": "",
        "type": "boolean"
      },
      "mobileView": {
        "description": "",
        "type": "boolean"
      },
      "width": {
        "description": "",
        "type": "number"
      }
    },
    "required": [
      "desktopIsSidebarOpen",
      "height",
      "mobileIsSidebarOpen",
      "mobileView",
      "width"
    ],
    "additionalProperties": false
  },
  "PanelMainBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PanelMainBody Props",
    "description": "Props for the PanelMainBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the panel main body div (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "PanelMain": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PanelMain Props",
    "description": "Props for the PanelMain component",
    "properties": {
      "children": {
        "description": "Content rendered inside the panel main div (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "maxHeight": {
        "description": "Max height of the panel main div as a string with the value and unit",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "PanelHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PanelHeader Props",
    "description": "Props for the PanelHeader component",
    "properties": {
      "children": {
        "description": "Content rendered inside the panel header (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "PanelFooter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "PanelFooter Props",
    "description": "Props for the PanelFooter component",
    "properties": {
      "children": {
        "description": "Content rendered inside the panel footer (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Panel": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Panel Props",
    "description": "Props for the Panel component",
    "properties": {
      "children": {
        "description": "Content rendered inside the panel (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "isScrollable": {
        "description": "Flag to add scrollable styling to the panel",
        "type": "boolean"
      },
      "variant": {
        "description": "Adds panel variant styles",
        "enum": [
          "raised",
          "bordered",
          "secondary"
        ]
      }
    },
    "additionalProperties": false
  },
  "NavList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NavList Props",
    "description": "Props for the NavList component",
    "properties": {
      "backScrollAriaLabel": {
        "description": "Aria-label for the back scroll button",
        "type": "string",
        "default": "'Scroll back'"
      },
      "children": {
        "description": "Children nodes (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the list",
        "type": "string"
      },
      "forwardScrollAriaLabel": {
        "description": "Aria-label for the forward scroll button",
        "type": "string",
        "default": "'Scroll foward'"
      }
    },
    "additionalProperties": false
  },
  "NavItemSeparator": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NavItemSeparator Props",
    "description": "Props for the NavItemSeparator component",
    "properties": {
      "className": {
        "description": "Additional classes added to the divider",
        "type": "string"
      },
      "component": {
        "description": "The component type to use",
        "enum": [
          "hr",
          "li",
          "div"
        ],
        "default": "'li'"
      },
      "inset": {
        "description": "Insets at various breakpoints.",
        "enum": [
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "2xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl"
        ]
      },
      "orientation": {
        "description": "Indicates how the divider will display at various breakpoints. Vertical divider must be in a flex layout.",
        "enum": [
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "2xl",
          "vertical",
          "horizontal"
        ]
      }
    },
    "additionalProperties": false
  },
  "NavItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NavItem Props",
    "description": "Props for the NavItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the nav item. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the nav item",
        "type": "string"
      },
      "component": {
        "description": "Component used to render NavItems if  React.isValidElement(children) is false (Type: React.ElementType<any> | React.ComponentType<any>)",
        "default": "'a'"
      },
      "flyout": {
        "description": "Flyout of a nav item. This should be a Menu component. Should not be used if the to prop is defined. (Type: React.ReactElement<any>)"
      },
      "groupId": {
        "description": "Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component (Type: string | number | null)",
        "default": null
      },
      "icon": {
        "description": "Icon added before the nav item children. (React component or element)"
      },
      "isActive": {
        "description": "Flag indicating whether the item is active",
        "type": "boolean",
        "default": false
      },
      "itemId": {
        "description": "Item identifier, will be returned with the onToggle and onSelect callback passed to the Nav component (Type: string | number | null)",
        "default": null
      },
      "onClick": {
        "description": "Callback for item click (Type: (\n  event: React.FormEvent<HTMLInputElement>,\n  itemId: number | string,\n  groupId: number | string,\n  to: string\n) => void)"
      },
      "onShowFlyout": {
        "description": "Callback when flyout is opened or closed (Function: () => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "preventDefault": {
        "description": "If true prevents the default anchor link action to occur. Set to true if you want to handle navigation yourself.",
        "type": "boolean",
        "default": false
      },
      "styleChildren": {
        "description": "Whether to set className on children when React.isValidElement(children)",
        "type": "boolean",
        "default": true
      },
      "to": {
        "description": "Target navigation link. Should not be used if the flyout prop is defined.",
        "type": "string"
      },
      "zIndex": {
        "description": "z-index of the flyout nav item",
        "type": "number",
        "default": 9999
      }
    },
    "additionalProperties": false
  },
  "NavGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NavGroup Props",
    "description": "Props for the NavGroup component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered inside of the group (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the container",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "Identifier to use for the section aria label",
        "type": "string",
        "default": "getUniqueId()"
      },
      "title": {
        "description": "Title shown for the group",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "NavExpandable": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NavExpandable Props",
    "description": "Props for the NavExpandable component",
    "properties": {
      "buttonProps": {
        "description": "Additional props added to the NavExpandable <button> (Type: any)"
      },
      "children": {
        "description": "Anything that can be rendered inside of the expandable list (React component or element)",
        "default": "''"
      },
      "className": {
        "description": "Additional classes added to the container",
        "type": "string",
        "default": "''"
      },
      "groupId": {
        "description": "Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component (Type: string | number)",
        "default": null
      },
      "id": {
        "description": "Identifier to use for the section aria label",
        "type": "string",
        "default": "''"
      },
      "isActive": {
        "description": "If true makes the expandable list title active",
        "type": "boolean",
        "default": false
      },
      "isExpanded": {
        "description": "Boolean to pragmatically expand or collapse section",
        "type": "boolean",
        "default": false
      },
      "onExpand": {
        "description": "allow consumer to optionally override this callback and manage expand state externally. if passed will not call Nav's onToggle. (Function: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, val: boolean) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean"
      },
      "srText": {
        "description": "If defined, screen readers will read this text instead of the list title",
        "type": "string",
        "default": "''"
      },
      "title": {
        "description": "Title content shown for the expandable list (React component or element)"
      }
    },
    "required": [
      "title"
    ],
    "additionalProperties": false
  },
  "NavExpandableState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NavExpandableState Props",
    "description": "Props for the NavExpandableState component",
    "properties": {
      "expandedState": {
        "description": "",
        "type": "boolean"
      },
      "ouiaStateId": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "expandedState",
      "ouiaStateId"
    ],
    "additionalProperties": false
  },
  "Nav": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Nav Props",
    "description": "Props for the Nav component",
    "properties": {
      "aria-label": {
        "description": "Accessible label for the nav when there are multiple navs on the page",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered inside of the nav (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the container",
        "type": "string"
      },
      "onSelect": {
        "description": "Callback for updating when item selection changes (Type: (\n  event: React.FormEvent<HTMLInputElement>,\n  selectedItem: {\n    groupId: number | string;\n    itemId: number | string;\n    to: string;\n  }\n) => void)",
        "default": "() => undefined"
      },
      "onToggle": {
        "description": "Callback for when a list is expanded or collapsed (Type: (\n  event: React.MouseEvent<HTMLButtonElement>,\n  toggledItem: {\n    groupId: number | string;\n    isExpanded: boolean;\n  }\n) => void)",
        "default": "() => undefined"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "variant": {
        "description": "For horizontal navs",
        "enum": [
          "default",
          "horizontal",
          "horizontal-subnav"
        ]
      }
    },
    "additionalProperties": false
  },
  "NavSelectClickHandler": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NavSelectClickHandler Props",
    "description": "Props for the NavSelectClickHandler component",
    "properties": {},
    "additionalProperties": false
  },
  "NumberInput": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NumberInput Props",
    "description": "Props for the NumberInput component",
    "properties": {
      "className": {
        "description": "Additional classes added to the number input",
        "type": "string"
      },
      "inputAriaLabel": {
        "description": "Aria label of the input",
        "type": "string",
        "default": "'Input'"
      },
      "inputName": {
        "description": "Name of the input",
        "type": "string"
      },
      "inputProps": {
        "description": "Additional properties added to the text input (Type: any)"
      },
      "isDisabled": {
        "description": "Indicates the whole number input should be disabled",
        "type": "boolean",
        "default": false
      },
      "max": {
        "description": "Maximum value of the number input, disabling the plus button when reached",
        "type": "number"
      },
      "min": {
        "description": "Minimum value of the number input, disabling the minus button when reached",
        "type": "number"
      },
      "minusBtnAriaLabel": {
        "description": "Aria label of the minus button",
        "type": "string",
        "default": "'Minus'"
      },
      "minusBtnProps": {
        "description": "Additional properties added to the minus button (Type: ButtonProps)"
      },
      "onBlur": {
        "description": "Callback function when text input is blurred (focus leaves) (Function: (event?: any) => void)"
      },
      "onChange": {
        "description": "Callback for the text input changing (Function: (event: React.FormEvent<HTMLInputElement>) => void)"
      },
      "onMinus": {
        "description": "Callback for the minus button (Function: (event: React.MouseEvent, name?: string) => void)",
        "default": "() => {}"
      },
      "onPlus": {
        "description": "Callback for the plus button (Function: (event: React.MouseEvent, name?: string) => void)",
        "default": "() => {}"
      },
      "plusBtnAriaLabel": {
        "description": "Aria label of the plus button",
        "type": "string",
        "default": "'Plus'"
      },
      "plusBtnProps": {
        "description": "Additional properties added to the plus button (Type: ButtonProps)"
      },
      "unit": {
        "description": "Adds the given unit to the number input (React component or element)"
      },
      "unitPosition": {
        "description": "Position of the number input unit in relation to the number input",
        "enum": [
          "before",
          "after"
        ],
        "default": "'after'"
      },
      "validated": {
        "description": "Value to indicate if the input is modified to show that validation state",
        "enum": [
          "default",
          "error",
          "warning",
          "success"
        ],
        "default": "ValidatedOptions.default"
      },
      "value": {
        "description": "Value of the number input (Type: number | '')",
        "default": 0
      },
      "widthChars": {
        "description": "Sets the width of the number input to a number of characters",
        "type": "number"
      }
    },
    "additionalProperties": false
  },
  "DefaultKeyDownHandlerArgs": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DefaultKeyDownHandlerArgs Props",
    "description": "Props for the DefaultKeyDownHandlerArgs component",
    "properties": {},
    "additionalProperties": false
  },
  "NotificationBadge": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationBadge Props",
    "description": "Props for the NotificationBadge component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible label to the notification badge.",
        "type": "string"
      },
      "attentionIcon": {
        "description": "Icon to display for attention variant. (React component or element)",
        "default": "<AttentionBellIcon />"
      },
      "children": {
        "description": "Content rendered inside the notification badge. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the notification badge.",
        "type": "string"
      },
      "count": {
        "description": "A number displayed in the badge alongside the icon.",
        "type": "number",
        "default": 0
      },
      "icon": {
        "description": "Icon to display in the notification badge. (React component or element)",
        "default": "<BellIcon />"
      },
      "isExpanded": {
        "description": "Flag for applying expanded styling and setting the aria-expanded attribute on the\nnotification badge.",
        "type": "boolean",
        "default": false
      },
      "onAnimationEnd": {
        "description": "Callback for when the animation of the notification badge icon ends. (Function: (event: React.AnimationEvent<HTMLButtonElement>) => void)"
      },
      "shouldNotify": {
        "description": "Flag indicating whether the notification badge animation should be triggered. Each\ntime this prop is true, the animation will be triggered a single time.",
        "type": "boolean",
        "default": false
      },
      "variant": {
        "description": "Determines the variant of the notification badge.",
        "enum": [
          "read",
          "unread",
          "attention"
        ],
        "default": "NotificationBadgeVariant.read"
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUploadTitleTextSeparator": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUploadTitleTextSeparator Props",
    "description": "Props for the MultipleFileUploadTitleTextSeparator component",
    "properties": {
      "children": {
        "description": "Content rendered inside multiple file upload title text separator (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUploadTitleText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUploadTitleText Props",
    "description": "Props for the MultipleFileUploadTitleText component",
    "properties": {
      "children": {
        "description": "Content rendered inside multiple file upload title text (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUploadTitleIcon": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUploadTitleIcon Props",
    "description": "Props for the MultipleFileUploadTitleIcon component",
    "properties": {
      "children": {
        "description": "Content rendered inside multiple file upload title icon (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUploadTitle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUploadTitle Props",
    "description": "Props for the MultipleFileUploadTitle component",
    "properties": {
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "icon": {
        "description": "Content rendered inside the title icon div (React component or element)"
      },
      "text": {
        "description": "Content rendered inside the title text div (React component or element)",
        "default": "''"
      },
      "textSeparator": {
        "description": "Content rendered inside the title text separator div (React component or element)",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUploadStatusItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUploadStatusItem Props",
    "description": "Automatically reads an uploaded file to render a visual representation of it, including\nits name, size, and read status. This sub-component also allows custom reading of files\nvia various callbacks which will override the automatic reading behavior.",
    "properties": {
      "buttonAriaLabel": {
        "description": "Adds accessibility text to the status item deletion button",
        "type": "string",
        "default": "'Remove from list'"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "customFileHandler": {
        "description": "A callback to process file reading in a custom way (Function: (file: File) => void)"
      },
      "file": {
        "description": "The file object being represented by the status item (Type: File)"
      },
      "fileIcon": {
        "description": "A custom icon to show in place of the generic file icon (React component or element)"
      },
      "fileName": {
        "description": "A custom name to display for the file rather than using built in functionality to auto-fill it",
        "type": "string"
      },
      "fileSize": {
        "description": "A custom file size to display for the file rather than using built in functionality to auto-fill it",
        "type": "number"
      },
      "onClearClick": {
        "description": "Clear button was clicked (Type: React.MouseEventHandler<HTMLButtonElement>)",
        "default": "() => {}"
      },
      "onReadFail": {
        "description": "A callback for when the FileReader API fails (Function: (error: DOMException, onReadFail: File) => void)",
        "default": "() => {}"
      },
      "onReadFinished": {
        "description": "A callback for when a selected file finishes loading (Function: (fileHandle: File) => void)",
        "default": "() => {}"
      },
      "onReadStarted": {
        "description": "A callback for when a selected file starts loading (Function: (fileHandle: File) => void)",
        "default": "() => {}"
      },
      "onReadSuccess": {
        "description": "A callback for when the FileReader successfully reads the file (Function: (data: string, file: File) => void)",
        "default": "() => {}"
      },
      "progressAriaLabel": {
        "description": "Adds accessible text to the progress bar. Required when title not used and there is not any label associated with the progress bar",
        "type": "string"
      },
      "progressAriaLabelledBy": {
        "description": "Associates the progress bar with it's label for accessibility purposes. Required when title not used",
        "type": "string"
      },
      "progressAriaLiveMessage": {
        "description": "Modifies the text announced by assistive technologies when the progress bar updates. (Type: string | ((loadPercentage: number) => string))"
      },
      "progressHelperText": {
        "description": "Additional content related to the status item. (React component or element)"
      },
      "progressId": {
        "description": "Unique identifier for progress. Generated if not specified.",
        "type": "string"
      },
      "progressValue": {
        "description": "A custom value to display for the progress component rather than using built in functionality to auto-fill it",
        "type": "number"
      },
      "progressVariant": {
        "description": "A custom variant to apply to the progress component rather than using built in functionality to auto-fill it",
        "enum": [
          "danger",
          "success",
          "warning"
        ]
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUploadStatus": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUploadStatus Props",
    "description": "Acts as an expandable container for all uploaded file statuses.\nAn optional text and/or icon can also be passed into this sub-component.\nThis sub-component can be conditionally rendered when at least 1 file has been\nattempted to be uploaded.",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible label to the list of status items.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside multi file upload status list (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "statusToggleIcon": {
        "description": "Icon to show in the status toggle (React component or element)"
      },
      "statusToggleText": {
        "description": "String to show in the status toggle",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUploadMain": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUploadMain Props",
    "description": "Creates the visual upload interface, including the area to drag and drop files,\nan optional upload button, and descriptive instructions.",
    "properties": {
      "browseButtonText": {
        "description": "Visible text label for the upload button",
        "type": "string",
        "default": "'Upload'"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "infoText": {
        "description": "Content rendered inside the info div (React component or element)"
      },
      "isUploadButtonHidden": {
        "description": "Flag to prevent the upload button from being rendered",
        "type": "boolean"
      },
      "titleIcon": {
        "description": "Content rendered inside the title icon div (React component or element)"
      },
      "titleText": {
        "description": "Content rendered inside the title text div (React component or element)"
      },
      "titleTextSeparator": {
        "description": "Content rendered inside the title text separator div (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUploadInfo": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUploadInfo Props",
    "description": "Props for the MultipleFileUploadInfo component",
    "properties": {
      "children": {
        "description": "Content rendered inside multiple file upload info (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUploadButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUploadButton Props",
    "description": "Props for the MultipleFileUploadButton component",
    "properties": {
      "aria-label": {
        "description": "Aria-label for the button",
        "type": "string"
      },
      "browseButtonText": {
        "description": "Visible text label for the button",
        "type": "string",
        "default": "'Upload'"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MultipleFileUpload": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MultipleFileUpload Props",
    "description": "Acts as a container for all other MultipleFileUpload sub-components. This sub-component\nalso provides the functionality for file uploads, and access to the uploaded files via\na callback.",
    "properties": {
      "children": {
        "description": "Content rendered inside the multi upload field (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "dropzoneProps": {
        "description": "Optional extra props to customize react-dropzone. (Type: DropzoneOptions)",
        "default": {}
      },
      "isHorizontal": {
        "description": "Flag setting the component to horizontal styling mode",
        "type": "boolean"
      },
      "onFileDrop": {
        "description": "When files are dropped or uploaded this callback will be called with all accepted files (Type: (event: DropEvent, data: File[]) => void)",
        "type": "array",
        "default": "() => {}"
      }
    },
    "additionalProperties": false
  },
  "NotificationDrawerListItemHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationDrawerListItemHeader Props",
    "description": "Props for the NotificationDrawerListItemHeader component",
    "properties": {
      "actionHasNoOffset": {
        "description": "Removes the offset of the notification drawer actions.",
        "type": "boolean",
        "default": false
      },
      "children": {
        "description": "Actions rendered inside the notification drawer list item header (React component or element)"
      },
      "className": {
        "description": "Additional classes for notification drawer list item header.",
        "type": "string",
        "default": "''"
      },
      "headingLevel": {
        "description": "Sets the heading level to use for the list item header title. Default is h2.",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "default": "'h2'"
      },
      "icon": {
        "description": "Add custom icon for notification drawer list item header (React component or element)",
        "default": null
      },
      "srTitle": {
        "description": "Notification drawer list item header screen reader title",
        "type": "string"
      },
      "title": {
        "description": "Notification drawer list item title",
        "type": "string"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if text is truncated (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')"
      },
      "truncateTitle": {
        "description": "Truncate title to number of lines",
        "type": "number",
        "default": 0
      },
      "variant": {
        "description": "Variant indicates the severity level",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ],
        "default": "'custom'"
      }
    },
    "required": [
      "title"
    ],
    "additionalProperties": false
  },
  "NotificationDrawerListItemBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationDrawerListItemBody Props",
    "description": "Props for the NotificationDrawerListItemBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the list item body (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the list item body",
        "type": "string",
        "default": "''"
      },
      "timestamp": {
        "description": "List item timestamp (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "NotificationDrawerListItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationDrawerListItem Props",
    "description": "Props for the NotificationDrawerListItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the list item (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the list item",
        "type": "string",
        "default": "''"
      },
      "isHoverable": {
        "description": "Modifies the list item to include hover styles on :hover",
        "type": "boolean",
        "default": true
      },
      "isRead": {
        "description": "Adds styling to the list item to indicate it has been read",
        "type": "boolean",
        "default": false
      },
      "onClick": {
        "description": "Callback for when a list item is clicked (Function: (event: any) => void)",
        "default": "(event: React.MouseEvent) => undefined as any"
      },
      "readStateScreenReaderText": {
        "description": "Visually hidden text that conveys the current read state of the notification list item",
        "type": "string"
      },
      "tabIndex": {
        "description": "Tab index for the list item",
        "type": "number",
        "default": 0
      },
      "variant": {
        "description": "Variant indicates the severity level",
        "enum": [
          "custom",
          "success",
          "danger",
          "warning",
          "info"
        ],
        "default": "'custom'"
      }
    },
    "additionalProperties": false
  },
  "NotificationDrawerList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationDrawerList Props",
    "description": "Props for the NotificationDrawerList component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible label to the notification drawer list.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the notification drawer list body (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the notification drawer list body",
        "type": "string",
        "default": "''"
      },
      "isHidden": {
        "description": "Adds styling to the notification drawer list to indicate expand/hide state",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "NotificationDrawerHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationDrawerHeader Props",
    "description": "Props for the NotificationDrawerHeader component",
    "properties": {
      "children": {
        "description": "Content rendered inside the drawer (React component or element)"
      },
      "className": {
        "description": "Additional classes for notification drawer header.",
        "type": "string",
        "default": "''"
      },
      "closeButtonAriaLabel": {
        "description": "Adds custom accessible text to the notification drawer close button.",
        "type": "string",
        "default": "'Close'"
      },
      "count": {
        "description": "Notification drawer heading count",
        "type": "number"
      },
      "customText": {
        "description": "Notification drawer heading custom text which can be used instead of providing count/unreadText",
        "type": "string"
      },
      "onClose": {
        "description": "Callback for when close button is clicked (Type: (event: KeyboardEvent | React.MouseEvent) => void)"
      },
      "title": {
        "description": "Notification drawer heading title",
        "type": "string",
        "default": "'Notifications'"
      },
      "unreadText": {
        "description": "Notification drawer heading unread text used in combination with a count",
        "type": "string",
        "default": "'unread'"
      }
    },
    "additionalProperties": false
  },
  "NotificationDrawerGroupList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationDrawerGroupList Props",
    "description": "Props for the NotificationDrawerGroupList component",
    "properties": {
      "children": {
        "description": "Content rendered inside the notification drawer list body (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the notification drawer list body",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "NotificationDrawerGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationDrawerGroup Props",
    "description": "Props for the NotificationDrawerGroup component",
    "properties": {
      "children": {
        "description": "Content rendered inside the group (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the group",
        "type": "string",
        "default": "''"
      },
      "count": {
        "description": "Notification drawer group count",
        "type": "number"
      },
      "headingLevel": {
        "description": "Sets the heading level to use for the group title. Default is h1.",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "default": "'h1'"
      },
      "isExpanded": {
        "description": "Adds styling to the group to indicate expanded state",
        "type": "boolean"
      },
      "isRead": {
        "description": "Adds styling to the group to indicate whether it has been read",
        "type": "boolean",
        "default": false
      },
      "onExpand": {
        "description": "Callback for when group button is clicked to expand (Function: (event: any, value: boolean) => void)",
        "default": "(event: any, expanded: boolean) => undefined as any"
      },
      "title": {
        "description": "Notification drawer group title (React component or element)"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if text is truncated (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')"
      },
      "truncateTitle": {
        "description": "Truncate title to number of lines",
        "type": "number",
        "default": 0
      }
    },
    "required": [
      "count",
      "isExpanded",
      "title"
    ],
    "additionalProperties": false
  },
  "NotificationDrawerBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationDrawerBody Props",
    "description": "Props for the NotificationDrawerBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the body of the notification drawer (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the notification drawer body",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "NotificationDrawer": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NotificationDrawer Props",
    "description": "Props for the NotificationDrawer component",
    "properties": {
      "children": {
        "description": "Content rendered inside the notification drawer (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the notification drawer",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MenuToggleCheckbox": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuToggleCheckbox Props",
    "description": "Props for the MenuToggleCheckbox component",
    "properties": {
      "children": {
        "description": "Element to be rendered inside the <span> (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the MenuToggleCheckbox",
        "type": "string"
      },
      "defaultChecked": {
        "description": "Flag to set the default checked value of the checkbox when it is uncontrolled by React state.\nTo make the checkbox controlled instead use the isChecked prop, but do not use both.",
        "type": "boolean"
      },
      "id": {
        "description": "Id of the checkbox",
        "type": "string"
      },
      "isChecked": {
        "description": "Flag to show if the checkbox is checked when it is controlled by React state.\nTo make the checkbox uncontrolled instead use the defaultChecked prop, but do not use both. (Type: boolean | null)"
      },
      "isDisabled": {
        "description": "Flag to show if the checkbox is disabled",
        "type": "boolean",
        "default": false
      },
      "isValid": {
        "description": "Flag to show if the checkbox selection is valid or invalid",
        "type": "boolean",
        "default": true
      },
      "onChange": {
        "description": "A callback for when the checkbox selection changes (Function: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void)",
        "default": "() => undefined as any"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      }
    },
    "required": [
      "id"
    ],
    "additionalProperties": false
  },
  "MenuToggleAction": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuToggleAction Props",
    "description": "Props for the MenuToggleAction component",
    "properties": {
      "children": {
        "description": "Element to be rendered inside the <button> (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the MenuToggleAction",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "Id of the action button",
        "type": "string"
      },
      "isDisabled": {
        "description": "Flag to show if the action button is disabled",
        "type": "boolean",
        "default": false
      },
      "onClick": {
        "description": "A callback for when the action button is clicked (Function: (event: React.MouseEvent<HTMLButtonElement>) => void)",
        "default": "() => {}"
      }
    },
    "additionalProperties": false
  },
  "MenuToggle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuToggle Props",
    "description": "Props for the MenuToggle component",
    "properties": {
      "badge": {
        "description": "Optional badge rendered inside the toggle, after the children content (React component or element)"
      },
      "children": {
        "description": "Content rendered inside the toggle (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the toggle",
        "type": "string"
      },
      "icon": {
        "description": "Optional icon or image rendered inside the toggle, before the children content. It is\nrecommended to wrap most basic icons in our icon component. (React component or element)"
      },
      "isDisabled": {
        "description": "Flag indicating the toggle is disabled",
        "type": "boolean"
      },
      "isExpanded": {
        "description": "Flag indicating the toggle has expanded styling",
        "type": "boolean"
      },
      "isFullHeight": {
        "description": "Flag indicating the toggle is full height",
        "type": "boolean"
      },
      "isFullWidth": {
        "description": "Flag indicating the toggle takes up the full width of its parent",
        "type": "boolean"
      },
      "isPlaceholder": {
        "description": "Flag indicating the toggle contains placeholder text",
        "type": "boolean"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. It will always target the toggle button. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "size": {
        "description": "Adds styling which affects the size of the menu toggle",
        "enum": [
          "default",
          "sm"
        ]
      },
      "splitButtonItems": {
        "description": "Elements to display before the toggle button. When included, renders the menu toggle as a split button. (React component or element)"
      },
      "status": {
        "description": "Status styles of the menu toggle",
        "enum": [
          "success",
          "warning",
          "danger"
        ]
      },
      "statusIcon": {
        "description": "Overrides the status icon (React component or element)"
      },
      "variant": {
        "description": "Variant styles of the menu toggle",
        "enum": [
          "default",
          "plain",
          "primary",
          "plainText",
          "secondary",
          "typeahead"
        ]
      }
    },
    "additionalProperties": false
  },
  "MenuToggleState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuToggleState Props",
    "description": "Props for the MenuToggleState component",
    "properties": {
      "ouiaStateId": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "ouiaStateId"
    ],
    "additionalProperties": false
  },
  "MenuToggleElement": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuToggleElement Props",
    "description": "Props for the MenuToggleElement component",
    "properties": {},
    "additionalProperties": false
  },
  "MenuSearchInput": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuSearchInput Props",
    "description": "Props for the MenuSearchInput component",
    "properties": {
      "children": {
        "description": "Items within input (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "MenuSearch": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuSearch Props",
    "description": "Props for the MenuSearch component",
    "properties": {
      "children": {
        "description": "Items within search (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "MenuList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuList Props",
    "description": "Props for the MenuList component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible name to the menu.",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered inside of menu list (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the menu list",
        "type": "string"
      },
      "isAriaMultiselectable": {
        "description": "Indicates to assistive technologies whether more than one item can be selected\nfor a non-checkbox menu. Only applies when the menu's role is \"listbox\".",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "MenuItemAction": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuItemAction Props",
    "description": "Props for the MenuItemAction component",
    "properties": {
      "actionId": {
        "description": "Identifies the action item in the onActionClick on the Menu (Type: any)"
      },
      "aria-label": {
        "description": "Accessibility label",
        "type": "string"
      },
      "className": {
        "description": "Additional classes added to the action button",
        "type": "string"
      },
      "icon": {
        "description": "The action icon to use (React component or element)"
      },
      "isDisabled": {
        "description": "Disables action, can also be specified on the MenuItem instead",
        "type": "boolean"
      },
      "isFavorited": {
        "description": "Flag indicating if the item is favorited",
        "type": "boolean"
      },
      "onClick": {
        "description": "Callback on action click, can also specify onActionClick on the Menu instead (Function: (event?: any) => void)"
      }
    },
    "required": [
      "aria-label"
    ],
    "additionalProperties": false
  },
  "MenuItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuItem Props",
    "description": "Props for the MenuItem component",
    "properties": {
      "actions": {
        "description": "Render item with one or more actions (React component or element)"
      },
      "aria-label": {
        "description": "Adds an accessible name to the menu item.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the menu list item. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the menu list item",
        "type": "string"
      },
      "component": {
        "description": "Component used to render the menu item (Type: React.ElementType<any> | React.ComponentType<any>)"
      },
      "description": {
        "description": "Description of the menu item (React component or element)"
      },
      "direction": {
        "description": "Sub menu direction",
        "enum": [
          "down",
          "up"
        ]
      },
      "download": {
        "description": "Navigation link download. Only set when the to property is present.",
        "type": "string"
      },
      "drilldownMenu": {
        "description": "Drilldown menu of the item. Should be a Menu or DrilldownMenu type. (React component or element)"
      },
      "flyoutMenu": {
        "description": "Flyout menu. Should not be used if the to prop is defined. (Type: React.ReactElement<any>)"
      },
      "hasCheckbox": {
        "description": "Flag indicating the item has a checkbox",
        "type": "boolean"
      },
      "icon": {
        "description": "Render item with icon (React component or element)"
      },
      "id": {
        "description": "Sets the id attribute on the menu item component.",
        "type": "string"
      },
      "isActive": {
        "description": "Flag indicating whether the item is active",
        "type": "boolean"
      },
      "isAriaDisabled": {
        "description": "Render item as aria-disabled option",
        "type": "boolean"
      },
      "isDanger": {
        "description": "Flag indicating the item is in danger state",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Render item as disabled option",
        "type": "boolean"
      },
      "isExternalLink": {
        "description": "Render an external link icon on focus or hover, and set the link's\n\"target\" attribute to a value of \"_blank\".",
        "type": "boolean"
      },
      "isFavorited": {
        "description": "Flag indicating if the item is favorited",
        "type": "boolean"
      },
      "isFocused": {
        "description": "Flag indicating the item is focused",
        "type": "boolean"
      },
      "isLoadButton": {
        "description": "Flag indicating if the item causes a load",
        "type": "boolean"
      },
      "isLoading": {
        "description": "Flag indicating a loading state",
        "type": "boolean"
      },
      "isOnPath": {
        "description": "True if item is on current selection path",
        "type": "boolean"
      },
      "isSelected": {
        "description": "Flag indicating if the option is selected",
        "type": "boolean"
      },
      "itemId": {
        "description": "Identifies the component in the Menu onSelect or onActionClick callback (Type: any)"
      },
      "onClick": {
        "description": "Callback for item click (Function: (event?: any) => void)"
      },
      "onShowFlyout": {
        "description": "Callback function when mouse leaves trigger (Function: (event?: any) => void)"
      },
      "rel": {
        "description": "Navigation link relationship. Only set when the to property is present.",
        "type": "string"
      },
      "target": {
        "description": "Navigation link target. Only set when the to property is present. If isExternalLink is also passed in, this property will be set to \"_blank\".",
        "type": "string"
      },
      "to": {
        "description": "Target navigation link. Should not be used if the flyout prop is defined.",
        "type": "string"
      },
      "tooltipProps": {
        "description": "Props for adding a tooltip to a menu item (Type: TooltipProps)"
      }
    },
    "additionalProperties": false
  },
  "MenuGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuGroup Props",
    "description": "Props for the MenuGroup component",
    "properties": {
      "children": {
        "description": "Items within group (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the MenuGroup",
        "type": "string"
      },
      "label": {
        "description": "Group label (React component or element)"
      },
      "labelHeadingLevel": {
        "description": "Group label heading level. Default is h1.",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ]
      },
      "titleId": {
        "description": "ID for title label",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MenuFooter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuFooter Props",
    "description": "Props for the MenuFooter component",
    "properties": {
      "children": {
        "description": "Content rendered inside the footer (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the footer",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "MenuContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuContent Props",
    "description": "Props for the MenuContent component",
    "properties": {
      "children": {
        "description": "Items within group (React component or element)"
      },
      "getHeight": {
        "description": "Callback to return the height of the menu content (Function: (height: string) => void)"
      },
      "maxMenuHeight": {
        "description": "Maximum height of menu content",
        "type": "string"
      },
      "menuHeight": {
        "description": "Height of the menu content",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MenuContainer": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuContainer Props",
    "description": "Container that links a menu and menu toggle together, to handle basic keyboard input and control the opening and closing of a menu.",
    "properties": {
      "focusTimeoutDelay": {
        "description": "Time in ms to wait before firing the toggles' focus event. Defaults to 0",
        "type": "number",
        "default": 0
      },
      "isOpen": {
        "description": "Flag to indicate if menu is opened.",
        "type": "boolean"
      },
      "menu": {
        "description": "Menu to be rendered (Type: React.ReactElement<any, string | React.JSXElementConstructor<any>>)"
      },
      "menuRef": {
        "description": "Reference to the menu (Type: React.RefObject<any>)"
      },
      "onOpenChange": {
        "description": "Callback to change the open state of the menu.\nTriggered by clicking outside of the menu, or by pressing any keys specified in onOpenChangeKeys. (Function: (isOpen: boolean) => void)"
      },
      "onOpenChangeKeys": {
        "description": "Keys that trigger onOpenChange, defaults to tab and escape. It is highly recommended to include Escape in the array, while Tab may be omitted if the menu contains non-menu items that are focusable. (Type: string[])",
        "type": "array",
        "default": "['Escape', 'Tab']"
      },
      "onToggleKeydown": {
        "description": "Callback to override the toggle keydown behavior. By default, when the toggle has focus and the menu is open, pressing the up/down arrow keys will focus a valid non-disabled menu item - the first item for the down arrow key and last item for the up arrow key. (Function: (event: KeyboardEvent) => void)"
      },
      "popperProps": {
        "description": "Additional properties to pass to the Popper (Type: MenuPopperProps)"
      },
      "shouldFocusFirstItemOnOpen": {
        "description": "Flag indicating the first menu item should be focused after opening the dropdown.",
        "type": "boolean",
        "default": false
      },
      "shouldPreventScrollOnItemFocus": {
        "description": "Flag indicating if scroll on focus of the first menu item should occur.",
        "type": "boolean",
        "default": true
      },
      "toggle": {
        "description": "Toggle to be rendered (React component or element)"
      },
      "toggleRef": {
        "description": "Reference to the toggle (Type: React.RefObject<any>)"
      },
      "zIndex": {
        "description": "z-index of the dropdown menu",
        "type": "number",
        "default": 9999
      }
    },
    "required": [
      "isOpen",
      "menu",
      "menuRef",
      "toggle",
      "toggleRef"
    ],
    "additionalProperties": false
  },
  "MenuBreadcrumb": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuBreadcrumb Props",
    "description": "Props for the MenuBreadcrumb component",
    "properties": {
      "children": {
        "description": "Items within breadcrumb menu container (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "Menu": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Menu Props",
    "description": "Props for the Menu component",
    "properties": {
      "activeItemId": {
        "description": "itemId of the currently active item. You can also specify isActive on the MenuItem. (Type: string | number)"
      },
      "activeMenu": {
        "description": "ID of the currently active menu for the drilldown variant",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered inside of the Menu (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Menu",
        "type": "string"
      },
      "containsDrilldown": {
        "description": "Indicates if menu contains a drilldown menu",
        "type": "boolean"
      },
      "containsFlyout": {
        "description": "Indicates if menu contains a flyout menu",
        "type": "boolean"
      },
      "drilldownItemPath": {
        "description": "Indicates the path of drilled in menu itemIds (Type: string[])",
        "type": "array"
      },
      "drilledInMenus": {
        "description": "Array of menus that are drilled in (Type: string[])",
        "type": "array"
      },
      "id": {
        "description": "ID of the menu",
        "type": "string"
      },
      "isMenuDrilledIn": {
        "description": "Indicates if a menu is drilled into",
        "type": "boolean"
      },
      "isNavFlyout": {
        "description": "Indicating that the menu should have nav flyout styling",
        "type": "boolean"
      },
      "isPlain": {
        "description": "Indicates if the menu should be without the outer box-shadow",
        "type": "boolean"
      },
      "isRootMenu": {
        "description": "Internal flag indicating if the Menu is the root of a menu tree",
        "type": "boolean"
      },
      "isScrollable": {
        "description": "Indicates if the menu should be srollable",
        "type": "boolean"
      },
      "onActionClick": {
        "description": "Callback called when an MenuItems's action button is clicked. You can also specify it within a MenuItemAction. (Function: (event?: any, itemId?: any, actionId?: any) => void)"
      },
      "onDrillIn": {
        "description": "Callback for drilling into a submenu (Type: (\n  event: React.KeyboardEvent | React.MouseEvent,\n  fromItemId: string,\n  toItemId: string,\n  itemId: string\n) => void)"
      },
      "onDrillOut": {
        "description": "Callback for drilling out of a submenu (Type: (event: React.KeyboardEvent | React.MouseEvent, toItemId: string, itemId: string) => void)"
      },
      "onGetMenuHeight": {
        "description": "Callback for collecting menu heights (Function: (menuId: string, height: number) => void)"
      },
      "onSelect": {
        "description": "Callback for updating when item selection changes. You can also specify onClick on the MenuItem. (Type: (event?: React.MouseEvent, itemId?: string | number) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "parentMenu": {
        "description": "ID of parent menu for drilldown menus",
        "type": "string"
      },
      "role": {
        "description": "Determines the accessible role of the menu. For a non-checkbox menu that can have\none or more items selected, pass in \"listbox\".",
        "type": "string"
      },
      "selected": {
        "description": "Single itemId for single select menus, or array of itemIds for multi select. You can also specify isSelected on the MenuItem. (Type: any | any[])"
      }
    },
    "additionalProperties": false
  },
  "MenuState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MenuState Props",
    "description": "Props for the MenuState component",
    "properties": {
      "currentDrilldownMenuId": {
        "description": "",
        "type": "string"
      },
      "disableHover": {
        "description": "",
        "type": "boolean"
      },
      "flyoutRef": {
        "description": " (Type: React.Ref<HTMLLIElement> | null)"
      },
      "ouiaStateId": {
        "description": "",
        "type": "string"
      },
      "transitionMoveTarget": {
        "description": " (Type: HTMLElement)"
      }
    },
    "required": [
      "currentDrilldownMenuId",
      "disableHover",
      "flyoutRef",
      "ouiaStateId",
      "transitionMoveTarget"
    ],
    "additionalProperties": false
  },
  "DrilldownMenu": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrilldownMenu Props",
    "description": "Props for the DrilldownMenu component",
    "properties": {
      "children": {
        "description": "Items within drilldown sub-menu (React component or element)"
      },
      "getHeight": {
        "description": "Optional callback to get the height of the sub menu (Function: (height: string) => void)"
      },
      "id": {
        "description": "ID of the drilldown sub-menu",
        "type": "string"
      },
      "isMenuDrilledIn": {
        "description": "Flag indicating whether the menu is drilled in",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "MastheadToggle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MastheadToggle Props",
    "description": "Props for the MastheadToggle component",
    "properties": {
      "children": {
        "description": "Content rendered inside of the masthead toggle. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the masthead toggle.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MastheadMain": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MastheadMain Props",
    "description": "Props for the MastheadMain component",
    "properties": {
      "children": {
        "description": "Content rendered inside of the masthead main block. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the masthead main.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MastheadLogo": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MastheadLogo Props",
    "description": "Props for the MastheadLogo component",
    "properties": {
      "children": {
        "description": "Content rendered inside of the masthead logo. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the masthead logo.",
        "type": "string"
      },
      "component": {
        "description": "Component type of the masthead logo. (Type: React.ElementType<any> | React.ComponentType<any>)"
      }
    },
    "additionalProperties": false
  },
  "MastheadContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MastheadContent Props",
    "description": "Props for the MastheadContent component",
    "properties": {
      "children": {
        "description": "Content rendered inside of the masthead content block. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the masthead content.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "MastheadBrand": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "MastheadBrand Props",
    "description": "Props for the MastheadBrand component",
    "properties": {
      "children": {
        "description": "Content rendered inside of the masthead brand. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the masthead brand.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Masthead": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Masthead Props",
    "description": "Props for the Masthead component",
    "properties": {
      "children": {
        "description": "Content rendered inside of the masthead (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the masthead",
        "type": "string"
      },
      "display": {
        "description": "Display type at various breakpoints",
        "enum": [
          "inline",
          "stack",
          "inline",
          "stack",
          "inline",
          "stack",
          "inline",
          "stack",
          "inline",
          "stack",
          "2xl",
          "inline",
          "stack"
        ],
        "default": "{\n  md: 'inline'\n}"
      },
      "inset": {
        "description": "Insets at various breakpoints",
        "enum": [
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "2xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl"
        ]
      }
    },
    "additionalProperties": false
  },
  "ModalHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalHeader Props",
    "description": "Renders content in the header of the modal",
    "properties": {
      "children": {
        "description": "Custom content rendered inside the modal header. If children are supplied then the tile, tileIconVariant and titleScreenReaderText props are ignored. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal header.",
        "type": "string"
      },
      "description": {
        "description": "Description of the modal. (React component or element)"
      },
      "descriptorId": {
        "description": "Id of the modal description.",
        "type": "string"
      },
      "help": {
        "description": "Optional help section for the modal header. (React component or element)"
      },
      "labelId": {
        "description": "Id of the modal title.",
        "type": "string"
      },
      "title": {
        "description": "Content rendered inside the modal title. (React component or element)"
      },
      "titleIconVariant": {
        "description": "Optional alert icon (or other) to show before the title. When the predefined alert types\nare used the default styling will be automatically applied.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ]
      },
      "titleScreenReaderText": {
        "description": "Optional title label text for screen readers.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ModalFooter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalFooter Props",
    "description": "Renders content in the footer of the modal",
    "properties": {
      "children": {
        "description": "Content rendered inside the modal footer. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal footer.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ModalContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalContent Props",
    "description": "Props for the ModalContent component",
    "properties": {
      "aria-describedby": {
        "description": "Id to use for the modal box description. This should match the ModalHeader labelId or descriptorId.",
        "type": "string"
      },
      "aria-label": {
        "description": "Accessible descriptor of the modal.",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "Id to use for the modal box label. This should include the ModalHeader labelId.",
        "type": "string"
      },
      "backdropClassName": {
        "description": "Additional classes added to the modal backdrop.",
        "type": "string"
      },
      "backdropId": {
        "description": "Id of the backdrop.",
        "type": "string"
      },
      "boxId": {
        "description": "Id of the modal box container.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the modal. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal box.",
        "type": "string"
      },
      "disableFocusTrap": {
        "description": "Flag to disable focus trap.",
        "type": "boolean",
        "default": false
      },
      "elementToFocus": {
        "description": "The element to focus when the modal opens. By default the first\nfocusable element will receive focus. (Type: HTMLElement | SVGElement | string)"
      },
      "isOpen": {
        "description": "Flag to show the modal.",
        "type": "boolean",
        "default": false
      },
      "maxWidth": {
        "description": "Maximum width of the modal. (Type: number | string)"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked. (Type: (event: KeyboardEvent | React.MouseEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "position": {
        "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
        "enum": [
          "default",
          "top"
        ]
      },
      "positionOffset": {
        "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
        "type": "string"
      },
      "variant": {
        "description": "Variant of the modal.",
        "enum": [
          "small",
          "medium",
          "large",
          "default"
        ],
        "default": "'default'"
      },
      "width": {
        "description": "Default width of the modal. (Type: number | string)"
      }
    },
    "required": [
      "boxId",
      "children"
    ],
    "additionalProperties": false
  },
  "ModalBoxTitle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxTitle Props",
    "description": "Props for the ModalBoxTitle component",
    "properties": {
      "className": {
        "description": "Additional classes added to the modal box title.",
        "type": "string"
      },
      "id": {
        "description": "Id of the modal box title.",
        "type": "string"
      },
      "title": {
        "description": "Content rendered inside the modal box title. (React component or element)"
      },
      "titleIconVariant": {
        "description": "Optional alert icon (or other) to show before the title. When the predefined alert types\nare used the default styling will be automatically applied.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ]
      },
      "titleScreenReaderText": {
        "description": "Optional title label text for screen readers.",
        "type": "string"
      }
    },
    "required": [
      "title"
    ],
    "additionalProperties": false
  },
  "ModalBoxDescription": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxDescription Props",
    "description": "Props for the ModalBoxDescription component",
    "properties": {
      "children": {
        "description": "Content rendered inside the description. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the description.",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "Id of the description.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "ModalBoxCloseButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxCloseButton Props",
    "description": "Props for the ModalBoxCloseButton component",
    "properties": {
      "aria-label": {
        "description": "Accessible descriptor of the close button.",
        "type": "string",
        "default": "'Close'"
      },
      "className": {
        "description": "Additional classes added to the close button.",
        "type": "string"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked. (Type: (event: KeyboardEvent | React.MouseEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to set the data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "ModalBox": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBox Props",
    "description": "Props for the ModalBox component",
    "properties": {
      "aria-describedby": {
        "description": "Id to use for the modal box description. This should match the ModalHeader labelId or descriptorId",
        "type": "string"
      },
      "aria-label": {
        "description": "Adds an accessible name to the modal when there is no title in the ModalHeader.",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "Id to use for the modal box label.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the modal box. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal box.",
        "type": "string"
      },
      "position": {
        "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
        "enum": [
          "default",
          "top"
        ]
      },
      "positionOffset": {
        "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
        "type": "string"
      },
      "variant": {
        "description": "Variant of the modal.",
        "enum": [
          "small",
          "medium",
          "large",
          "default"
        ],
        "default": "'default'"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "ModalBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBody Props",
    "description": "Renders content in the body of the modal",
    "properties": {
      "aria-label": {
        "description": "Accessible label applied to the modal body. This should be used to communicate\nimportant information about the modal body div element if needed, such as when it is scrollable.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the modal body. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal body.",
        "type": "string"
      },
      "role": {
        "description": "Accessible role applied to the modal body. This will default to \"region\" if the\naria-label property is passed in. Set to a more appropriate role as applicable\nbased on the modal content and context.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Modal": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Modal Props",
    "description": "Props for the Modal component",
    "properties": {
      "appendTo": {
        "description": "The parent container to append the modal to. Defaults to \"document.body\". (Type: HTMLElement | (() => HTMLElement))",
        "default": "() => document.body"
      },
      "aria-describedby": {
        "description": "Id to use for the modal box description. This should match the ModalHeader labelId or descriptorId.",
        "type": "string"
      },
      "aria-label": {
        "description": "Adds an accessible name to the modal when there is no title in the ModalHeader.",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "Id to use for the modal box label. This should include the ModalHeader labelId.",
        "type": "string"
      },
      "backdropClassName": {
        "description": "Additional classes added to the modal backdrop.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the modal. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal.",
        "type": "string"
      },
      "disableFocusTrap": {
        "description": "Flag to disable focus trap.",
        "type": "boolean"
      },
      "elementToFocus": {
        "description": "The element to focus when the modal opens. By default the first\nfocusable element will receive focus. (Type: HTMLElement | SVGElement | string)"
      },
      "id": {
        "description": "An id to use for the modal box container.",
        "type": "string"
      },
      "isOpen": {
        "description": "Flag to show the modal.",
        "type": "boolean",
        "default": false
      },
      "maxWidth": {
        "description": "Maximum width of the modal. (Type: number | string)"
      },
      "onClose": {
        "description": "Add callback for when the close button is clicked. This prop needs to be passed to render the close button (Type: (event: KeyboardEvent | React.MouseEvent) => void)"
      },
      "onEscapePress": {
        "description": "Modal handles pressing of the escape key and closes the modal. If you want to handle\nthis yourself you can use this callback function. (Function: (event: KeyboardEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "position": {
        "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
        "enum": [
          "default",
          "top"
        ],
        "default": "'default'"
      },
      "positionOffset": {
        "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
        "type": "string"
      },
      "variant": {
        "description": "Variant of the modal.",
        "enum": [
          "small",
          "medium",
          "large",
          "default"
        ],
        "default": "'default'"
      },
      "width": {
        "description": "Default width of the modal. (Type: number | string)"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "ModalState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalState Props",
    "description": "Props for the ModalState component",
    "properties": {
      "ouiaStateId": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "ouiaStateId"
    ],
    "additionalProperties": false
  },
  "LoginPage": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginPage Props",
    "description": "Props for the LoginPage component",
    "properties": {
      "backgroundImgSrc": {
        "description": "Attribute that specifies the URL of the background image for the login page",
        "type": "string",
        "default": "''"
      },
      "brandImgAlt": {
        "description": "Attribute that specifies the alt text of the brand image for the login page",
        "type": "string",
        "default": "''"
      },
      "brandImgSrc": {
        "description": "Attribute that specifies the URL of the brand image for the login page",
        "type": "string",
        "default": "''"
      },
      "children": {
        "description": "Anything that can be rendered inside of the login page (e.g. <LoginPageForm>) (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the login page",
        "type": "string",
        "default": "''"
      },
      "footerListItems": {
        "description": "Items rendered inside of the footer list component of the login page (React component or element)",
        "default": null
      },
      "footerListVariants": {
        "description": "Adds list variant styles for the footer list component of the login page. The only current value is'inline' (Type: ListVariant.inline)"
      },
      "forgotCredentials": {
        "description": "Content rendered inside of login main footer band to display a forgot credentials link. (React component or element)",
        "default": null
      },
      "headerUtilities": {
        "description": "Header utilities for the login main body header of the login page (React component or element)"
      },
      "loginSubtitle": {
        "description": "Subtitle for the login main body header of the login page",
        "type": "string"
      },
      "loginTitle": {
        "description": "Title for the login main body header of the login page",
        "type": "string"
      },
      "signUpForAccountMessage": {
        "description": "Content rendered inside of login main footer band to display a sign up for account message (React component or element)",
        "default": null
      },
      "socialMediaLoginAriaLabel": {
        "description": "Adds an accessible name to the social media login list.",
        "type": "string"
      },
      "socialMediaLoginContent": {
        "description": "Content rendered inside of social media login footer section (React component or element)",
        "default": null
      },
      "textContent": {
        "description": "Content rendered inside of the text component of the login page",
        "type": "string",
        "default": "''"
      }
    },
    "required": [
      "loginTitle"
    ],
    "additionalProperties": false
  },
  "LoginMainHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginMainHeader Props",
    "description": "Props for the LoginMainHeader component",
    "properties": {
      "children": {
        "description": "Content rendered inside the login main header (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the login main header",
        "type": "string",
        "default": "''"
      },
      "headerUtilities": {
        "description": "Actions that render for the login main header (React component or element)",
        "default": null
      },
      "subtitle": {
        "description": "Subtitle that contains the text, URL, and URL text for the login main header",
        "type": "string",
        "default": "''"
      },
      "title": {
        "description": "Title for the login main header",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "LoginMainFooterLinksItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginMainFooterLinksItem Props",
    "description": "Props for the LoginMainFooterLinksItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the footer link item (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the footer link item",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "LoginMainFooterBandItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginMainFooterBandItem Props",
    "description": "Props for the LoginMainFooterBandItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the footer link item (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the footer link item",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "LoginMainFooter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginMainFooter Props",
    "description": "Props for the LoginMainFooter component",
    "properties": {
      "children": {
        "description": "Content rendered inside the login main footer (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the login main footer",
        "type": "string",
        "default": "''"
      },
      "forgotCredentials": {
        "description": "Content rendered inside of login main footer band do display a forgot credentials link* (React component or element)",
        "default": null
      },
      "signUpForAccountMessage": {
        "description": "Content rendered inside of login main footer band to display a sign up for account message (React component or element)",
        "default": null
      },
      "socialMediaLoginAriaLabel": {
        "description": "Adds an accessible name to the social media login list.",
        "type": "string"
      },
      "socialMediaLoginContent": {
        "description": "Content rendered inside the login main footer as social media links (React component or element)",
        "default": null
      }
    },
    "additionalProperties": false
  },
  "LoginMainBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginMainBody Props",
    "description": "Props for the LoginMainBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the login main body (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the login main body",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "LoginHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginHeader Props",
    "description": "Props for the LoginHeader component",
    "properties": {
      "children": {
        "description": "Content rendered inside the header of the login layout (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the login header",
        "type": "string",
        "default": "''"
      },
      "headerBrand": {
        "description": "Header brand component (e.g. <LoginHeader />) (React component or element)",
        "default": null
      }
    },
    "additionalProperties": false
  },
  "LoginForm": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginForm Props",
    "description": "Props for the LoginForm component",
    "properties": {
      "className": {
        "description": "Additional classes added to the login main body's form",
        "type": "string",
        "default": "''"
      },
      "helperText": {
        "description": "Content displayed in the helper text component * (React component or element)",
        "default": null
      },
      "helperTextIcon": {
        "description": "Icon displayed to the left in the helper text (React component or element)",
        "default": null
      },
      "hidePasswordAriaLabel": {
        "description": "Accessible label for the hide password button",
        "type": "string",
        "default": "'Hide password'"
      },
      "isLoginButtonDisabled": {
        "description": "Flag indicating if the login button is disabled",
        "type": "boolean",
        "default": false
      },
      "isPasswordRequired": {
        "description": "Flag indicating if password is required",
        "type": "boolean",
        "default": true
      },
      "isRememberMeChecked": {
        "description": "Flag indicating if the remember me checkbox is checked.",
        "type": "boolean",
        "default": false
      },
      "isShowPasswordEnabled": {
        "description": "Flag indicating if the user can toggle hiding the password",
        "type": "boolean",
        "default": false
      },
      "isValidPassword": {
        "description": "Flag indicating if the password is valid",
        "type": "boolean",
        "default": true
      },
      "isValidUsername": {
        "description": "Flag indicating if the username is valid",
        "type": "boolean",
        "default": true
      },
      "loginButtonLabel": {
        "description": "Label for the log in button input",
        "type": "string",
        "default": "'Log In'"
      },
      "noAutoFocus": {
        "description": "Flag to indicate if the first dropdown item should not gain initial focus",
        "type": "boolean",
        "default": false
      },
      "onChangePassword": {
        "description": "Function that handles the onChange event for the password (Function: (event: React.FormEvent<HTMLInputElement>, value: string) => void)",
        "default": "() => undefined as any"
      },
      "onChangeRememberMe": {
        "description": "Function that handles the onChange event for the remember me checkbox (Function: (event: React.FormEvent<HTMLInputElement>, checked: boolean) => void)",
        "default": "() => undefined as any"
      },
      "onChangeUsername": {
        "description": "Function that handles the onChange event for the username (Function: (event: React.FormEvent<HTMLInputElement>, value: string) => void)",
        "default": "() => undefined as any"
      },
      "onLoginButtonClick": {
        "description": "Function that is called when the login button is clicked (Function: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "default": "() => undefined as any"
      },
      "passwordLabel": {
        "description": "Label for the password input field",
        "type": "string",
        "default": "'Password'"
      },
      "passwordValue": {
        "description": "Value for the password",
        "type": "string",
        "default": "''"
      },
      "rememberMeLabel": {
        "description": "Label for the remember me checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show.",
        "type": "string",
        "default": "''"
      },
      "showHelperText": {
        "description": "Flag indicating the helper text is visible *",
        "type": "boolean",
        "default": false
      },
      "showPasswordAriaLabel": {
        "description": "Accessible label for the show password button",
        "type": "string",
        "default": "'Show password'"
      },
      "usernameLabel": {
        "description": "Label for the username input field",
        "type": "string",
        "default": "'Username'"
      },
      "usernameValue": {
        "description": "Value for the username",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "LoginFooterItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginFooterItem Props",
    "description": "Props for the LoginFooterItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the footer link item (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the footer link item",
        "type": "string"
      },
      "href": {
        "description": "The URL of the footer link item",
        "type": "string",
        "default": "'#'"
      },
      "target": {
        "description": "Specifies where to open the linked document",
        "type": "string",
        "default": "'_blank'"
      }
    },
    "additionalProperties": false
  },
  "LoginFooter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LoginFooter Props",
    "description": "Props for the LoginFooter component",
    "properties": {
      "children": {
        "description": "Content rendered inside the footer of the login layout (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional props are spread to the container <footer>",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "Login": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Login Props",
    "description": "Props for the Login component",
    "properties": {
      "children": {
        "description": "Content rendered inside the main section of the login layout (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the login layout",
        "type": "string",
        "default": "''"
      },
      "footer": {
        "description": "Footer component (e.g. <LoginFooter />) (React component or element)",
        "default": null
      },
      "header": {
        "description": "Header component (e.g. <LoginHeader />) (React component or element)",
        "default": null
      }
    },
    "additionalProperties": false
  },
  "LabelGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LabelGroup Props",
    "description": "Props for the LabelGroup component",
    "properties": {
      "addLabelControl": {
        "description": "Control for adding new labels (React component or element)"
      },
      "aria-label": {
        "description": "Aria label for label group that does not have a category name",
        "type": "string",
        "default": "'Label group category'"
      },
      "categoryName": {
        "description": "Category name text for the label group category.  If this prop is supplied the label group with have a label and category styling applied",
        "type": "string",
        "default": "''"
      },
      "children": {
        "description": "Content rendered inside the label group. Should be <Label> elements. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the label item",
        "type": "string"
      },
      "closeBtnAriaLabel": {
        "description": "Aria label for close button",
        "type": "string",
        "default": "'Close label group'"
      },
      "collapsedText": {
        "description": "Customizable template string. Use variable \"${remaining}\" for the overflow label count.",
        "type": "string",
        "default": "'${remaining} more'"
      },
      "defaultIsOpen": {
        "description": "Flag for having the label group default to expanded",
        "type": "boolean",
        "default": false
      },
      "editableTextAreaProps": {
        "description": "Additional props passed to the editable textarea. (Type: any)"
      },
      "expandedText": {
        "description": "Customizable \"Show Less\" text string",
        "type": "string",
        "default": "'Show Less'"
      },
      "hasEditableTextArea": {
        "description": "Flag indicating the editable label group should be appended with a textarea.",
        "type": "boolean",
        "default": false
      },
      "isClosable": {
        "description": "Flag if label group can be closed",
        "type": "boolean",
        "default": false
      },
      "isCompact": {
        "description": "Flag indicating the labels in the group are compact",
        "type": "boolean",
        "default": false
      },
      "isEditable": {
        "description": "Flag indicating contained labels are editable. Allows spacing for a text input after the labels.",
        "type": "boolean",
        "default": false
      },
      "isVertical": {
        "description": "Flag to implement a vertical layout",
        "type": "boolean",
        "default": false
      },
      "numLabels": {
        "description": "Set number of labels to show before overflow",
        "type": "number",
        "default": 3
      },
      "onClick": {
        "description": "Function that is called when clicking on the label group close button (Function: (event: React.MouseEvent) => void)",
        "default": "(_e: React.MouseEvent) => undefined as any"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if the category name text is longer (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')",
        "default": "'top'"
      }
    },
    "additionalProperties": false
  },
  "LabelGroupState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "LabelGroupState Props",
    "description": "Props for the LabelGroupState component",
    "properties": {
      "isOpen": {
        "description": "",
        "type": "boolean"
      },
      "isTooltipVisible": {
        "description": "",
        "type": "boolean"
      }
    },
    "required": [
      "isOpen",
      "isTooltipVisible"
    ],
    "additionalProperties": false
  },
  "Label": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Label Props",
    "description": "Props for the Label component",
    "properties": {
      "children": {
        "description": "Content rendered inside the label. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the label.",
        "type": "string",
        "default": "''"
      },
      "closeBtn": {
        "description": "Node for custom close button. (React component or element)"
      },
      "closeBtnAriaLabel": {
        "description": "Aria label for close button",
        "type": "string"
      },
      "closeBtnProps": {
        "description": "Additional properties for the default close button. (Type: any)"
      },
      "color": {
        "description": "Color of the label.",
        "enum": [
          "blue",
          "teal",
          "green",
          "orange",
          "purple",
          "red",
          "orangered",
          "grey",
          "yellow"
        ],
        "default": "'grey'"
      },
      "editableProps": {
        "description": "Additional props passed to the editable label text div. Optionally passing onInput and onBlur callbacks will allow finer custom text input control. (Type: any)"
      },
      "href": {
        "description": "Href for a label that is a link. If present, the label will change to an anchor element. This should not be passed in if the onClick prop is also passed in.",
        "type": "string"
      },
      "icon": {
        "description": "Icon added to the left of the label text. Overrides the icon set by the status property. (React component or element)"
      },
      "isClickable": {
        "description": "Flag indicating the label is clickable. This flag will automatically be set if a href is passed, or if an onClick handler is passed and the label is not an overflow or add variant. This should be manually set when using the render prop.",
        "type": "boolean",
        "default": false
      },
      "isCompact": {
        "description": "Flag indicating the label is compact.",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Flag indicating the label is disabled. Works only on clickable labels, so either href or onClick props must be passed in.",
        "type": "boolean",
        "default": false
      },
      "isEditable": {
        "description": "Flag indicating the label is editable.",
        "type": "boolean",
        "default": false
      },
      "onClick": {
        "description": "Callback for when the label is clicked. This should not be passed in if the href or isEditable props are also passed in. (Function: (event: React.MouseEvent) => void)"
      },
      "onClose": {
        "description": "Close click callback for removable labels. If present, label will have a close button. (Function: (event: React.MouseEvent) => void)"
      },
      "onEditCancel": {
        "description": "Callback when an editable label cancels an edit. (Function: (event: KeyboardEvent, previousText: string) => void)"
      },
      "onEditComplete": {
        "description": "Callback when an editable label completes an edit. (Type: (event: MouseEvent | KeyboardEvent, newText: string) => void)"
      },
      "render": {
        "description": "Forwards the label content and className to rendered function.  Use this prop for react router support. (React component or element)"
      },
      "status": {
        "description": "Status of the label with a respective icon and color. Overrides the color set by the color property.",
        "enum": [
          "success",
          "warning",
          "danger",
          "info",
          "custom"
        ]
      },
      "textMaxWidth": {
        "description": "The max width of the label before it is truncated. Can be any valid CSS unit, such as '100%', '100px', or '16ch'.",
        "type": "string"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if text is truncated (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')"
      },
      "variant": {
        "description": "Variant of the label.",
        "enum": [
          "outline",
          "filled",
          "overflow",
          "add"
        ],
        "default": "'filled'"
      }
    },
    "additionalProperties": false
  },
  "ListItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ListItem Props",
    "description": "Props for the ListItem component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered inside of list item (React component or element)",
        "default": null
      },
      "icon": {
        "description": "Icon for the list item (React component or element)",
        "default": null
      }
    },
    "additionalProperties": false
  },
  "List": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "List Props",
    "description": "Props for the List component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible label to the list.",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered inside of the list (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the list",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the type of the list component.",
        "enum": [
          "ol",
          "ul"
        ],
        "default": "ListComponent.ul"
      },
      "iconSize": {
        "description": "Modifies the size of the icons in the list",
        "enum": [
          "default",
          "large"
        ],
        "default": "'default'"
      },
      "isBordered": {
        "description": "Modifies the list to add borders between items",
        "type": "boolean",
        "default": false
      },
      "isPlain": {
        "description": "Modifies the list to include plain styling",
        "type": "boolean",
        "default": false
      },
      "ref": {
        "description": " (Type: No type info)",
        "default": null
      },
      "type": {
        "description": "Sets the way items are numbered if component is set to \"ol\". (Type: OrderType)",
        "default": "OrderType.number"
      },
      "variant": {
        "description": "Adds list variant styles (Type: ListVariant.inline)",
        "default": null
      }
    },
    "additionalProperties": false
  },
  "InputGroupText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "InputGroupText Props",
    "description": "Props for the InputGroupText component",
    "properties": {
      "children": {
        "description": "Content rendered inside the input group text. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the input group text.",
        "type": "string"
      },
      "component": {
        "description": "Component that wraps the input group text. (React component or element)",
        "default": "'span'"
      },
      "isDisabled": {
        "description": "Flag to indicate if the input group text is disabled.",
        "type": "boolean"
      },
      "isPlain": {
        "description": "Flag to to indicate if the input group item is plain.",
        "type": "boolean"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "InputGroupItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "InputGroupItem Props",
    "description": "Props for the InputGroupItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the input group item. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the input group item.",
        "type": "string"
      },
      "isBox": {
        "description": "Enables box styling to the input group item",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Flag to indicate if the input group item is disabled.",
        "type": "boolean"
      },
      "isFill": {
        "description": "Flag to indicate if the input group item should fill the available horizontal space",
        "type": "boolean",
        "default": false
      },
      "isPlain": {
        "description": "Flag to indicate if the input group item is plain.",
        "type": "boolean"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "Icon": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Icon Props",
    "description": "Props for the Icon component",
    "properties": {
      "children": {
        "description": "Icon content (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the icon container",
        "type": "string"
      },
      "defaultProgressArialabel": {
        "description": "Aria-label for the default progress icon",
        "type": "string",
        "default": "'Loading...'"
      },
      "iconSize": {
        "description": "Size of icon. Overrides the icon size set by the size property. (Type: | 'sm'\n| 'md'\n| 'lg'\n| 'xl'\n| '2xl'\n| '3xl'\n| 'headingSm'\n| 'headingMd'\n| 'headingLg'\n| 'headingXl'\n| 'heading_2xl'\n| 'heading_3xl'\n| 'bodySm'\n| 'bodyDefault'\n| 'bodyLg')"
      },
      "isInline": {
        "description": "Indicates the icon is inline and should inherit the text font size and color. Overriden by size and iconSize properties.",
        "type": "boolean",
        "default": false
      },
      "isInProgress": {
        "description": "Indicates the icon is in progress. Setting this property to true will swap the icon with the progressIcon.",
        "type": "boolean",
        "default": false
      },
      "progressIcon": {
        "description": "Icon when isInProgress is set to true. Defaults to a 1em spinner. (React component or element)"
      },
      "progressIconSize": {
        "description": "Size of progress icon. Overrides the icon size set by the size property. (Type: | 'sm'\n| 'md'\n| 'lg'\n| 'xl'\n| '2xl'\n| '3xl'\n| 'headingSm'\n| 'headingMd'\n| 'headingLg'\n| 'headingXl'\n| 'heading_2xl'\n| 'heading_3xl'\n| 'bodySm'\n| 'bodyDefault'\n| 'bodyLg')"
      },
      "shouldMirrorRTL": {
        "description": "Flag indicating whether the icon passed as children should be mirrored for\nright to left (RTL) languages. This will not mirror the icon passed to progressIcon.",
        "type": "boolean",
        "default": false
      },
      "size": {
        "description": "Size of the icon component container and icon. (Type: | 'sm'\n| 'md'\n| 'lg'\n| 'xl'\n| '2xl'\n| '3xl'\n| 'headingSm'\n| 'headingMd'\n| 'headingLg'\n| 'headingXl'\n| 'heading_2xl'\n| 'heading_3xl'\n| 'bodySm'\n| 'bodyDefault'\n| 'bodyLg')"
      },
      "status": {
        "description": "Status color of the icon",
        "enum": [
          "custom",
          "info",
          "success",
          "warning",
          "danger"
        ]
      }
    },
    "additionalProperties": false
  },
  "IconSize": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "IconSize Props",
    "description": "Props for the IconSize component",
    "properties": {},
    "additionalProperties": false
  },
  "HintTitle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "HintTitle Props",
    "description": "Props for the HintTitle component",
    "properties": {
      "children": {
        "description": "Content rendered inside the hint title. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the hint title.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "HintFooter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "HintFooter Props",
    "description": "Props for the HintFooter component",
    "properties": {
      "children": {
        "description": "Content rendered inside the hint footer. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the hint footer.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "HintBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "HintBody Props",
    "description": "Props for the HintBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the hint body. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the hint body.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Hint": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Hint Props",
    "description": "Props for the Hint component",
    "properties": {
      "actions": {
        "description": "Actions of the hint. (React component or element)"
      },
      "children": {
        "description": "Content rendered inside the hint. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the hint.",
        "type": "string"
      },
      "hasNoActionsOffset": {
        "description": "Flag indicating that the actions have no offset",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "HelperTextItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "HelperTextItem Props",
    "description": "Props for the HelperTextItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the helper text item. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the helper text item.",
        "type": "string"
      },
      "component": {
        "description": "Sets the component type of the helper text item.",
        "enum": [
          "div",
          "li"
        ],
        "default": "'div'"
      },
      "icon": {
        "description": "Custom icon prefixing the helper text. This property will override the default icon when the variant property is passed in. (React component or element)"
      },
      "id": {
        "description": "ID for the helper text item. The value of this prop can be passed into a form component's\naria-describedby prop when you intend for only specific helper text items to be announced to\nassistive technologies.",
        "type": "string"
      },
      "screenReaderText": {
        "description": "Text that is only accessible to screen readers in order to announce the variant of a helper text item.\nThis prop can only be used when the variant prop has a value other than \"default\".",
        "type": "string"
      },
      "variant": {
        "description": "Variant styling of the helper text item. Will also render a default icon, which can be overridden\nwith the icon prop.",
        "enum": [
          "default",
          "indeterminate",
          "warning",
          "success",
          "error"
        ],
        "default": "'default'"
      }
    },
    "additionalProperties": false
  },
  "HelperText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "HelperText Props",
    "description": "Props for the HelperText component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible label to the helper text when component is a \"ul\".",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the helper text container. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the helper text container.",
        "type": "string"
      },
      "component": {
        "description": "Component type of the helper text container",
        "enum": [
          "div",
          "ul"
        ],
        "default": "'div'"
      },
      "id": {
        "description": "ID for the helper text container. The value of this prop can be passed into a form component's\naria-describedby prop when you intend for all helper text items to be announced to\nassistive technologies.",
        "type": "string"
      },
      "isLiveRegion": {
        "description": "Flag for indicating whether the helper text container is a live region. Use this prop when you\nexpect or intend for any helper text items within the container to be dynamically updated.",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "JumpLinksList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "JumpLinksList Props",
    "description": "Props for the JumpLinksList component",
    "properties": {
      "children": {
        "description": "Text to be rendered inside span (React component or element)"
      },
      "className": {
        "description": "Classname to add to ul.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "JumpLinksItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "JumpLinksItem Props",
    "description": "Props for the JumpLinksItem component",
    "properties": {
      "children": {
        "description": "Text to be rendered inside span (React component or element)"
      },
      "className": {
        "description": "Class to add to li",
        "type": "string"
      },
      "href": {
        "description": "Href for this link",
        "type": "string"
      },
      "isActive": {
        "description": "Whether this item is active. Parent JumpLinks component sets this when passed a `scrollableSelector`.",
        "type": "boolean"
      },
      "node": {
        "description": "Selector or HTMLElement to spy on (Type: string | HTMLElement)"
      },
      "onClick": {
        "description": "Click handler for anchor tag. Parent JumpLinks components tap into this. (Function: (ev: React.MouseEvent) => void)"
      }
    },
    "required": [
      "href"
    ],
    "additionalProperties": false
  },
  "JumpLinks": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "JumpLinks Props",
    "description": "Props for the JumpLinks component",
    "properties": {
      "activeIndex": {
        "description": "The index of the child Jump link to make active.",
        "type": "number",
        "default": 0
      },
      "alwaysShowLabel": {
        "description": "Flag to always show the label when using `expandable`",
        "type": "boolean",
        "default": true
      },
      "aria-label": {
        "description": "Adds an accessible label to the internal nav element. Defaults to the value of the label prop.",
        "type": "string",
        "default": "typeof label === 'string' ? label : null"
      },
      "children": {
        "description": "Children nodes (React component or element)"
      },
      "className": {
        "description": "Class for nav",
        "type": "string"
      },
      "expandable": {
        "description": "When to collapse/expand at different breakpoints",
        "enum": [
          "expandable",
          "nonExpandable",
          "expandable",
          "nonExpandable",
          "expandable",
          "nonExpandable",
          "expandable",
          "nonExpandable",
          "expandable",
          "nonExpandable",
          "2xl",
          "expandable",
          "nonExpandable"
        ]
      },
      "isCentered": {
        "description": "Whether to center children.",
        "type": "boolean"
      },
      "isExpanded": {
        "description": "On mobile whether or not the JumpLinks starts out expanded",
        "type": "boolean",
        "default": false
      },
      "isVertical": {
        "description": "Whether the layout of children is vertical or horizontal.",
        "type": "boolean"
      },
      "label": {
        "description": "Label to add to nav element. (React component or element)"
      },
      "offset": {
        "description": "Offset to add to `scrollPosition`, potentially for a masthead which content scrolls under.",
        "type": "number",
        "default": 0
      },
      "scrollableRef": {
        "description": "Reference to the scrollable element to spy on. Takes precedence over scrollableSelector. Not passing a scrollableRef or scrollableSelector disables spying. (Type: HTMLElement | (() => HTMLElement) | React.RefObject<HTMLElement | null>)"
      },
      "scrollableSelector": {
        "description": "Selector for the scrollable element to spy on. Not passing a scrollableSelector or scrollableRef disables spying.",
        "type": "string"
      },
      "shouldReplaceNavHistory": {
        "description": "Whether the current entry in the navigation history should be replaced when a JumpLinksItem is clicked. By default a new entry will be pushed to the navigation history.",
        "type": "boolean",
        "default": false
      },
      "toggleAriaLabel": {
        "description": "Aria label for expandable toggle",
        "type": "string",
        "default": "'Toggle jump links'"
      }
    },
    "additionalProperties": false
  },
  "FormSelectOptionGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormSelectOptionGroup Props",
    "description": "Props for the FormSelectOptionGroup component",
    "properties": {
      "children": {
        "description": "content rendered inside the Select Option Group (React component or element)",
        "default": null
      },
      "className": {
        "description": "additional classes added to the Select Option",
        "type": "string",
        "default": "''"
      },
      "isDisabled": {
        "description": "flag indicating if the Option Group is disabled",
        "type": "boolean",
        "default": false
      },
      "label": {
        "description": "the label for the option",
        "type": "string"
      }
    },
    "required": [
      "label"
    ],
    "additionalProperties": false
  },
  "FormSelectOption": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormSelectOption Props",
    "description": "Props for the FormSelectOption component",
    "properties": {
      "className": {
        "description": "additional classes added to the Select Option",
        "type": "string",
        "default": "''"
      },
      "isDisabled": {
        "description": "flag indicating if the option is disabled",
        "type": "boolean",
        "default": false
      },
      "isPlaceholder": {
        "description": "flag indicating if option will have placeholder styling applied when selected *",
        "type": "boolean",
        "default": false
      },
      "label": {
        "description": "the label for the option",
        "type": "string"
      },
      "value": {
        "description": "the value for the option (Type: any)",
        "default": "''"
      }
    },
    "required": [
      "label"
    ],
    "additionalProperties": false
  },
  "FormSelect": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormSelect Props",
    "description": "Props for the FormSelect component",
    "properties": {
      "aria-label": {
        "description": "Custom flag to show that the FormSelect requires an associated id or aria-label.",
        "type": "string"
      },
      "children": {
        "description": "content rendered inside the FormSelect (React component or element)"
      },
      "className": {
        "description": "additional classes added to the FormSelect control",
        "type": "string",
        "default": "''"
      },
      "isDisabled": {
        "description": "Flag indicating the FormSelect is disabled",
        "type": "boolean",
        "default": false
      },
      "isRequired": {
        "description": "Sets the FormSelect required.",
        "type": "boolean",
        "default": false
      },
      "onBlur": {
        "description": "Optional callback for updating when selection loses focus (Function: (event: React.FormEvent<HTMLSelectElement>) => void)",
        "default": "(): any => undefined"
      },
      "onChange": {
        "description": "Optional callback for updating when selection changes (Function: (event: React.FormEvent<HTMLSelectElement>, value: string) => void)",
        "default": "(): any => undefined"
      },
      "onFocus": {
        "description": "Optional callback for updating when selection gets focus (Function: (event: React.FormEvent<HTMLSelectElement>) => void)",
        "default": "(): any => undefined"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "validated": {
        "description": "Value to indicate if the select is modified to show that validation state.\nIf set to success, select will be modified to indicate valid state.\nIf set to error, select will be modified to indicate error state.",
        "enum": [
          "success",
          "warning",
          "error",
          "default"
        ],
        "default": "'default'"
      },
      "value": {
        "description": "value of selected option (Type: any)",
        "default": "''"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "FormControlIcon": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormControlIcon Props",
    "description": "Props for the FormControlIcon component",
    "properties": {
      "className": {
        "description": "Additional class names added to the text input icon wrapper.",
        "type": "string"
      },
      "customIcon": {
        "description": "A custom icon to render instead of a status icon. (React component or element)"
      },
      "status": {
        "description": "The status icon to render.",
        "enum": [
          "success",
          "error",
          "warning"
        ]
      }
    },
    "additionalProperties": false
  },
  "FileUploadHelperText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FileUploadHelperText Props",
    "description": "A container for helper text content. This sub-component should be passed as a child to\nthe main file upload or file upload field component.",
    "properties": {
      "children": {
        "description": "Content to render inside the file upload helper text container. Typically this will be\nthe helper text component. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the file upload helper text container element.",
        "type": "string"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "FileUploadField": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FileUploadField Props",
    "description": "A more customizable file upload component for implementing custom logic. Drag and drop\nfunctionality is not built in by default.",
    "properties": {
      "allowEditingUploadedText": {
        "description": "Flag to allow editing of a text file's contents after it is selected from disk.",
        "type": "boolean",
        "default": false
      },
      "aria-label": {
        "description": "Aria-label for the text area.",
        "type": "string",
        "default": "'File upload'"
      },
      "browseButtonAriaDescribedby": {
        "description": "ID or ID's of elements that describe the browse button. Typically this should refer\nto elements such as helper text when there are file restrictions.",
        "type": "string"
      },
      "browseButtonText": {
        "description": "Text for the browse button.",
        "type": "string",
        "default": "'Browse...'"
      },
      "children": {
        "description": "Additional children to render after (or instead of) the file preview. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the file upload field container element.",
        "type": "string",
        "default": "''"
      },
      "clearButtonText": {
        "description": "Text for the clear button.",
        "type": "string",
        "default": "'Clear'"
      },
      "containerRef": {
        "description": "A reference object to attach to the file upload field container element. (Type: React.Ref<HTMLDivElement>)",
        "default": null
      },
      "filename": {
        "description": "Value to be shown in the read-only filename field.",
        "type": "string",
        "default": "''"
      },
      "filenameAriaLabel": {
        "description": "Aria-label for the read-only filename field.",
        "type": "string",
        "default": "filename ? 'Read only filename' : filenamePlaceholder"
      },
      "filenamePlaceholder": {
        "description": "Placeholder string to display in the empty filename field.",
        "type": "string",
        "default": "'Drag a file here or browse to upload'"
      },
      "hideDefaultPreview": {
        "description": "Flag to hide the built-in preview of the file (where available). If true, you can use\nthe children property to render an alternate preview.",
        "type": "boolean",
        "default": false
      },
      "id": {
        "description": "Unique id for the text area. Also used to generate ids for accessible labels.",
        "type": "string"
      },
      "isBrowseButtonDisabled": {
        "description": "Flag to disable the browse button.",
        "type": "boolean",
        "default": false
      },
      "isClearButtonDisabled": {
        "description": "Flag to disable the clear button.",
        "type": "boolean",
        "default": "!filename && !value"
      },
      "isDisabled": {
        "description": "Flag to show if the field is disabled.",
        "type": "boolean",
        "default": false
      },
      "isDragActive": {
        "description": "Flag to show if a file is being dragged over the file upload field.",
        "type": "boolean",
        "default": false
      },
      "isLoading": {
        "description": "Flag to show if a file is being loaded.",
        "type": "boolean",
        "default": false
      },
      "isReadOnly": {
        "description": "Flag to show if the field is read only.",
        "type": "boolean",
        "default": false
      },
      "isRequired": {
        "description": "Flag to show if the field is required.",
        "type": "boolean",
        "default": false
      },
      "name": {
        "description": "Name property for the text input.",
        "type": "string"
      },
      "onBrowseButtonClick": {
        "description": "A callback for when the browse button is clicked. (Function: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "default": "() => {}"
      },
      "onClearButtonClick": {
        "description": "A callback for when the clear button is clicked. (Function: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "default": "() => {}"
      },
      "onTextAreaBlur": {
        "description": "Callback for when focus is lost on the text area field. (Function: (event?: any) => void)"
      },
      "onTextAreaClick": {
        "description": "A callback for when the text area is clicked. Can also be set via the onClick property\nof the file upload component. (Function: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void)"
      },
      "onTextChange": {
        "description": "Text area text changed. (Function: (event: React.ChangeEvent<HTMLTextAreaElement>, text: string) => void)"
      },
      "spinnerAriaValueText": {
        "description": "Aria-valuetext for the loading spinner.",
        "type": "string"
      },
      "textAreaPlaceholder": {
        "description": "Placeholder string to display in the empty text area field.",
        "type": "string",
        "default": "''"
      },
      "type": {
        "description": "What type of file. Determines what is is expected by the value property (a string for\n'text' and 'dataURL', or a File object otherwise).",
        "enum": [
          "text",
          "dataURL"
        ]
      },
      "validated": {
        "description": "Value to indicate if the field is modified to show that validation state.\nIf set to success, field will be modified to indicate valid state.\nIf set to error,  field will be modified to indicate error state.",
        "enum": [
          "success",
          "error",
          "default"
        ],
        "default": "'default'"
      },
      "value": {
        "description": "Value of the file's contents (string if text file, File object otherwise). (Type: string | File)",
        "default": "''"
      }
    },
    "required": [
      "id"
    ],
    "additionalProperties": false
  },
  "FileUpload": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FileUpload Props",
    "description": "Props for the FileUpload component",
    "properties": {
      "allowEditingUploadedText": {
        "description": "Flag to allow editing of a text file's contents after it is selected from disk.",
        "type": "boolean"
      },
      "aria-label": {
        "description": "Aria-label for the text area.",
        "type": "string"
      },
      "browseButtonAriaDescribedby": {
        "description": "ID or ID's of elements that describe the browse button. Typically this should refer\nto elements such as helper text when there are file restrictions.",
        "type": "string"
      },
      "browseButtonText": {
        "description": "Text for the browse button.",
        "type": "string"
      },
      "children": {
        "description": "Additional children to render after (or instead of) the file preview. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the file upload container element.",
        "type": "string"
      },
      "clearButtonText": {
        "description": "Text for the clear button.",
        "type": "string"
      },
      "dropzoneProps": {
        "description": "Optional extra props to customize react-dropzone. (Type: Partial<DropzoneOptions>)",
        "default": {}
      },
      "filename": {
        "description": "Value to be shown in the read-only filename field.",
        "type": "string",
        "default": "''"
      },
      "filenameAriaLabel": {
        "description": "Aria-label for the read-only filename field.",
        "type": "string"
      },
      "filenamePlaceholder": {
        "description": "Placeholder string to display in the empty filename field.",
        "type": "string"
      },
      "hideDefaultPreview": {
        "description": "Flag to hide the built-in preview of the file (where available). If true, you can use\nthe children property to render an alternate preview.",
        "type": "boolean"
      },
      "id": {
        "description": "Unique id for the text area. Also used to generate ids for accessible labels.",
        "type": "string"
      },
      "isDisabled": {
        "description": "Flag to show if the field is disabled.",
        "type": "boolean"
      },
      "isLoading": {
        "description": "Flag to show if a file is being loaded.",
        "type": "boolean"
      },
      "isReadOnly": {
        "description": "Flag to show if the field is read only.",
        "type": "boolean"
      },
      "isRequired": {
        "description": "Flag to show if the field is required.",
        "type": "boolean"
      },
      "onClearClick": {
        "description": "Clear button was clicked. (Type: React.MouseEventHandler<HTMLButtonElement>)"
      },
      "onClick": {
        "description": "Callback for clicking on the file upload field text area. By default, prevents a click\nin the text area from opening file dialog. (Function: (event: React.MouseEvent) => void)",
        "default": "(event) => event.preventDefault()"
      },
      "onDataChange": {
        "description": "On data changed - if type='text' or type='dataURL' and file was loaded it will call this method (Function: (event: DropEvent, data: string) => void)"
      },
      "onFileInputChange": {
        "description": "Change event emitted from the hidden \\<input type=\"file\" \\> field associated with the component (Function: (event: DropEvent, file: File) => void)",
        "default": null
      },
      "onReadFailed": {
        "description": "A callback for when the FileReader API fails. (Function: (event: DropEvent, error: DOMException, fileHandle: File) => void)",
        "default": "() => {}"
      },
      "onReadFinished": {
        "description": "A callback for when a selected file finishes loading. (Function: (event: DropEvent, fileHandle: File) => void)",
        "default": "() => {}"
      },
      "onReadStarted": {
        "description": "A callback for when a selected file starts loading. (Function: (event: DropEvent, fileHandle: File) => void)",
        "default": "() => {}"
      },
      "onTextChange": {
        "description": "Text area text changed. (Function: (event: React.ChangeEvent<HTMLTextAreaElement>, text: string) => void)"
      },
      "spinnerAriaValueText": {
        "description": "Aria-valuetext for the loading spinner.",
        "type": "string"
      },
      "type": {
        "description": "What type of file. Determines whether 'onDataChange` is called and what is\nexpected by the value property (a string for 'text' and 'dataURL', or a File object otherwise.",
        "enum": [
          "text",
          "dataURL"
        ]
      },
      "validated": {
        "description": "Value to indicate if the field is modified to show that validation state.\nIf set to success, field will be modified to indicate valid state.\nIf set to error, field will be modified to indicate error state.",
        "enum": [
          "success",
          "error",
          "default"
        ]
      },
      "value": {
        "description": "Value of the file's contents (string if text file, File object otherwise). (Type: string | File)",
        "default": "type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null"
      }
    },
    "required": [
      "id"
    ],
    "additionalProperties": false
  },
  "ExpandableSectionToggle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ExpandableSectionToggle Props",
    "description": "Acts as the toggle sub-component when the main expandable section component has the isDetached\nproperty passed in. Allows for more custom control over the expandable section's toggle.",
    "properties": {
      "children": {
        "description": "Content rendered inside the expandable toggle. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the expandable toggle.",
        "type": "string",
        "default": "''"
      },
      "contentId": {
        "description": "Id of the toggle's respective expandable section content. The value passed into this\nproperty should match the contentId property of the main expandable section component.",
        "type": "string"
      },
      "direction": {
        "description": "Direction the toggle arrow should point when the expandable section is expanded.",
        "enum": [
          "up",
          "down"
        ],
        "default": "'down'"
      },
      "hasTruncatedContent": {
        "description": "Flag to determine toggle styling when the expandable content is truncated.",
        "type": "boolean",
        "default": false
      },
      "isExpanded": {
        "description": "Flag indicating if the expandable section is expanded.",
        "type": "boolean",
        "default": false
      },
      "onToggle": {
        "description": "Callback function to toggle the expandable content. (Function: (isExpanded: boolean) => void)"
      },
      "toggleId": {
        "description": "Id of the toggle. The value passed into this property should match the aria-labelledby\nproperty of the main expandable section component.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ExpandableSection": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ExpandableSection Props",
    "description": "The main expandable section component.",
    "properties": {
      "children": {
        "description": "Content rendered inside the expandable section. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the expandable section.",
        "type": "string",
        "default": "''"
      },
      "contentId": {
        "description": "Id of the content of the expandable section. When passing in the isDetached property, this\nproperty's value should match the contentId property of the expandable section toggle sub-component.",
        "type": "string"
      },
      "displaySize": {
        "description": "Display size variant. Set to \"lg\" for disclosure styling.",
        "enum": [
          "default",
          "lg"
        ],
        "default": "'default'"
      },
      "isDetached": {
        "description": "Indicates the expandable section has a detached toggle.",
        "type": "boolean",
        "default": false
      },
      "isExpanded": {
        "description": "Flag to indicate if the content is expanded.",
        "type": "boolean"
      },
      "isIndented": {
        "description": "Flag to indicate if the content is indented.",
        "type": "boolean",
        "default": false
      },
      "isWidthLimited": {
        "description": "Flag to indicate the width of the component is limited. Set to \"true\" for disclosure styling.",
        "type": "boolean",
        "default": false
      },
      "onToggle": {
        "description": "Callback function to toggle the expandable section. Detached expandable sections should\nuse the onToggle property of the expandable section toggle sub-component. (Function: (event: React.MouseEvent, isExpanded: boolean) => void)",
        "default": "(event, isExpanded): void => undefined"
      },
      "toggleContent": {
        "description": "React node that appears in the attached toggle in place of the toggleText property. (React component or element)"
      },
      "toggleId": {
        "description": "Id of the toggle of the expandable section, which provides an accessible name to the\nexpandable section content via the aria-labelledby attribute. When the isDetached property\nis also passed in, the value of this property must match the toggleId property of the\nexpandable section toggle sub-component.",
        "type": "string"
      },
      "toggleText": {
        "description": "Text that appears in the attached toggle.",
        "type": "string",
        "default": "''"
      },
      "toggleTextCollapsed": {
        "description": "Text that appears in the attached toggle when collapsed (will override toggleText if\nboth are specified; used for uncontrolled expandable with dynamic toggle text).",
        "type": "string",
        "default": "''"
      },
      "toggleTextExpanded": {
        "description": "Text that appears in the attached toggle when expanded (will override toggleText if\nboth are specified; used for uncontrolled expandable with dynamic toggle text).",
        "type": "string",
        "default": "''"
      },
      "truncateMaxLines": {
        "description": "Truncates the expandable content to the specified number of lines when using the\n\"truncate\" variant.",
        "type": "number"
      },
      "variant": {
        "description": "Determines the variant of the expandable section. When passing in \"truncate\" as the\nvariant, the expandable content will be truncated after 3 lines by default.",
        "enum": [
          "default",
          "truncate"
        ],
        "default": "'default'"
      }
    },
    "additionalProperties": false
  },
  "ExpandableSectionState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ExpandableSectionState Props",
    "description": "Props for the ExpandableSectionState component",
    "properties": {
      "hasToggle": {
        "description": "",
        "type": "boolean"
      },
      "isExpanded": {
        "description": "",
        "type": "boolean"
      },
      "previousWidth": {
        "description": "",
        "type": "number"
      }
    },
    "required": [
      "hasToggle",
      "isExpanded",
      "previousWidth"
    ],
    "additionalProperties": false
  },
  "InternalFormFieldGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "InternalFormFieldGroup Props",
    "description": "Props for the InternalFormFieldGroup component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered as form field group content. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the form field group.",
        "type": "string"
      },
      "header": {
        "description": "Form field group header (Type: any)"
      },
      "isExpandable": {
        "description": "Flag indicating if the field group is expandable",
        "type": "boolean"
      },
      "isExpanded": {
        "description": "Flag indicate if the form field group is expanded. Modifies the card to be expandable.",
        "type": "boolean"
      },
      "onToggle": {
        "description": "Function callback called when user clicks toggle button (Function: () => void)"
      },
      "toggleAriaLabel": {
        "description": "Aria-label to use on the form field group toggle button",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "FormSection": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormSection Props",
    "description": "Props for the FormSection component",
    "properties": {
      "children": {
        "description": "Content rendered inside the section (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the section",
        "type": "string",
        "default": "''"
      },
      "title": {
        "description": "Title for the section (React component or element)",
        "default": "''"
      },
      "titleElement": {
        "description": "Element to wrap the section title",
        "enum": [
          "div",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "default": "'div'"
      }
    },
    "additionalProperties": false
  },
  "FormHelperText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormHelperText Props",
    "description": "Props for the FormHelperText component",
    "properties": {
      "children": {
        "description": "Content rendered inside the helper text wrapper (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the helper text wrapper",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "FormGroupLabelHelp": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormGroupLabelHelp Props",
    "description": "A help button to be passed to the FormGroup's labelHelp property. This should be wrapped or linked\nto our Popover component.",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the button.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the button (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the button",
        "type": "string"
      },
      "component": {
        "description": "Sets the base component to render. defaults to button (Type: React.ElementType<any> | React.ComponentType<any>)"
      },
      "countOptions": {
        "description": "Adds count number to button (Type: BadgeCountObject)"
      },
      "hasNoPadding": {
        "description": "Applies no padding on a plain button variant. Use when plain button is placed inline with text",
        "type": "boolean"
      },
      "icon": {
        "description": "Icon for the button. (React component or element)"
      },
      "iconPosition": {
        "description": "Sets position of the icon. Note: \"left\" and \"right\" are deprecated. Use \"start\" and \"end\" instead",
        "enum": [
          "start",
          "end",
          "left",
          "right"
        ]
      },
      "inoperableEvents": {
        "description": "Events to prevent when the button is in an aria-disabled state (Type: string[])",
        "type": "array"
      },
      "isAriaDisabled": {
        "description": "Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute",
        "type": "boolean"
      },
      "isBlock": {
        "description": "Adds block styling to button",
        "type": "boolean"
      },
      "isClicked": {
        "description": "Adds clicked styling to button.",
        "type": "boolean"
      },
      "isDanger": {
        "description": "Adds danger styling to secondary or link button variants",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Adds disabled styling and disables the button using the disabled html attribute",
        "type": "boolean"
      },
      "isInline": {
        "description": "Adds inline styling to a link button",
        "type": "boolean"
      },
      "isLoading": {
        "description": "Adds progress styling to button",
        "type": "boolean"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "size": {
        "description": "Adds styling which affects the size of the button",
        "enum": [
          "default",
          "sm",
          "lg"
        ]
      },
      "spinnerAriaLabel": {
        "description": "Accessible label for the spinner to describe what is loading",
        "type": "string"
      },
      "spinnerAriaLabelledBy": {
        "description": "Id of element which describes what is being loaded",
        "type": "string"
      },
      "spinnerAriaValueText": {
        "description": "Text describing that current loading status or progress",
        "type": "string"
      },
      "state": {
        "description": "Sets state of the stateful button variant. Default is \"unread\"",
        "enum": [
          "read",
          "unread",
          "attention"
        ]
      },
      "tabIndex": {
        "description": "Sets the button tabindex.",
        "type": "number"
      },
      "type": {
        "description": "Sets button type",
        "enum": [
          "button",
          "submit",
          "reset"
        ]
      },
      "variant": {
        "description": "Adds button variant styles",
        "enum": [
          "primary",
          "secondary",
          "tertiary",
          "danger",
          "warning",
          "link",
          "plain",
          "control",
          "stateful"
        ]
      }
    },
    "required": [
      "aria-label"
    ],
    "additionalProperties": false
  },
  "FormGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormGroup Props",
    "description": "Props for the FormGroup component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered as FormGroup content. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the FormGroup.",
        "type": "string",
        "default": "''"
      },
      "fieldId": {
        "description": "ID of an individual field or a group of multiple fields. Required when a role of \"group\" or \"radiogroup\" is passed in.\nIf only one field is included, its ID attribute and this prop must be the same.",
        "type": "string"
      },
      "hasNoPaddingTop": {
        "description": "Removes top spacer from label.",
        "type": "boolean",
        "default": false
      },
      "isInline": {
        "description": "Sets the FormGroup isInline.",
        "type": "boolean",
        "default": false
      },
      "isRequired": {
        "description": "Sets the FormGroup required.",
        "type": "boolean",
        "default": false
      },
      "isStack": {
        "description": "Sets the FormGroupControl to be stacked",
        "type": "boolean",
        "default": false
      },
      "label": {
        "description": "Label text before the field. (React component or element)"
      },
      "labelHelp": {
        "description": "A help button for the label. We recommend using FormGroupLabelHelp element as a help icon button. The help button should be wrapped or linked to our popover component. (Type: React.ReactElement<any>)"
      },
      "labelInfo": {
        "description": "Additional label information displayed after the label. (React component or element)"
      },
      "role": {
        "description": "Sets the role of the form group. Pass in \"radiogroup\" when the form group contains multiple\nradio inputs, or pass in \"group\" when the form group contains multiple of any other input type.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "FormFieldGroupToggle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormFieldGroupToggle Props",
    "description": "Props for the FormFieldGroupToggle component",
    "properties": {
      "aria-label": {
        "description": "Aria label of the toggle button",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "Sets the aria-labelledby attribute on the toggle button element",
        "type": "string"
      },
      "className": {
        "description": "Additional classes added to the section",
        "type": "string"
      },
      "isExpanded": {
        "description": "Flag indicating if the toggle is expanded",
        "type": "boolean"
      },
      "onToggle": {
        "description": "Callback for onClick (Function: () => void)"
      },
      "toggleId": {
        "description": "The id applied to the toggle button",
        "type": "string"
      }
    },
    "required": [
      "isExpanded",
      "onToggle"
    ],
    "additionalProperties": false
  },
  "FormFieldGroupHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormFieldGroupHeader Props",
    "description": "Props for the FormFieldGroupHeader component",
    "properties": {
      "actions": {
        "description": "Field group header actions (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the section",
        "type": "string"
      },
      "titleDescription": {
        "description": "Field group header title description (React component or element)"
      },
      "titleText": {
        "description": "Field group header title text (Type: FormFieldGroupHeaderTitleTextObject)"
      }
    },
    "additionalProperties": false
  },
  "FormFieldGroupHeaderTitleTextObject": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormFieldGroupHeaderTitleTextObject Props",
    "description": "Props for the FormFieldGroupHeaderTitleTextObject component",
    "properties": {
      "id": {
        "description": "The id applied to the title div for accessibility",
        "type": "string"
      },
      "text": {
        "description": "Title text. (React component or element)"
      }
    },
    "required": [
      "id",
      "text"
    ],
    "additionalProperties": false
  },
  "FormFieldGroupExpandable": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormFieldGroupExpandable Props",
    "description": "Props for the FormFieldGroupExpandable component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered as form field group content. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the form field group.",
        "type": "string"
      },
      "header": {
        "description": "Form field group header (React component or element)"
      },
      "isExpanded": {
        "description": "Flag indicating if the form field group is initially expanded",
        "type": "boolean",
        "default": false
      },
      "toggleAriaLabel": {
        "description": "Aria-label to use on the form field group toggle button",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "FormFieldGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormFieldGroup Props",
    "description": "Props for the FormFieldGroup component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered as form field group content. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the form field group.",
        "type": "string"
      },
      "header": {
        "description": "Form field group header (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "FormContextProvider": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormContextProvider Props",
    "description": "Props for the FormContextProvider component",
    "properties": {},
    "additionalProperties": false
  },
  "FormAlert": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "FormAlert Props",
    "description": "Props for the FormAlert component",
    "properties": {
      "children": {
        "description": "An inline PatternFly Alert. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the FormGroup.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "Form": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Form Props",
    "description": "Props for the Form component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered as Form content. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Form.",
        "type": "string"
      },
      "isHorizontal": {
        "description": "Sets the Form to horizontal.",
        "type": "boolean"
      },
      "isWidthLimited": {
        "description": "Limits the max-width of the form.",
        "type": "boolean"
      },
      "maxWidth": {
        "description": "Sets a custom max-width for the form.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ActionGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ActionGroup Props",
    "description": "Props for the ActionGroup component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered as ActionGroup content. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the ActionGroup.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "EmptyStateIcon": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "EmptyStateIcon Props",
    "description": "Props for the EmptyStateIcon component",
    "properties": {
      "className": {
        "description": "Additional classes added to the empty state icon",
        "type": "string"
      },
      "icon": {
        "description": "Icon component to be rendered. Can also be a spinner component (Type: React.ComponentType<any>)"
      }
    },
    "required": [
      "icon"
    ],
    "additionalProperties": false
  },
  "EmptyStateHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "EmptyStateHeader Props",
    "description": "Props for the EmptyStateHeader component",
    "properties": {
      "className": {
        "description": "Additional classes added to the empty state header",
        "type": "string"
      },
      "headingLevel": {
        "description": "The heading level to use, default is h1",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "default": "EmptyStateHeadingLevel.h1"
      },
      "icon": {
        "description": "Empty state icon element to be rendered. Can also be a spinner component (Type: React.ComponentType<any>)"
      },
      "titleClassName": {
        "description": "Additional classes added to the title inside empty state header",
        "type": "string"
      },
      "titleText": {
        "description": "Text of the title inside empty state header, will be wrapped in headingLevel (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "EmptyStateFooter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "EmptyStateFooter Props",
    "description": "Props for the EmptyStateFooter component",
    "properties": {
      "children": {
        "description": "Content rendered inside the empty state footer (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the empty state footer",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "EmptyStateBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "EmptyStateBody Props",
    "description": "Props for the EmptyStateBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the empty state body (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the empty state body",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "EmptyStateActions": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "EmptyStateActions Props",
    "description": "Props for the EmptyStateActions component",
    "properties": {
      "children": {
        "description": "Content rendered inside the empty state actions (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the empty state actions",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "EmptyState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "EmptyState Props",
    "description": "Props for the EmptyState component",
    "properties": {
      "children": {
        "description": "Content rendered inside the empty state (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the empty state",
        "type": "string"
      },
      "headerClassName": {
        "description": "Additional class names to apply to the empty state header",
        "type": "string"
      },
      "headingLevel": {
        "description": "The heading level to use, default is h1",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ]
      },
      "icon": {
        "description": "Empty state icon element to be rendered. Can also be a spinner component (Type: React.ComponentType<any>)"
      },
      "isFullHeight": {
        "description": "Cause component to consume the available height of its container",
        "type": "boolean"
      },
      "status": {
        "description": "Status of the empty state, will set a default status icon and color. Icon can be overwritten using the icon prop",
        "enum": [
          "danger",
          "warning",
          "success",
          "info",
          "custom"
        ]
      },
      "titleClassName": {
        "description": "Additional classes added to the title inside empty state header",
        "type": "string"
      },
      "titleText": {
        "description": "Text of the title inside empty state header, will be wrapped in headingLevel (React component or element)"
      },
      "variant": {
        "description": "Modifies empty state max-width and sizes of icon, title and body",
        "enum": [
          "xs",
          "sm",
          "lg",
          "xl",
          "full"
        ],
        "default": "EmptyStateVariant.full"
      }
    },
    "additionalProperties": false
  },
  "DualListSelectorTreeItemBase": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorTreeItemBase Props",
    "description": "Props for the DualListSelectorTreeItemBase component",
    "properties": {
      "badgeProps": {
        "description": "Additional properties to pass to the option badge. (Type: any)"
      },
      "checkProps": {
        "description": "Additional properties to pass to the option checkbox. (Type: any)"
      },
      "children": {
        "description": "Content rendered inside the dual list selector. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "defaultExpanded": {
        "description": "Flag indicating this option is expanded by default.",
        "type": "boolean"
      },
      "hasBadge": {
        "description": "Flag indicating this option has a badge.",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the option.",
        "type": "string"
      },
      "isChecked": {
        "description": "Flag indicating if this open is checked.",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag indicating whether the component is disabled.",
        "type": "boolean",
        "default": false
      },
      "itemData": {
        "description": "Raw data of the option. (Type: DualListSelectorTreeItemData)"
      },
      "onOptionCheck": {
        "description": "Callback fired when an option is checked. (Type: (\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n  isChecked: boolean,\n  itemData: DualListSelectorTreeItemData\n) => void)"
      },
      "text": {
        "description": "Text of the option.",
        "type": "string"
      },
      "useMemo": {
        "description": "Flag indicating the DualListSelector tree should utilize memoization to help render large data sets.",
        "type": "boolean"
      }
    },
    "required": [
      "id",
      "text"
    ],
    "additionalProperties": false
  },
  "DualListSelectorTree": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorTree Props",
    "description": "Used in place of the DualListSelectorListItem sub-component when building a\ncomposable dual list selector with a tree.",
    "properties": {
      "data": {
        "description": "Data of the tree view. (Type: DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[]))"
      },
      "defaultAllExpanded": {
        "description": "Sets the default expanded behavior.",
        "type": "boolean",
        "default": false
      },
      "hasBadges": {
        "description": "Flag indicating if all options should have badges.",
        "type": "boolean",
        "default": false
      },
      "id": {
        "description": "ID of the tree view.",
        "type": "string"
      },
      "isDisabled": {
        "description": "Flag indicating if the dual list selector tree is in the disabled state.",
        "type": "boolean",
        "default": false
      },
      "onOptionCheck": {
        "description": "Callback fired when an option is checked. (Type: (\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n  isChecked: boolean,\n  itemData: DualListSelectorTreeItemData\n) => void)"
      }
    },
    "required": [
      "data"
    ],
    "additionalProperties": false
  },
  "DualListSelectorTreeItemData": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorTreeItemData Props",
    "description": "Props for the DualListSelectorTreeItemData component",
    "properties": {
      "badgeProps": {
        "description": "Additional properties to pass to the option badge. (Type: any)"
      },
      "checkProps": {
        "description": "Additional properties to pass to the option checkbox. (Type: any)"
      },
      "children": {
        "description": "Content rendered inside the dual list selector. (Type: DualListSelectorTreeItemData[])",
        "type": "array"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "defaultExpanded": {
        "description": "Flag indicating this option is expanded by default.",
        "type": "boolean"
      },
      "hasBadge": {
        "description": "Flag indicating this option has a badge.",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the option.",
        "type": "string"
      },
      "isChecked": {
        "description": "Checked state of the option.",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag indicating whether the component is disabled.",
        "type": "boolean"
      },
      "onOptionCheck": {
        "description": "Callback fired when an option is checked. (Type: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    isChosen: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void)"
      },
      "parentId": {
        "description": "Parent ID of an option.",
        "type": "string"
      },
      "text": {
        "description": "Text of the option.",
        "type": "string"
      }
    },
    "required": [
      "id",
      "isChecked",
      "text"
    ],
    "additionalProperties": false
  },
  "DualListSelectorPane": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorPane Props",
    "description": "Acts as the container for a list of options that are either available or chosen,\ndepending on the pane type (available or chosen). A search input and other actions,\nsuch as sorting, can also be passed into this sub-component.",
    "properties": {
      "actions": {
        "description": "Actions to place above the pane. (React component or element)"
      },
      "children": {
        "description": "A dual list selector list or dual list selector tree to be rendered in the pane. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector pane.",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "ID of the pane.",
        "type": "string",
        "default": "getUniqueId('dual-list-selector-pane')"
      },
      "isChosen": {
        "description": "Flag indicating if this pane is the chosen pane.",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Flag indicating whether the component is disabled.",
        "type": "boolean",
        "default": false
      },
      "listMinHeight": {
        "description": "Minimum height of the list of options rendered in the pane. *",
        "type": "string"
      },
      "onSearch": {
        "description": "Callback for search input. To be used when isSearchable is true. (Function: (event: React.ChangeEvent<HTMLInputElement>) => void)"
      },
      "searchInput": {
        "description": "A search input placed above the list at the top of the pane, before actions. (React component or element)"
      },
      "status": {
        "description": "Status to display above the pane.",
        "type": "string",
        "default": "''"
      },
      "title": {
        "description": "Title of the pane. (React component or element)",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "DualListSelector": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelector Props",
    "description": "Acts as a container for all other DualListSelector sub-components when using a\ncomposable dual list selector.",
    "properties": {
      "children": {
        "description": "Content to be rendered in the dual list selector. (React component or element)",
        "default": "''"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "id": {
        "description": "ID of the dual list selector.",
        "type": "string"
      },
      "isTree": {
        "description": "Flag indicating if the dual list selector uses trees instead of simple lists.",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "DropdownList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DropdownList Props",
    "description": "Props for the DropdownList component",
    "properties": {
      "aria-label": {
        "description": "Adds an accessible name to the menu.",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered inside of menu list (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the menu list",
        "type": "string"
      },
      "isAriaMultiselectable": {
        "description": "Indicates to assistive technologies whether more than one item can be selected\nfor a non-checkbox menu. Only applies when the menu's role is \"listbox\".",
        "type": "boolean"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "DropdownItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DropdownItem Props",
    "description": "See the MenuItem section of the Menu documentation for additional props that may be passed.",
    "properties": {
      "children": {
        "description": "Anything which can be rendered in a dropdown item (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of dropdown item",
        "type": "string"
      },
      "description": {
        "description": "Description of the dropdown item (React component or element)"
      },
      "isAriaDisabled": {
        "description": "Render item as aria-disabled option",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Render item as disabled option",
        "type": "boolean"
      },
      "onClick": {
        "description": "Callback for item click (Function: (event?: any) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "tooltipProps": {
        "description": "Props for adding a tooltip to a menu item (Type: TooltipProps)"
      },
      "value": {
        "description": "Identifies the component in the dropdown onSelect callback (Type: any)"
      }
    },
    "additionalProperties": false
  },
  "DropdownGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DropdownGroup Props",
    "description": "See the MenuGroup section of the Menu documentation for additional props that may be passed.",
    "properties": {
      "children": {
        "description": "Anything which can be rendered in a dropdown group. (React component or element)"
      },
      "className": {
        "description": "Classes applied to root element of dropdown group",
        "type": "string"
      },
      "label": {
        "description": "Label of the dropdown group (React component or element)"
      },
      "labelHeadingLevel": {
        "description": " (Type: No type info)",
        "default": "'h1'"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "Dropdown": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Dropdown Props",
    "description": "See the Menu documentation for additional props that may be passed.",
    "properties": {
      "activeItemId": {
        "description": "itemId of the currently active item. You can also specify isActive on the MenuItem. (Type: string | number)"
      },
      "activeMenu": {
        "description": "ID of the currently active menu for the drilldown variant",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered inside of the Menu (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Menu",
        "type": "string"
      },
      "containsDrilldown": {
        "description": "Indicates if menu contains a drilldown menu",
        "type": "boolean"
      },
      "containsFlyout": {
        "description": "Indicates if menu contains a flyout menu",
        "type": "boolean"
      },
      "drilldownItemPath": {
        "description": "Indicates the path of drilled in menu itemIds (Type: string[])",
        "type": "array"
      },
      "drilledInMenus": {
        "description": "Array of menus that are drilled in (Type: string[])",
        "type": "array"
      },
      "focusTimeoutDelay": {
        "description": "Time in ms to wait before firing the toggles' focus event. Defaults to 0",
        "type": "number"
      },
      "id": {
        "description": "ID of the menu",
        "type": "string"
      },
      "isMenuDrilledIn": {
        "description": "Indicates if a menu is drilled into",
        "type": "boolean"
      },
      "isNavFlyout": {
        "description": "Indicating that the menu should have nav flyout styling",
        "type": "boolean"
      },
      "isOpen": {
        "description": "Flag to indicate if menu is opened.",
        "type": "boolean"
      },
      "isPlain": {
        "description": "Indicates if the menu should be without the outer box-shadow",
        "type": "boolean"
      },
      "isRootMenu": {
        "description": "Internal flag indicating if the Menu is the root of a menu tree",
        "type": "boolean"
      },
      "isScrollable": {
        "description": "Indicates if the menu should be srollable",
        "type": "boolean"
      },
      "maxMenuHeight": {
        "description": "Maximum height of dropdown menu",
        "type": "string"
      },
      "menuHeight": {
        "description": "Height of the dropdown menu",
        "type": "string"
      },
      "onActionClick": {
        "description": "Callback called when an MenuItems's action button is clicked. You can also specify it within a MenuItemAction. (Function: (event?: any, itemId?: any, actionId?: any) => void)"
      },
      "onDrillIn": {
        "description": "Callback for drilling into a submenu (Type: (\n  event: React.KeyboardEvent | React.MouseEvent,\n  fromItemId: string,\n  toItemId: string,\n  itemId: string\n) => void)"
      },
      "onDrillOut": {
        "description": "Callback for drilling out of a submenu (Type: (event: React.KeyboardEvent | React.MouseEvent, toItemId: string, itemId: string) => void)"
      },
      "onGetMenuHeight": {
        "description": "Callback for collecting menu heights (Function: (menuId: string, height: number) => void)"
      },
      "onOpenChange": {
        "description": "Callback to allow the dropdown component to change the open state of the menu.\nTriggered by clicking outside of the menu, or by pressing any keys specified in onOpenChangeKeys. (Function: (isOpen: boolean) => void)"
      },
      "onOpenChangeKeys": {
        "description": "Keys that trigger onOpenChange, defaults to tab and escape. It is highly recommended to include Escape in the array, while Tab may be omitted if the menu contains non-menu items that are focusable. (Type: string[])",
        "type": "array"
      },
      "onSelect": {
        "description": "Callback for updating when item selection changes. You can also specify onClick on the MenuItem. (Type: (event?: React.MouseEvent<Element, MouseEvent>, value?: string | number) => void)"
      },
      "onToggleKeydown": {
        "description": "Callback to override the toggle keydown behavior. By default, when the toggle has focus and the menu is open, pressing the up/down arrow keys will focus a valid non-disabled menu item - the first item for the down arrow key and last item for the up arrow key. (Function: (event: KeyboardEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "parentMenu": {
        "description": "ID of parent menu for drilldown menus",
        "type": "string"
      },
      "popperProps": {
        "description": "Additional properties to pass to the Popper (Type: DropdownPopperProps)"
      },
      "role": {
        "description": "Determines the accessible role of the menu. For a non-checkbox menu that can have\none or more items selected, pass in \"listbox\".",
        "type": "string"
      },
      "selected": {
        "description": "Single itemId for single select menus, or array of itemIds for multi select. You can also specify isSelected on the MenuItem. (Type: any | any[])"
      },
      "shouldFocusFirstItemOnOpen": {
        "description": "Flag indicating the first menu item should be focused after opening the dropdown.",
        "type": "boolean"
      },
      "shouldFocusToggleOnSelect": {
        "description": "Flag indicating the toggle should be focused after a selection. If this use case is too restrictive, the optional toggleRef property with a node toggle may be used to control focus.",
        "type": "boolean"
      },
      "shouldPreventScrollOnItemFocus": {
        "description": "Flag indicating if scroll on focus of the first menu item should occur.",
        "type": "boolean"
      },
      "toggle": {
        "description": "Dropdown toggle. The toggle should either be a renderer function which forwards the given toggle ref, or a direct ReactNode that should be passed along with the toggleRef property. (React component or element)"
      },
      "zIndex": {
        "description": "z-index of the dropdown menu",
        "type": "number"
      }
    },
    "required": [
      "toggle"
    ],
    "additionalProperties": false
  },
  "DrawerSection": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerSection Props",
    "description": "Props for the DrawerSection component",
    "properties": {
      "children": {
        "description": "Content to be rendered in the drawer section. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the drawer section.",
        "type": "string",
        "default": "''"
      },
      "colorVariant": {
        "description": "Color variant of the background of the drawer Section",
        "enum": [
          "no-background",
          "default",
          "secondary"
        ],
        "default": "DrawerColorVariant.default"
      }
    },
    "additionalProperties": false
  },
  "DrawerPanelDescription": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerPanelDescription Props",
    "description": "Provides a description within the drawer panel. This should typically follow the drawer head.",
    "properties": {
      "children": {
        "description": "Content to be rendered in the drawer description (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the drawer description.",
        "type": "string"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "DrawerPanelContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerPanelContent Props",
    "description": "Props for the DrawerPanelContent component",
    "properties": {
      "children": {
        "description": "Content to be rendered in the drawer panel. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the drawer.",
        "type": "string"
      },
      "colorVariant": {
        "description": "Color variant of the background of the drawer panel",
        "enum": [
          "no-background",
          "default",
          "secondary"
        ],
        "default": "DrawerColorVariant.default"
      },
      "defaultSize": {
        "description": "The starting size of a drawer.",
        "type": "string"
      },
      "focusTrap": {
        "description": "Adds and customizes a focus trap on the drawer panel content. (Type: DrawerPanelFocusTrapObject)"
      },
      "hasNoBorder": {
        "description": "Flag indicating that the drawer panel should not have a border.",
        "type": "boolean",
        "default": false
      },
      "id": {
        "description": "ID of the drawer panel",
        "type": "string"
      },
      "increment": {
        "description": "The increment amount for keyboard drawer resizing.",
        "type": "number",
        "default": 5
      },
      "isResizable": {
        "description": "Flag indicating that the drawer panel should be resizable.",
        "type": "boolean",
        "default": false
      },
      "maxSize": {
        "description": "The maximum size of a drawer.",
        "type": "string"
      },
      "minSize": {
        "description": "The minimum size of a drawer.",
        "type": "string"
      },
      "onResize": {
        "description": "Callback for resize end. (Type: (event: MouseEvent | TouchEvent | React.KeyboardEvent, width: number, id: string) => void)"
      },
      "resizeAriaLabel": {
        "description": "Aria label for the resizable drawer splitter.",
        "type": "string",
        "default": "'Resize'"
      },
      "widths": {
        "description": "Width for drawer panel at various breakpoints. Overridden by resizable drawer minSize and defaultSize.",
        "enum": [
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100",
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100",
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100",
          "2xl",
          "width_25",
          "width_33",
          "width_50",
          "width_66",
          "width_75",
          "width_100"
        ]
      }
    },
    "additionalProperties": false
  },
  "DrawerPanelFocusTrapObject": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerPanelFocusTrapObject Props",
    "description": "Props for the DrawerPanelFocusTrapObject component",
    "properties": {
      "elementToFocusOnExpand": {
        "description": "The element to focus when the drawer panel content expands. By default the\nfirst focusable element will receive focus. If there are no focusable elements, the\npanel itself will receive focus. (Type: HTMLElement | SVGElement | string)"
      },
      "enabled": {
        "description": "Enables a focus trap on the drawer panel content. This will also automatically\nhandle focus management when the panel expands and when it collapses. Do not pass\nthis prop if the isStatic prop on the drawer component is true.",
        "type": "boolean"
      },
      "Unknown": {
        "description": "One or more id's to use for the drawer panel content's accessible label.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "DrawerPanelBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerPanelBody Props",
    "description": "Props for the DrawerPanelBody component",
    "properties": {
      "children": {
        "description": "Content to be rendered in the drawer (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Drawer.",
        "type": "string",
        "default": "''"
      },
      "hasNoPadding": {
        "description": "Indicates if there should be no padding around the drawer panel body",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "DrawerMain": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerMain Props",
    "description": "Props for the DrawerMain component",
    "properties": {
      "children": {
        "description": "Content to be rendered in the drawer main wrapper (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the drawer main wrapper.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "DrawerHead": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerHead Props",
    "description": "Props for the DrawerHead component",
    "properties": {
      "children": {
        "description": "Content to be rendered in the drawer head (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the drawer head.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "DrawerContentBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerContentBody Props",
    "description": "Props for the DrawerContentBody component",
    "properties": {
      "children": {
        "description": "Content to be rendered in the drawer (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Drawer.",
        "type": "string",
        "default": "''"
      },
      "hasPadding": {
        "description": "Indicates if there should be padding around the drawer content body",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "DrawerContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerContent Props",
    "description": "Props for the DrawerContent component",
    "properties": {
      "children": {
        "description": "Content to be rendered in the drawer. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Drawer.",
        "type": "string"
      },
      "colorVariant": {
        "description": "Color variant of the background of the drawer panel",
        "enum": [
          "default",
          "primary",
          "secondary"
        ],
        "default": "DrawerContentColorVariant.default"
      },
      "panelContent": {
        "description": "Content rendered in the drawer panel. (React component or element)"
      }
    },
    "required": [
      "panelContent"
    ],
    "additionalProperties": false
  },
  "DrawerCloseButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerCloseButton Props",
    "description": "Props for the DrawerCloseButton component",
    "properties": {
      "aria-label": {
        "description": "Accessible label for the drawer close button",
        "type": "string",
        "default": "'Close drawer panel'"
      },
      "className": {
        "description": "Additional classes added to the drawer close button outer <div>.",
        "type": "string",
        "default": "''"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked (Function: () => void)",
        "default": "() => undefined as any"
      }
    },
    "additionalProperties": false
  },
  "DrawerActions": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DrawerActions Props",
    "description": "Props for the DrawerActions component",
    "properties": {
      "children": {
        "description": "Actions to be rendered in the panel head. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the drawer actions button.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "Drawer": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Drawer Props",
    "description": "Props for the Drawer component",
    "properties": {
      "children": {
        "description": "Content rendered in the drawer panel (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Drawer.",
        "type": "string",
        "default": "''"
      },
      "isExpanded": {
        "description": "Indicates if the drawer is expanded",
        "type": "boolean",
        "default": false
      },
      "isInline": {
        "description": "Indicates if the content element and panel element are displayed side by side.",
        "type": "boolean",
        "default": false
      },
      "isStatic": {
        "description": "Indicates if the drawer will always show both content and panel.",
        "type": "boolean",
        "default": false
      },
      "onExpand": {
        "description": "Callback when drawer panel is expanded after waiting 250ms for animation to complete. (Type: (event: KeyboardEvent | React.MouseEvent | React.TransitionEvent) => void)",
        "default": "() => {}"
      },
      "position": {
        "description": "Position of the drawer panel. left and right are deprecated, use start and end instead.",
        "enum": [
          "start",
          "end",
          "bottom",
          "left",
          "right"
        ],
        "default": "'end'"
      }
    },
    "additionalProperties": false
  },
  "Divider": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Divider Props",
    "description": "Props for the Divider component",
    "properties": {
      "className": {
        "description": "Additional classes added to the divider",
        "type": "string"
      },
      "component": {
        "description": "The component type to use",
        "enum": [
          "hr",
          "li",
          "div"
        ],
        "default": "DividerVariant.hr"
      },
      "inset": {
        "description": "Insets at various breakpoints.",
        "enum": [
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl",
          "2xl",
          "insetNone",
          "insetXs",
          "insetSm",
          "insetMd",
          "insetLg",
          "insetXl",
          "inset2xl",
          "inset3xl"
        ]
      },
      "orientation": {
        "description": "Indicates how the divider will display at various breakpoints. Vertical divider must be in a flex layout.",
        "enum": [
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "2xl",
          "vertical",
          "horizontal"
        ]
      }
    },
    "additionalProperties": false
  },
  "DatePicker": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DatePicker Props",
    "description": "The main date picker component.",
    "properties": {
      "appendTo": {
        "description": "The container to append the menu to. Defaults to 'inline'.\nIf your menu is being cut off you can append it to an element higher up the DOM tree.\nSome examples:\nmenuAppendTo={() => document.body};\nmenuAppendTo={document.getElementById('target')}",
        "enum": [
          "inline"
        ],
        "default": "'inline'"
      },
      "aria-label": {
        "description": "Accessible label for the date picker.",
        "type": "string",
        "default": "'Date picker'"
      },
      "buttonAriaLabel": {
        "description": "Accessible label for the button to open the date picker.",
        "type": "string",
        "default": "'Toggle date picker'"
      },
      "cellAriaLabel": {
        "description": "Accessible label for the date cells. (Function: (date: Date) => string)"
      },
      "className": {
        "description": "Additional classes added to the date picker.",
        "type": "string"
      },
      "dateFormat": {
        "description": "How to format the date in the text input. (Function: (date: Date) => string)",
        "default": "(date: Date) =>\n`${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date\n  .getDate()\n  .toString()\n  .padStart(2, '0')}`"
      },
      "dateParse": {
        "description": "How to parse the date in the text input. (Function: (value: string) => Date)",
        "default": "(val: string) => (val.split('-').length === 3 ? new Date(`${val}T00:00:00`) : new Date(undefined))"
      },
      "dayFormat": {
        "description": "How to format days in buttons in table cells. (React component or element)"
      },
      "helperText": {
        "description": "Helper text to display alongside the date picker. Expects a HelperText component. (React component or element)"
      },
      "inlineProps": {
        "description": "Props used to ensure accessibility when displaying the calendar month inline. (Type: CalendarMonthInlineProps)"
      },
      "inputProps": {
        "description": "Additional props for the text input. (Type: TextInputProps)",
        "default": {}
      },
      "invalidFormatText": {
        "description": "Error message to display when the text input contains a non-empty value in an invalid format.",
        "type": "string",
        "default": "'Invalid date'"
      },
      "isDisabled": {
        "description": "Flag indicating the date picker is disabled.",
        "type": "boolean",
        "default": false
      },
      "locale": {
        "description": "If using the default formatters which locale to use. Undefined defaults to current locale.\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation",
        "type": "string",
        "default": "undefined"
      },
      "longWeekdayFormat": {
        "description": "How to format days in header for screen readers. (React component or element)"
      },
      "monthFormat": {
        "description": "How to format months in month select. (React component or element)"
      },
      "nextMonthAriaLabel": {
        "description": "Accessible label for the next month button.",
        "type": "string"
      },
      "onBlur": {
        "description": "Callback called every time the text input loses focus. (Function: (event: any, value: string, date?: Date) => void)",
        "default": "(): any => undefined"
      },
      "onChange": {
        "description": "Callback called every time the text input value changes. (Function: (event: React.FormEvent<HTMLInputElement>, value: string, date?: Date) => void)",
        "default": "(): any => undefined"
      },
      "placeholder": {
        "description": "String to display in the empty text input as a hint for the expected date format.",
        "type": "string",
        "default": "'YYYY-MM-DD'"
      },
      "popoverProps": {
        "description": "Props to pass to the popover that contains the calendar month component. (Type: Partial<Omit<PopoverProps, 'appendTo'>>)"
      },
      "prevMonthAriaLabel": {
        "description": "Accessible label for the previous month button.",
        "type": "string"
      },
      "rangeStart": {
        "description": "Which date to start range styles from. (Type: Date)"
      },
      "requiredDateOptions": {
        "description": "Options to customize the requirement of a date (Type: DatePickerRequiredObject)"
      },
      "style": {
        "description": " (Type: No type info)",
        "default": {}
      },
      "validators": {
        "description": "Functions that returns an error message if a date is invalid. (Type: ((date: Date) => string)[])",
        "type": "array",
        "default": []
      },
      "value": {
        "description": "Value of the text input.",
        "type": "string",
        "default": "''"
      },
      "weekdayFormat": {
        "description": "How to format week days in header. (React component or element)"
      },
      "weekStart": {
        "description": "Day of week that starts the week. 0 is Sunday, 6 is Saturday. (Type: 0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday)"
      },
      "yearInputAriaLabel": {
        "description": "Accessible label for the year input.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "DatePickerRequiredObject": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DatePickerRequiredObject Props",
    "description": "Props that customize the requirement of a date",
    "properties": {
      "emptyDateText": {
        "description": "Error message to display when the text input is empty and the isRequired prop is also passed in.",
        "type": "string"
      },
      "isRequired": {
        "description": "Flag indicating the date is required.",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "DatePickerRef": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DatePickerRef Props",
    "description": "Allows finer control over the calendar's open state when a React ref is passed into the\ndate picker component. Accessed via ref.current[property], e.g. ref.current.toggleCalendar().",
    "properties": {
      "isCalendarOpen": {
        "description": "Current calendar open status.",
        "type": "boolean"
      },
      "setCalendarOpen": {
        "description": "Sets the calendar open status. (Function: (isOpen: boolean) => void)"
      },
      "toggleCalendar": {
        "description": "Toggles the calendar open status. If no parameters are passed, the calendar will simply\ntoggle its open status.\nIf the isOpen parameter is passed, that will set the calendar open status to the value\nof the isOpen parameter.\nIf the eventKey parameter is set to 'Escape', that will invoke the date pickers\nonEscapePress event to toggle the correct control appropriately. (Function: (isOpen?: boolean) => void)"
      }
    },
    "required": [
      "isCalendarOpen",
      "setCalendarOpen",
      "toggleCalendar"
    ],
    "additionalProperties": false
  },
  "DataListToggle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListToggle Props",
    "description": "Props for the DataListToggle component",
    "properties": {
      "aria-controls": {
        "description": "Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them.",
        "type": "string",
        "default": "''"
      },
      "aria-label": {
        "description": "Adds accessible text to the DataList toggle",
        "type": "string",
        "default": "'Details'"
      },
      "aria-labelledby": {
        "description": "Adds accessible text to the DataList toggle",
        "type": "string"
      },
      "buttonProps": {
        "description": "Additional properties spread to the toggle button (Type: ButtonProps)"
      },
      "className": {
        "description": "Additional classes added to the DataList cell",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "Identify the DataList toggle number",
        "type": "string"
      },
      "isExpanded": {
        "description": "Flag to show if the expanded content of the DataList item is visible",
        "type": "boolean",
        "default": false
      },
      "rowid": {
        "description": "Id for the row",
        "type": "string",
        "default": "''"
      }
    },
    "required": [
      "id"
    ],
    "additionalProperties": false
  },
  "DataListText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListText Props",
    "description": "Props for the DataListText component",
    "properties": {
      "children": {
        "description": "Content rendered within the data list text (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the data list text",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Determines which element to render as a data list text. Usually div or span (React component or element)",
        "default": "'span'"
      },
      "onMouseEnter": {
        "description": "callback used to create the tooltip if text is truncated (Function: (event: any) => void)",
        "default": "() => {}"
      },
      "tooltip": {
        "description": "text to display on the tooltip",
        "type": "string",
        "default": "''"
      },
      "wrapModifier": {
        "description": "Determines which wrapping modifier to apply to the data list text",
        "enum": [
          "nowrap",
          "truncate",
          "breakWord"
        ],
        "default": null
      }
    },
    "additionalProperties": false
  },
  "DataListItemRow": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListItemRow Props",
    "description": "Props for the DataListItemRow component",
    "properties": {
      "children": {
        "description": "Content rendered inside the DataListItemRow (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the DataListItemRow",
        "type": "string",
        "default": "''"
      },
      "rowid": {
        "description": "Id for the row item",
        "type": "string",
        "default": "''"
      },
      "wrapModifier": {
        "description": "Determines which wrapping modifier to apply to the DataListItemRow",
        "enum": [
          "nowrap",
          "truncate",
          "breakWord"
        ],
        "default": null
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "DataListItemCells": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListItemCells Props",
    "description": "Props for the DataListItemCells component",
    "properties": {
      "className": {
        "description": "Additional classes added to the DataList item Content Wrapper.  Children should be one ore more <DataListCell> nodes",
        "type": "string",
        "default": "''"
      },
      "dataListCells": {
        "description": "Array of <DataListCell> nodes that are rendered one after the other. (React component or element)"
      },
      "rowid": {
        "description": "Id for the row",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "DataListItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListItem Props",
    "description": "Props for the DataListItem component",
    "properties": {
      "aria-labelledby": {
        "description": "Adds an accessible name to the selectable input if one is rendered",
        "type": "string",
        "default": "''"
      },
      "children": {
        "description": "Content rendered inside the DataList item (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent>",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "Unique id for the DataList item",
        "type": "string",
        "default": "''"
      },
      "isExpanded": {
        "description": "Flag to show if the expanded content of the DataList item is visible",
        "type": "boolean",
        "default": false
      },
      "selectableInputAriaLabel": {
        "description": "Aria label to apply to the selectable input if one is rendered",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "DataListDragButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListDragButton Props",
    "description": "Props for the DataListDragButton component",
    "properties": {
      "className": {
        "description": "Additional classes added to the drag button",
        "type": "string",
        "default": "''"
      },
      "isDisabled": {
        "description": "Flag indicating if drag is disabled for the item",
        "type": "boolean",
        "default": false
      },
      "type": {
        "description": "Sets button type",
        "enum": [
          "button",
          "submit",
          "reset"
        ]
      }
    },
    "additionalProperties": false
  },
  "DataListControl": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListControl Props",
    "description": "Props for the DataListControl component",
    "properties": {
      "children": {
        "description": "Children of the data list control (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the DataList item control",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "DataListContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListContent Props",
    "description": "Props for the DataListContent component",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the DataList toggle",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the DataList item (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the DataList cell",
        "type": "string",
        "default": "''"
      },
      "hasNoPadding": {
        "description": "Flag to remove padding from the expandable content",
        "type": "boolean",
        "default": false
      },
      "id": {
        "description": "Identify the DataListContent item",
        "type": "string",
        "default": "''"
      },
      "isHidden": {
        "description": "Flag to show if the expanded content of the DataList item is visible",
        "type": "boolean",
        "default": false
      },
      "rowid": {
        "description": "Id for the row",
        "type": "string",
        "default": "''"
      }
    },
    "required": [
      "aria-label"
    ],
    "additionalProperties": false
  },
  "DataListCheck": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListCheck Props",
    "description": "Props for the DataListCheck component",
    "properties": {
      "aria-labelledby": {
        "description": "Aria-labelledby of the DataList checkbox",
        "type": "string"
      },
      "checked": {
        "description": "Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\nbut only use one.\nTo make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.",
        "type": "boolean"
      },
      "className": {
        "description": "Additional classes added to the DataList item checkbox",
        "type": "string"
      },
      "defaultChecked": {
        "description": "Flag to set default value of DataList checkbox when it is uncontrolled by React state.\nTo make the DataList checkbox controlled, instead use the isChecked prop, but do not use both.",
        "type": "boolean"
      },
      "id": {
        "description": "Id of the DataList checkbox.",
        "type": "string"
      },
      "isChecked": {
        "description": "Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\nbut only use one.\nTo make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag to show if the DataList checkbox is disabled",
        "type": "boolean",
        "default": false
      },
      "isValid": {
        "description": "Flag to show if the DataList checkbox selection is valid or invalid",
        "type": "boolean",
        "default": true
      },
      "onChange": {
        "description": "A callback for when the DataList checkbox selection changes (Function: (event: React.FormEvent<HTMLInputElement>, checked: boolean) => void)"
      },
      "otherControls": {
        "description": "Flag to indicate if other controls are used in the DataListItem",
        "type": "boolean",
        "default": false
      }
    },
    "required": [
      "aria-labelledby"
    ],
    "additionalProperties": false
  },
  "DataListCell": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListCell Props",
    "description": "Props for the DataListCell component",
    "properties": {
      "alignRight": {
        "description": "Aligns the cell content to the right of its parent.",
        "type": "boolean",
        "default": false
      },
      "children": {
        "description": "Content rendered inside the DataList cell (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the DataList cell",
        "type": "string",
        "default": "''"
      },
      "isFilled": {
        "description": "Enables the body Content to fill the height of the card",
        "type": "boolean",
        "default": true
      },
      "isIcon": {
        "description": "Set to true if the cell content is an Icon",
        "type": "boolean",
        "default": false
      },
      "width": {
        "description": "Width (from 1-5) to the DataList cell (Type: 1 | 2 | 3 | 4 | 5)",
        "default": 1
      },
      "wrapModifier": {
        "description": "Determines which wrapping modifier to apply to the DataListCell",
        "enum": [
          "nowrap",
          "truncate",
          "breakWord"
        ],
        "default": null
      }
    },
    "additionalProperties": false
  },
  "DataListAction": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DataListAction Props",
    "description": "Props for the DataListAction component",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the DataList Action",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "Adds accessible text to the DataList Action",
        "type": "string"
      },
      "children": {
        "description": "Content rendered as DataList Action  (e.g <Button> or <Dropdown>) (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the DataList Action",
        "type": "string"
      },
      "id": {
        "description": "Identify the DataList toggle number",
        "type": "string"
      },
      "visibility": {
        "description": "What breakpoints to hide/show the data list action",
        "enum": [
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "hidden",
          "visible",
          "2xl",
          "hidden",
          "visible"
        ]
      }
    },
    "required": [
      "aria-label",
      "aria-labelledby",
      "children",
      "id"
    ],
    "additionalProperties": false
  },
  "DescriptionListTermHelpTextButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DescriptionListTermHelpTextButton Props",
    "description": "Props for the DescriptionListTermHelpTextButton component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered inside of list term (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the DescriptionListTerm",
        "type": "string"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "DescriptionListTermHelpText": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DescriptionListTermHelpText Props",
    "description": "Props for the DescriptionListTermHelpText component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered inside of list term (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the DescriptionListTermHelpText",
        "type": "string"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "DescriptionListTerm": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DescriptionListTerm Props",
    "description": "Props for the DescriptionListTerm component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered inside of list term (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the DescriptionListTerm",
        "type": "string"
      },
      "icon": {
        "description": "Icon that is rendered inside of list term to the left side of the children (React component or element)"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "DescriptionListGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DescriptionListGroup Props",
    "description": "Props for the DescriptionListGroup component",
    "properties": {
      "children": {
        "description": "Any elements that can be rendered in the list group (Type: any)"
      },
      "className": {
        "description": "Additional classes added to the DescriptionListGroup",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "DescriptionListDescription": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DescriptionListDescription Props",
    "description": "Props for the DescriptionListDescription component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered inside of list description (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the DescriptionListDescription",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "DescriptionList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DescriptionList Props",
    "description": "Props for the DescriptionList component",
    "properties": {
      "autoFitMinModifier": {
        "description": "Sets the minimum column size for the auto-fit (isAutoFit) layout at various breakpoints. (Type: {\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      },
      "children": {
        "description": "Anything that can be rendered inside of the list (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the list",
        "type": "string",
        "default": "''"
      },
      "columnModifier": {
        "description": "Sets the number of columns on the description list at various breakpoints",
        "enum": [
          "1Col",
          "2Col",
          "3Col",
          "1Col",
          "2Col",
          "3Col",
          "1Col",
          "2Col",
          "3Col",
          "1Col",
          "2Col",
          "3Col",
          "1Col",
          "2Col",
          "3Col",
          "2xl",
          "1Col",
          "2Col",
          "3Col"
        ]
      },
      "displaySize": {
        "description": "Sets the display size of the descriptions in the description list.",
        "enum": [
          "default",
          "lg",
          "2xl"
        ],
        "default": "'default'"
      },
      "horizontalTermWidthModifier": {
        "description": "Sets the horizontal description list's term column width at various breakpoints. (Type: {\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      },
      "isAutoColumnWidths": {
        "description": "Sets the description list to format automatically.",
        "type": "boolean"
      },
      "isAutoFit": {
        "description": "Sets the description list to auto fit.",
        "type": "boolean"
      },
      "isCompact": {
        "description": "Sets the description list to compact styling.",
        "type": "boolean"
      },
      "isFillColumns": {
        "description": "Sets the the default placement of description list groups to fill from top to bottom.",
        "type": "boolean"
      },
      "isFluid": {
        "description": "Sets a horizontal description list to have fluid styling.",
        "type": "boolean"
      },
      "isHorizontal": {
        "description": "Sets the description list component term and description pair to a horizontal layout.",
        "type": "boolean",
        "default": false
      },
      "isInlineGrid": {
        "description": "Modifies the description list display to inline-grid.",
        "type": "boolean"
      },
      "orientation": {
        "description": "Indicates how the menu will align at various breakpoints.",
        "enum": [
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "vertical",
          "horizontal",
          "2xl",
          "vertical",
          "horizontal"
        ]
      },
      "termWidth": {
        "description": "Sets the description list's term column width.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "BreakpointModifiers": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "BreakpointModifiers Props",
    "description": "Props for the BreakpointModifiers component",
    "properties": {
      "default": {
        "description": "",
        "type": "string"
      },
      "lg": {
        "description": "",
        "type": "string"
      },
      "md": {
        "description": "",
        "type": "string"
      },
      "Unknown": {
        "description": "",
        "type": "string"
      },
      "xl": {
        "description": "",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ClipboardCopyToggle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ClipboardCopyToggle Props",
    "description": "Props for the ClipboardCopyToggle component",
    "properties": {
      "className": {
        "description": "",
        "type": "string"
      },
      "contentId": {
        "description": "",
        "type": "string"
      },
      "id": {
        "description": "",
        "type": "string"
      },
      "isExpanded": {
        "description": "",
        "type": "boolean",
        "default": false
      },
      "onClick": {
        "description": " (Function: (event: React.MouseEvent) => void)"
      },
      "textId": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "contentId",
      "id",
      "onClick",
      "textId"
    ],
    "additionalProperties": false
  },
  "ClipboardCopyExpanded": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ClipboardCopyExpanded Props",
    "description": "Props for the ClipboardCopyExpanded component",
    "properties": {
      "className": {
        "description": "",
        "type": "string",
        "default": "''"
      },
      "isCode": {
        "description": "",
        "type": "boolean",
        "default": false
      },
      "isReadOnly": {
        "description": "",
        "type": "boolean",
        "default": false
      },
      "onChange": {
        "description": " (Function: (e: React.FormEvent<HTMLDivElement>, text: string) => void)",
        "default": "(): any => undefined"
      }
    },
    "additionalProperties": false
  },
  "ClipboardCopyButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ClipboardCopyButton Props",
    "description": "Props for the ClipboardCopyButton component",
    "properties": {
      "aria-label": {
        "description": "Aria-label for the copy button",
        "type": "string",
        "default": "'Copyable input'"
      },
      "children": {
        "description": "Content of the copy button (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the copy button",
        "type": "string"
      },
      "entryDelay": {
        "description": "Entry delay on the copy button tooltip",
        "type": "number",
        "default": 300
      },
      "exitDelay": {
        "description": "Exit delay on the copy button tooltip",
        "type": "number",
        "default": 0
      },
      "hasNoPadding": {
        "description": "Removes padding from clipboard copy button. This is used for inline-compact variant",
        "type": "boolean",
        "default": false
      },
      "id": {
        "description": "ID of the copy button",
        "type": "string"
      },
      "maxWidth": {
        "description": "Max width of the copy button tooltip",
        "type": "string",
        "default": "'100px'"
      },
      "onClick": {
        "description": "Callback for the copy when the button is clicked (Function: (event: React.MouseEvent) => void)"
      },
      "onTooltipHidden": {
        "description": "Callback when tooltip's hide transition has finished executing (Function: () => void)",
        "default": "() => {}"
      },
      "position": {
        "description": "Position of the copy button tooltip (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')",
        "default": "'top'"
      },
      "textId": {
        "description": "ID of the content that is being copied",
        "type": "string"
      },
      "variant": {
        "description": "Variant of the copy button",
        "enum": [
          "control",
          "plain"
        ],
        "default": "'control'"
      }
    },
    "required": [
      "children",
      "id",
      "onClick",
      "textId"
    ],
    "additionalProperties": false
  },
  "ClipboardCopyAction": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ClipboardCopyAction Props",
    "description": "Props for the ClipboardCopyAction component",
    "properties": {
      "children": {
        "description": "Content rendered inside the clipboard copy action. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the clipboard copy action.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "ClipboardCopy": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ClipboardCopy Props",
    "description": "Props for the ClipboardCopy component",
    "properties": {
      "additionalActions": {
        "description": "Additional actions for inline clipboard copy. Should be wrapped with ClipboardCopyAction. (React component or element)",
        "default": null
      },
      "children": {
        "description": "The text which is copied. (Type: string | string[])"
      },
      "className": {
        "description": "Additional classes added to the clipboard copy container.",
        "type": "string"
      },
      "clickTip": {
        "description": "Tooltip message to display when clicking the copy button",
        "type": "string",
        "default": "'Successfully copied to clipboard!'"
      },
      "entryDelay": {
        "description": "Delay in ms before the tooltip appears.",
        "type": "number",
        "default": 300
      },
      "exitDelay": {
        "description": "Delay in ms before the tooltip disappears.",
        "type": "number",
        "default": 1500
      },
      "hoverTip": {
        "description": "Tooltip message to display when hover the copy button",
        "type": "string",
        "default": "'Copy to clipboard'"
      },
      "isBlock": {
        "description": "Flag to determine if inline clipboard copy should be block styling",
        "type": "boolean"
      },
      "isCode": {
        "description": "Flag to determine if clipboard copy content includes code",
        "type": "boolean",
        "default": false
      },
      "isExpanded": {
        "description": "Flag to determine if clipboard copy is in the expanded state initially",
        "type": "boolean",
        "default": false
      },
      "isReadOnly": {
        "description": "Flag to show if the input is read only.",
        "type": "boolean",
        "default": false
      },
      "maxWidth": {
        "description": "Maximum width of the tooltip (default 150px).",
        "type": "string",
        "default": "'150px'"
      },
      "onChange": {
        "description": "A function that is triggered on changing the text. (Function: (event: React.FormEvent, text?: string) => void)",
        "default": "(): any => undefined"
      },
      "onCopy": {
        "description": "A function that is triggered on clicking the copy button. This will replace the existing clipboard copy functionality entirely. (React component or element)",
        "default": "(_event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => {\n  try {\n    navigator.clipboard.writeText(text.toString());\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      \"Clipboard API not found, this copy function will not work. This is likely because you're using an\",\n      \"unsupported browser or you're not using HTTPS. \\n\\nIf you're a developer building an application which needs\",\n      \"to support copying to the clipboard without the clipboard API, you'll have to create your own copy\",\n      'function and pass it to the ClipboardCopy component as the onCopy prop. For more information see',\n      'https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard'\n    );\n\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n}"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "position": {
        "description": "Copy button tooltip position. (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')",
        "default": "TooltipPosition.top"
      },
      "textAriaLabel": {
        "description": "Aria-label to use on the TextInput.",
        "type": "string",
        "default": "'Copyable input'"
      },
      "toggleAriaLabel": {
        "description": "Aria-label to use on the ClipboardCopyToggle.",
        "type": "string",
        "default": "'Show content'"
      },
      "truncation": {
        "description": "Enables and customizes truncation for an inline-compact ClipboardCopy.",
        "enum": [
          "content"
        ],
        "default": false
      },
      "variant": {
        "description": "Adds Clipboard Copy variant styles.",
        "enum": [
          "inline",
          "expansion",
          "inline-compact"
        ],
        "default": "'inline'"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "ClipboardCopyState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ClipboardCopyState Props",
    "description": "Props for the ClipboardCopyState component",
    "properties": {
      "copied": {
        "description": "",
        "type": "boolean"
      },
      "expanded": {
        "description": "",
        "type": "boolean"
      },
      "text": {
        "description": "",
        "type": "string"
      },
      "textWhenExpanded": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "copied",
      "expanded",
      "text",
      "textWhenExpanded"
    ],
    "additionalProperties": false
  },
  "CodeBlockCode": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CodeBlockCode Props",
    "description": "Props for the CodeBlockCode component",
    "properties": {
      "children": {
        "description": "Code rendered inside the code block (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes passed to the code block pre wrapper",
        "type": "string"
      },
      "codeClassName": {
        "description": "Additional classes passed to the code block code",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "CodeBlockAction": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CodeBlockAction Props",
    "description": "Props for the CodeBlockAction component",
    "properties": {
      "children": {
        "description": "Content rendered inside the code block action (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes passed to the code block action",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "CodeBlock": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CodeBlock Props",
    "description": "Props for the CodeBlock component",
    "properties": {
      "actions": {
        "description": "Actions in the code block header. Should be wrapped with CodeBlockAction. (React component or element)",
        "default": null
      },
      "children": {
        "description": "Content rendered inside the code block (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes passed to the code block wrapper",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Checkbox": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Checkbox Props",
    "description": "Props for the Checkbox component",
    "properties": {
      "aria-label": {
        "description": "Aria-label of the checkbox.",
        "type": "string"
      },
      "body": {
        "description": "Body text of the checkbox (React component or element)"
      },
      "checked": {
        "description": "",
        "type": "boolean"
      },
      "className": {
        "description": "Additional classes added to the checkbox wrapper. This wrapper will be div element by default. It will be a label element if\nisLabelWrapped is true, or it can be overridden by any element specified in the component prop.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the checkbox wrapper component to render. Defaults to \"div\". If set to \"label\", behaves the same as if isLabelWrapped prop was specified. (Type: React.ElementType)"
      },
      "description": {
        "description": "Description text of the checkbox. (React component or element)"
      },
      "id": {
        "description": "Id of the checkbox.",
        "type": "string"
      },
      "inputClassName": {
        "description": "Additional classes added to the checkbox input.",
        "type": "string"
      },
      "isChecked": {
        "description": "Flag to show if the checkbox is checked. If null, the checkbox will be indeterminate (partially checked). (Type: boolean | null)",
        "default": false
      },
      "isDisabled": {
        "description": "Flag to show if the checkbox is disabled.",
        "type": "boolean",
        "default": false
      },
      "isLabelWrapped": {
        "description": "Flag to indicate whether the checkbox wrapper element is a <label> element for the checkbox input. Will not apply if a component prop (with a value other than a \"label\") is specified.",
        "type": "boolean",
        "default": false
      },
      "isRequired": {
        "description": "Flag to show if the checkbox is required.",
        "type": "boolean",
        "default": false
      },
      "isValid": {
        "description": "Flag to show if the checkbox selection is valid or invalid.",
        "type": "boolean",
        "default": true
      },
      "label": {
        "description": "Label text of the checkbox. (React component or element)"
      },
      "labelPosition": {
        "description": "Sets the position of the label. Defaults to 'end' (after the checkbox input).",
        "enum": [
          "start",
          "end"
        ]
      },
      "onChange": {
        "description": "A callback for when the checkbox selection changes. (Function: (event: React.FormEvent<HTMLInputElement>, checked: boolean) => void)",
        "default": "() => {}"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      }
    },
    "required": [
      "id"
    ],
    "additionalProperties": false
  },
  "CheckboxState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CheckboxState Props",
    "description": "Props for the CheckboxState component",
    "properties": {
      "ouiaStateId": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "ouiaStateId"
    ],
    "additionalProperties": false
  },
  "Content": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Content Props",
    "description": "Props for the Content component",
    "properties": {
      "children": {
        "description": "Children rendered within the Content. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Content.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "The content component. If none provided, it will be a 'div' and styling will be applied to all its child components. (Type: | 'h1'\n| 'h2'\n| 'h3'\n| 'h4'\n| 'h5'\n| 'h6'\n| 'p'\n| 'a'\n| 'small'\n| 'blockquote'\n| 'pre'\n| 'hr'\n| 'ul'\n| 'ol'\n| 'dl'\n| 'li'\n| 'dt'\n| 'dd')"
      },
      "isEditorial": {
        "description": "Flag to indicate the content has editorial styling. This styling increases the font size of body text and small text by one tier, increasing body text to large and small text to the previous body text size.",
        "type": "boolean",
        "default": false
      },
      "isPlainList": {
        "description": "Modifies the list (ul, ol and dl components) to have plain styling.",
        "type": "boolean",
        "default": false
      },
      "isVisitedLink": {
        "description": "Flag to indicate the link (or all links within the content) has visited styles applied if the browser determines the link has been visited.",
        "type": "boolean",
        "default": false
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      }
    },
    "additionalProperties": false
  },
  "CalendarMonth": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CalendarMonth Props",
    "description": "The main calendar month component.",
    "properties": {
      "cellAriaLabel": {
        "description": "Accessible label for the date cells. (Function: (date: Date) => string)"
      },
      "className": {
        "description": "Additional classes to add to the outer div of the calendar month.",
        "type": "string"
      },
      "date": {
        "description": "Month/year to base other dates around. (Type: Date)"
      },
      "dayFormat": {
        "description": "How to format days in buttons in table cells. (React component or element)",
        "default": "(date) => date.getDate()"
      },
      "inlineProps": {
        "description": "Props used to ensure accessibility when displaying the calendar month inline. (Type: CalendarMonthInlineProps)"
      },
      "isDateFocused": {
        "description": "Flag to set browser focus on the passed date. *",
        "type": "boolean",
        "default": false
      },
      "locale": {
        "description": "If using the default formatters which locale to use. Undefined defaults to current locale.\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation",
        "type": "string",
        "default": "undefined"
      },
      "longWeekdayFormat": {
        "description": "How to format days in header for screen readers. (React component or element)",
        "default": "(date) => date.toLocaleDateString(locale, { weekday: 'long' })"
      },
      "monthFormat": {
        "description": "How to format months in month select. (React component or element)",
        "default": "(date) => date.toLocaleDateString(locale, { month: 'long' })"
      },
      "nextMonthAriaLabel": {
        "description": "Accessible label for the next month button.",
        "type": "string",
        "default": "'Next month'"
      },
      "onChange": {
        "description": "Callback when date is selected. (Function: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void)",
        "default": "() => {}"
      },
      "onMonthChange": {
        "description": "Callback when month or year is changed. (Type: (\n  event?: React.MouseEvent | React.ChangeEvent | React.FormEvent<HTMLInputElement>,\n  newDate?: Date\n) => void)",
        "default": "() => {}"
      },
      "prevMonthAriaLabel": {
        "description": "Accessible label for the previous month button.",
        "type": "string",
        "default": "'Previous month'"
      },
      "rangeStart": {
        "description": "Which date to start range styles from. (Type: Date)"
      },
      "validators": {
        "description": "Functions that returns if a date is valid and selectable. (Type: ((date: Date) => boolean)[])",
        "type": "array",
        "default": "[() => true]"
      },
      "weekdayFormat": {
        "description": "How to format week days in header. (React component or element)",
        "default": "(date) => date.toLocaleDateString(locale, { weekday: 'narrow' })"
      },
      "weekStart": {
        "description": "Day of week that starts the week. 0 is Sunday, 6 is Saturday. (Type: 0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday)",
        "default": 0
      },
      "yearInputAriaLabel": {
        "description": "Accessible label for the year input.",
        "type": "string",
        "default": "'Select year'"
      }
    },
    "additionalProperties": false
  },
  "CalendarFormat": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CalendarFormat Props",
    "description": "Additional properties that extend from and can be passed to the main component. These\nproperties allow customizing the calendar formatting and aria-labels.",
    "properties": {
      "cellAriaLabel": {
        "description": "Accessible label for the date cells. (Function: (date: Date) => string)"
      },
      "dayFormat": {
        "description": "How to format days in buttons in table cells. (React component or element)"
      },
      "inlineProps": {
        "description": "Props used to ensure accessibility when displaying the calendar month inline. (Type: CalendarMonthInlineProps)"
      },
      "locale": {
        "description": "If using the default formatters which locale to use. Undefined defaults to current locale.\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation",
        "type": "string"
      },
      "longWeekdayFormat": {
        "description": "How to format days in header for screen readers. (React component or element)"
      },
      "monthFormat": {
        "description": "How to format months in month select. (React component or element)"
      },
      "nextMonthAriaLabel": {
        "description": "Accessible label for the next month button.",
        "type": "string"
      },
      "prevMonthAriaLabel": {
        "description": "Accessible label for the previous month button.",
        "type": "string"
      },
      "rangeStart": {
        "description": "Which date to start range styles from. (Type: Date)"
      },
      "weekdayFormat": {
        "description": "How to format week days in header. (React component or element)"
      },
      "weekStart": {
        "description": "Day of week that starts the week. 0 is Sunday, 6 is Saturday. (Type: 0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday)"
      },
      "yearInputAriaLabel": {
        "description": "Accessible label for the year input.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Button": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Button Props",
    "description": "Props for the Button component",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the button.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the button (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the button",
        "type": "string"
      },
      "component": {
        "description": "Sets the base component to render. defaults to button (Type: React.ElementType<any> | React.ComponentType<any>)"
      },
      "countOptions": {
        "description": "Adds count number to button (Type: BadgeCountObject)"
      },
      "hasNoPadding": {
        "description": "Applies no padding on a plain button variant. Use when plain button is placed inline with text",
        "type": "boolean"
      },
      "icon": {
        "description": "Icon for the button. (React component or element)"
      },
      "iconPosition": {
        "description": "Sets position of the icon. Note: \"left\" and \"right\" are deprecated. Use \"start\" and \"end\" instead",
        "enum": [
          "start",
          "end",
          "left",
          "right"
        ]
      },
      "inoperableEvents": {
        "description": "Events to prevent when the button is in an aria-disabled state (Type: string[])",
        "type": "array"
      },
      "isAriaDisabled": {
        "description": "Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute",
        "type": "boolean"
      },
      "isBlock": {
        "description": "Adds block styling to button",
        "type": "boolean"
      },
      "isClicked": {
        "description": "Adds clicked styling to button.",
        "type": "boolean"
      },
      "isDanger": {
        "description": "Adds danger styling to secondary or link button variants",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Adds disabled styling and disables the button using the disabled html attribute",
        "type": "boolean"
      },
      "isInline": {
        "description": "Adds inline styling to a link button",
        "type": "boolean"
      },
      "isLoading": {
        "description": "Adds progress styling to button",
        "type": "boolean"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "size": {
        "description": "Adds styling which affects the size of the button",
        "enum": [
          "default",
          "sm",
          "lg"
        ]
      },
      "spinnerAriaLabel": {
        "description": "Accessible label for the spinner to describe what is loading",
        "type": "string"
      },
      "spinnerAriaLabelledBy": {
        "description": "Id of element which describes what is being loaded",
        "type": "string"
      },
      "spinnerAriaValueText": {
        "description": "Text describing that current loading status or progress",
        "type": "string"
      },
      "state": {
        "description": "Sets state of the stateful button variant. Default is \"unread\"",
        "enum": [
          "read",
          "unread",
          "attention"
        ]
      },
      "tabIndex": {
        "description": "Sets the button tabindex.",
        "type": "number"
      },
      "type": {
        "description": "Sets button type",
        "enum": [
          "button",
          "submit",
          "reset"
        ]
      },
      "variant": {
        "description": "Adds button variant styles",
        "enum": [
          "primary",
          "secondary",
          "tertiary",
          "danger",
          "warning",
          "link",
          "plain",
          "control",
          "stateful"
        ]
      }
    },
    "additionalProperties": false
  },
  "BadgeCountObject": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "BadgeCountObject Props",
    "description": "Props for the BadgeCountObject component",
    "properties": {
      "className": {
        "description": "Additional classes added to the badge count",
        "type": "string"
      },
      "count": {
        "description": "Adds count number right of button",
        "type": "number"
      },
      "isRead": {
        "description": "Adds styling to the badge to indicate it has been read",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "CardTitle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardTitle Props",
    "description": "Props for the CardTitle component",
    "properties": {
      "children": {
        "description": "Content rendered inside the CardTitle (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the CardTitle",
        "type": "string"
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: React.JSX.IntrinsicElements)",
        "default": "'div'"
      }
    },
    "additionalProperties": false
  },
  "CardSelectableActions": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardSelectableActions Props",
    "description": "Props for the CardSelectableActions component",
    "properties": {
      "children": {
        "description": "Content rendered inside the card action (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the action",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "CardHeaderMain": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardHeaderMain Props",
    "description": "Props for the CardHeaderMain component",
    "properties": {
      "children": {
        "description": "Content rendered inside the Card Head Main (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Card Head Main",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "CardHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardHeader Props",
    "description": "Props for the CardHeader component",
    "properties": {
      "actions": {
        "description": "Actions of the card header (Type: CardHeaderActionsObject)"
      },
      "children": {
        "description": "Content rendered inside the card header (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the card header",
        "type": "string"
      },
      "hasWrap": {
        "description": "Flag indicating that header wrapping is enabled",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the card header.",
        "type": "string"
      },
      "isToggleRightAligned": {
        "description": "Whether to right-align expandable toggle button",
        "type": "boolean"
      },
      "onExpand": {
        "description": "Callback expandable card (Function: (event: React.MouseEvent, id: string) => void)"
      },
      "selectableActions": {
        "description": "Selectable actions of the card header (Type: CardHeaderSelectableActionsObject)"
      },
      "toggleButtonProps": {
        "description": "Additional props for expandable toggle button (Type: any)"
      }
    },
    "additionalProperties": false
  },
  "CardHeaderActionsObject": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardHeaderActionsObject Props",
    "description": "Props for the CardHeaderActionsObject component",
    "properties": {
      "actions": {
        "description": "Actions of the card header (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the actions wrapper",
        "type": "string"
      },
      "hasNoOffset": {
        "description": "Flag indicating that the actions have no offset",
        "type": "boolean"
      }
    },
    "required": [
      "actions"
    ],
    "additionalProperties": false
  },
  "CardHeaderSelectableActionsObject": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardHeaderSelectableActionsObject Props",
    "description": "Props for the CardHeaderSelectableActionsObject component",
    "properties": {
      "className": {
        "description": "Additional classes added to the selectable actions wrapper",
        "type": "string"
      },
      "hasNoOffset": {
        "description": "Flag indicating that the actions have no offset",
        "type": "boolean"
      },
      "isChecked": {
        "description": "",
        "type": "boolean"
      },
      "isExternalLink": {
        "description": "Flag to indicate whether a clickable-only card's link should open in a new tab/window.",
        "type": "boolean"
      },
      "isHidden": {
        "description": "Flag indicating the action is hidden",
        "type": "boolean"
      },
      "name": {
        "description": "Name for the input element of a selectable card.",
        "type": "string"
      },
      "onChange": {
        "description": "Callback for when a selectable card input changes (Function: (event: React.FormEvent<HTMLInputElement>, checked: boolean) => void)"
      },
      "onClickAction": {
        "description": "Action to call when a clickable-only card is clicked. This cannot be combined with the to prop. (Function: (event: React.MouseEvent) => void)"
      },
      "selectableActionAriaLabel": {
        "description": "Adds an accessible name to the input of a selectable card or clickable button/anchor of a clickable-only card.\nThis or selectableActionAriaLabelledby is required for clickable-only cards.",
        "type": "string"
      },
      "selectableActionAriaLabelledby": {
        "description": "A single or list of space-delimited ID's that provide an accessible name to the input of a selectable card\nor clickable button/anchor of a clickable-only card. This or selectableActionAriaLabelledby is required\nfor clickable-only cards.",
        "type": "string"
      },
      "selectableActionId": {
        "description": "Custom ID passed to the selectable card's input or a clickable-only card's button/anchor.\nIf omitted, a random unique ID will be assigned to a selectable card's input.",
        "type": "string"
      },
      "selectableActionProps": {
        "description": "Additional props spread to a selectable card input or clickable-only card's button/anchor. (Type: any)"
      },
      "to": {
        "description": "Link to navigate to when a clickable-only card is clicked. This cannot be combined with the onClickAction prop.",
        "type": "string"
      },
      "variant": {
        "description": "Determines the type of input to be used for a selectable card.",
        "enum": [
          "single",
          "multiple"
        ]
      }
    },
    "additionalProperties": false
  },
  "CardFooter": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardFooter Props",
    "description": "Props for the CardFooter component",
    "properties": {
      "children": {
        "description": "Content rendered inside the Card Footer (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Footer",
        "type": "string"
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: JSX.IntrinsicElements)",
        "default": "'div'"
      }
    },
    "additionalProperties": false
  },
  "CardExpandableContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardExpandableContent Props",
    "description": "Props for the CardExpandableContent component",
    "properties": {
      "children": {
        "description": "Content rendered inside the Card Body (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Card Body",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "CardBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardBody Props",
    "description": "Props for the CardBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the Card Body (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Card Body",
        "type": "string"
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: JSX.IntrinsicElements)",
        "default": "'div'"
      },
      "isFilled": {
        "description": "Enables the body Content to fill the height of the card",
        "type": "boolean",
        "default": true
      }
    },
    "additionalProperties": false
  },
  "CardActions": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "CardActions Props",
    "description": "Props for the CardActions component",
    "properties": {
      "children": {
        "description": "Content rendered inside the card action (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the action",
        "type": "string"
      },
      "hasNoOffset": {
        "description": "Flag indicating that the actions have no offset",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "Card": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Card Props",
    "description": "Props for the Card component",
    "properties": {
      "children": {
        "description": "Content rendered inside the Card (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the Card",
        "type": "string"
      },
      "component": {
        "description": "Sets the base component to render. defaults to div (Type: React.JSX.IntrinsicElements)",
        "default": "'div'"
      },
      "id": {
        "description": "ID of the Card. Also passed back in the CardHeader onExpand callback.",
        "type": "string",
        "default": "''"
      },
      "isClickable": {
        "description": "Flag indicating that the card is clickable and contains some action that triggers on click.",
        "type": "boolean",
        "default": false
      },
      "isClicked": {
        "description": "Flag indicating whether a card that is either only clickable or that is both clickable and selectable\nis currently clicked and has clicked styling.",
        "type": "boolean",
        "default": false
      },
      "isCompact": {
        "description": "Modifies the card to include compact styling. Should not be used with isLarge.",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Flag indicating that a clickable or selectable card is disabled.",
        "type": "boolean",
        "default": false
      },
      "isExpanded": {
        "description": "Flag indicating if a card is expanded. Modifies the card to be expandable.",
        "type": "boolean",
        "default": false
      },
      "isFullHeight": {
        "description": "Cause component to consume the available height of its container",
        "type": "boolean",
        "default": false
      },
      "isLarge": {
        "description": "Modifies the card to be large. Should not be used with isCompact.",
        "type": "boolean",
        "default": false
      },
      "isPlain": {
        "description": "Modifies the card to include plain styling; this removes border and background",
        "type": "boolean",
        "default": false
      },
      "isSelectable": {
        "description": "Flag indicating that the card is selectable.",
        "type": "boolean",
        "default": false
      },
      "isSelected": {
        "description": "Flag indicating whether a card that is either selectable only or both clickable and selectable is\ncurrently selected and has selected styling.",
        "type": "boolean",
        "default": false
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "variant": {
        "description": "Card background color variant",
        "enum": [
          "default",
          "secondary"
        ],
        "default": "'default'"
      }
    },
    "additionalProperties": false
  },
  "Brand": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Brand Props",
    "description": "Props for the Brand component",
    "properties": {
      "alt": {
        "description": "Attribute that specifies the alt text of a <img> Brand. For a <picture> Brand this specifies the fallback <img> alt text.",
        "type": "string"
      },
      "children": {
        "description": "Transforms the Brand into a <picture> element from an <img> element. Container for <source> child elements. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the either type of Brand.",
        "type": "string",
        "default": "''"
      },
      "heights": {
        "description": "Heights at various breakpoints for a <picture> Brand. (Type: {\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      },
      "src": {
        "description": "Attribute that specifies the URL of a <img> Brand. For a <picture> Brand this specifies the fallback <img> URL.",
        "type": "string",
        "default": "''"
      },
      "widths": {
        "description": "Widths at various breakpoints for a <picture> Brand. (Type: {\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n})"
      }
    },
    "required": [
      "alt"
    ],
    "additionalProperties": false
  },
  "BreadcrumbItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "BreadcrumbItem Props",
    "description": "Props for the BreadcrumbItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the breadcrumb item. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the breadcrumb item.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. Defaults to <a> (Type: React.ElementType)",
        "default": "'a'"
      },
      "isActive": {
        "description": "Flag indicating whether the item is active.",
        "type": "boolean",
        "default": false
      },
      "isDropdown": {
        "description": "Flag indicating whether the item contains a dropdown.",
        "type": "boolean",
        "default": false
      },
      "render": {
        "description": "A render function to render the component inside the breadcrumb item. (React component or element)",
        "default": "undefined"
      },
      "showDivider": {
        "description": "Internal prop set by Breadcrumb on all but the first crumb",
        "type": "boolean"
      },
      "target": {
        "description": "Target for breadcrumb link.",
        "type": "string",
        "default": "undefined"
      },
      "to": {
        "description": "HREF for breadcrumb link.",
        "type": "string",
        "default": "undefined"
      }
    },
    "additionalProperties": false
  },
  "BreadcrumbItemRenderArgs": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "BreadcrumbItemRenderArgs Props",
    "description": "Props for the BreadcrumbItemRenderArgs component",
    "properties": {
      "ariaCurrent": {
        "description": "",
        "enum": [
          "page"
        ]
      },
      "className": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "ariaCurrent",
      "className"
    ],
    "additionalProperties": false
  },
  "BreadcrumbHeading": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "BreadcrumbHeading Props",
    "description": "Props for the BreadcrumbHeading component",
    "properties": {
      "children": {
        "description": "Content rendered inside the breadcrumb title. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the breadcrumb item.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. Defaults to <a> (React component or element)",
        "default": "'a'"
      },
      "showDivider": {
        "description": "Internal prop set by Breadcrumb on all but the first crumb",
        "type": "boolean"
      },
      "target": {
        "description": "Target for breadcrumb link.",
        "type": "string",
        "default": "undefined"
      },
      "to": {
        "description": "HREF for breadcrumb link.",
        "type": "string",
        "default": "undefined"
      }
    },
    "additionalProperties": false
  },
  "Breadcrumb": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Breadcrumb Props",
    "description": "Props for the Breadcrumb component",
    "properties": {
      "aria-label": {
        "description": "Aria label added to the breadcrumb nav.",
        "type": "string",
        "default": "'Breadcrumb'"
      },
      "children": {
        "description": "Children nodes be rendered to the BreadCrumb. Should be of type BreadCrumbItem. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the breadcrumb nav.",
        "type": "string",
        "default": "''"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      }
    },
    "additionalProperties": false
  },
  "Badge": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Badge Props",
    "description": "Props for the Badge component",
    "properties": {
      "children": {
        "description": "content rendered inside the Badge (React component or element)",
        "default": "''"
      },
      "className": {
        "description": "additional classes added to the Badge",
        "type": "string",
        "default": "''"
      },
      "isDisabled": {
        "description": "Adds styling to the badge to indicate it is disabled",
        "type": "boolean",
        "default": false
      },
      "isRead": {
        "description": "Adds styling to the badge to indicate it has been read",
        "type": "boolean",
        "default": false
      },
      "screenReaderText": {
        "description": "Text announced by screen readers to indicate the current content/status of the badge.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Banner": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Banner Props",
    "description": "Props for the Banner component",
    "properties": {
      "children": {
        "description": "Content rendered inside the banner. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the banner.",
        "type": "string"
      },
      "color": {
        "description": "Color options for the banner, will be overwritten by any applied using the status prop.",
        "enum": [
          "red",
          "orangered",
          "orange",
          "yellow",
          "green",
          "teal",
          "blue",
          "purple"
        ]
      },
      "isSticky": {
        "description": "If set to true, the banner sticks to the top of its container",
        "type": "boolean",
        "default": false
      },
      "screenReaderText": {
        "description": "Text announced by screen readers to indicate the type of banner. This prop should only\nbe passed in when the banner conveys status/severity.",
        "type": "string"
      },
      "status": {
        "description": "Status style options for the banner, will overwrite any color applied using the color prop.",
        "enum": [
          "success",
          "warning",
          "danger",
          "info",
          "custom"
        ]
      }
    },
    "additionalProperties": false
  },
  "StatusBanner": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "StatusBanner Props",
    "description": "Props for the StatusBanner component",
    "properties": {
      "color": {
        "description": " (Type: never)"
      },
      "status": {
        "description": " (Type: BannerStatus)"
      }
    },
    "additionalProperties": false
  },
  "NonStatusBanner": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "NonStatusBanner Props",
    "description": "Props for the NonStatusBanner component",
    "properties": {
      "color": {
        "description": " (Type: BannerColor)"
      },
      "status": {
        "description": " (Type: never)"
      }
    },
    "additionalProperties": false
  },
  "BannerColor": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "BannerColor Props",
    "description": "Props for the BannerColor component",
    "properties": {},
    "additionalProperties": false
  },
  "BannerStatus": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "BannerStatus Props",
    "description": "Props for the BannerStatus component",
    "properties": {},
    "additionalProperties": false
  },
  "BackgroundImage": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "BackgroundImage Props",
    "description": "Props for the BackgroundImage component",
    "properties": {
      "className": {
        "description": "Additional classes added to the background image.",
        "type": "string"
      },
      "src": {
        "description": "The URL or file path of the image for the background",
        "type": "string"
      }
    },
    "required": [
      "src"
    ],
    "additionalProperties": false
  },
  "Backdrop": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Backdrop Props",
    "description": "Props for the Backdrop component",
    "properties": {
      "children": {
        "description": "Content rendered inside the backdrop (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the backdrop",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "Avatar": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Avatar Props",
    "description": "Props for the Avatar component",
    "properties": {
      "alt": {
        "description": "Attribute that specifies the alternate text of the image for the avatar.",
        "type": "string"
      },
      "className": {
        "description": "Additional classes added to the avatar.",
        "type": "string"
      },
      "isBordered": {
        "description": "Flag to indicate the avatar should have a border.",
        "type": "boolean"
      },
      "size": {
        "description": "Size variant of avatar.",
        "enum": [
          "sm",
          "md",
          "lg",
          "xl"
        ]
      },
      "src": {
        "description": "Attribute that specifies the URL of the image for the avatar.",
        "type": "string",
        "default": "''"
      }
    },
    "required": [
      "alt"
    ],
    "additionalProperties": false
  },
  "BackToTop": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "BackToTop Props",
    "description": "Props for the BackToTop component",
    "properties": {
      "className": {
        "description": "Additional classes added to the back to top.",
        "type": "string"
      },
      "isAlwaysVisible": {
        "description": "Flag to always show back to top button, defaults to false.",
        "type": "boolean"
      },
      "scrollableSelector": {
        "description": "Selector for the scrollable element to spy on. Not passing a selector defaults to spying on window scroll events.",
        "type": "string"
      },
      "title": {
        "description": "Title to appear in back to top button.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "AlertToggleExpandButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AlertToggleExpandButton Props",
    "description": "Props for the AlertToggleExpandButton component",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the button.",
        "type": "string",
        "default": "''"
      },
      "children": {
        "description": "Content rendered inside the button (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the button",
        "type": "string"
      },
      "component": {
        "description": "Sets the base component to render. defaults to button (Type: React.ElementType<any> | React.ComponentType<any>)"
      },
      "countOptions": {
        "description": "Adds count number to button (Type: BadgeCountObject)"
      },
      "hasNoPadding": {
        "description": "Applies no padding on a plain button variant. Use when plain button is placed inline with text",
        "type": "boolean"
      },
      "icon": {
        "description": "Icon for the button. (React component or element)"
      },
      "iconPosition": {
        "description": "Sets position of the icon. Note: \"left\" and \"right\" are deprecated. Use \"start\" and \"end\" instead",
        "enum": [
          "start",
          "end",
          "left",
          "right"
        ]
      },
      "inoperableEvents": {
        "description": "Events to prevent when the button is in an aria-disabled state (Type: string[])",
        "type": "array"
      },
      "isAriaDisabled": {
        "description": "Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute",
        "type": "boolean"
      },
      "isBlock": {
        "description": "Adds block styling to button",
        "type": "boolean"
      },
      "isClicked": {
        "description": "Adds clicked styling to button.",
        "type": "boolean"
      },
      "isDanger": {
        "description": "Adds danger styling to secondary or link button variants",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Adds disabled styling and disables the button using the disabled html attribute",
        "type": "boolean"
      },
      "isExpanded": {
        "description": "Flag to indicate if the content is expanded.",
        "type": "boolean",
        "default": false
      },
      "isInline": {
        "description": "Adds inline styling to a link button",
        "type": "boolean"
      },
      "isLoading": {
        "description": "Adds progress styling to button",
        "type": "boolean"
      },
      "onToggleExpand": {
        "description": "A callback for when the toggle button is clicked. (Function: () => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "size": {
        "description": "Adds styling which affects the size of the button",
        "enum": [
          "default",
          "sm",
          "lg"
        ]
      },
      "spinnerAriaLabel": {
        "description": "Accessible label for the spinner to describe what is loading",
        "type": "string"
      },
      "spinnerAriaLabelledBy": {
        "description": "Id of element which describes what is being loaded",
        "type": "string"
      },
      "spinnerAriaValueText": {
        "description": "Text describing that current loading status or progress",
        "type": "string"
      },
      "state": {
        "description": "Sets state of the stateful button variant. Default is \"unread\"",
        "enum": [
          "read",
          "unread",
          "attention"
        ]
      },
      "tabIndex": {
        "description": "Sets the button tabindex.",
        "type": "number"
      },
      "type": {
        "description": "Sets button type",
        "enum": [
          "button",
          "submit",
          "reset"
        ]
      },
      "variant": {
        "description": "Adds button variant styles",
        "enum": [
          "primary",
          "secondary",
          "tertiary",
          "danger",
          "warning",
          "link",
          "plain",
          "control",
          "stateful"
        ]
      },
      "variantLabel": {
        "description": "Variant label for the toggle button.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "AlertIcon": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AlertIcon Props",
    "description": "Props for the AlertIcon component",
    "properties": {
      "className": {
        "description": "Additional class names added to the alert icon.",
        "type": "string",
        "default": "''"
      },
      "customIcon": {
        "description": "A custom icon. If not set the icon is set according to the variant. (React component or element)"
      },
      "variant": {
        "description": "Variant of the alert icon.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ]
      }
    },
    "required": [
      "variant"
    ],
    "additionalProperties": false
  },
  "AlertGroupInline": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AlertGroupInline Props",
    "description": "Props for the AlertGroupInline component",
    "properties": {
      "appendTo": {
        "description": "Determine where the alert is appended to (Type: HTMLElement | (() => HTMLElement))"
      },
      "aria-label": {
        "description": "Adds an accessible label to the alert group.",
        "type": "string"
      },
      "children": {
        "description": "Alerts to be rendered in the AlertGroup (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the AlertGroup",
        "type": "string"
      },
      "hasAnimations": {
        "description": "Flag to indicate whether Alerts are animated upon rendering and being dismissed. This is intended\nto remain false for testing purposes only.",
        "type": "boolean"
      },
      "isLiveRegion": {
        "description": "Turns the container into a live region so that changes to content within the AlertGroup, such as appending an Alert, are reliably announced to assistive technology.",
        "type": "boolean"
      },
      "isToast": {
        "description": "Toast notifications are positioned at the top right corner of the viewport",
        "type": "boolean"
      },
      "onOverflowClick": {
        "description": "Function to call if user clicks on overflow message (Function: () => void)"
      },
      "overflowMessage": {
        "description": "Custom text to show for the overflow message",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "AlertGroupContext": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AlertGroupContext Props",
    "description": "Props for the AlertGroupContext component",
    "properties": {
      "hasAnimations": {
        "description": "",
        "type": "boolean"
      },
      "updateTransitionEnd": {
        "description": " (Function: (onTransitionEnd: () => void) => void)"
      }
    },
    "additionalProperties": false
  },
  "AlertGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AlertGroup Props",
    "description": "Props for the AlertGroup component",
    "properties": {
      "appendTo": {
        "description": "Determine where the alert is appended to (Type: HTMLElement | (() => HTMLElement))"
      },
      "aria-label": {
        "description": "Adds an accessible label to the alert group.",
        "type": "string"
      },
      "children": {
        "description": "Alerts to be rendered in the AlertGroup (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the AlertGroup",
        "type": "string"
      },
      "hasAnimations": {
        "description": "Flag to indicate whether Alerts are animated upon rendering and being dismissed. This is intended\nto remain false for testing purposes only.",
        "type": "boolean"
      },
      "isLiveRegion": {
        "description": "Turns the container into a live region so that changes to content within the AlertGroup, such as appending an Alert, are reliably announced to assistive technology.",
        "type": "boolean"
      },
      "isToast": {
        "description": "Toast notifications are positioned at the top right corner of the viewport",
        "type": "boolean"
      },
      "onOverflowClick": {
        "description": "Function to call if user clicks on overflow message (Function: () => void)"
      },
      "overflowMessage": {
        "description": "Custom text to show for the overflow message",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "AlertGroupState": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AlertGroupState Props",
    "description": "Props for the AlertGroupState component",
    "properties": {
      "container": {
        "description": " (Type: HTMLElement)"
      }
    },
    "required": [
      "container"
    ],
    "additionalProperties": false
  },
  "AlertActionLink": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AlertActionLink Props",
    "description": "Renders buttons styled as links beneath the alert title and description when this sub-component\nis passed into the alert's actionLinks property.",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the button.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the button (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the button",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the base component to render. defaults to button (Type: React.ElementType<any> | React.ComponentType<any>)"
      },
      "countOptions": {
        "description": "Adds count number to button (Type: BadgeCountObject)"
      },
      "hasNoPadding": {
        "description": "Applies no padding on a plain button variant. Use when plain button is placed inline with text",
        "type": "boolean"
      },
      "icon": {
        "description": "Icon for the button. (React component or element)"
      },
      "iconPosition": {
        "description": "Sets position of the icon. Note: \"left\" and \"right\" are deprecated. Use \"start\" and \"end\" instead",
        "enum": [
          "start",
          "end",
          "left",
          "right"
        ]
      },
      "inoperableEvents": {
        "description": "Events to prevent when the button is in an aria-disabled state (Type: string[])",
        "type": "array"
      },
      "isAriaDisabled": {
        "description": "Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute",
        "type": "boolean"
      },
      "isBlock": {
        "description": "Adds block styling to button",
        "type": "boolean"
      },
      "isClicked": {
        "description": "Adds clicked styling to button.",
        "type": "boolean"
      },
      "isDanger": {
        "description": "Adds danger styling to secondary or link button variants",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Adds disabled styling and disables the button using the disabled html attribute",
        "type": "boolean"
      },
      "isInline": {
        "description": "Adds inline styling to a link button",
        "type": "boolean"
      },
      "isLoading": {
        "description": "Adds progress styling to button",
        "type": "boolean"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "size": {
        "description": "Adds styling which affects the size of the button",
        "enum": [
          "default",
          "sm",
          "lg"
        ]
      },
      "spinnerAriaLabel": {
        "description": "Accessible label for the spinner to describe what is loading",
        "type": "string"
      },
      "spinnerAriaLabelledBy": {
        "description": "Id of element which describes what is being loaded",
        "type": "string"
      },
      "spinnerAriaValueText": {
        "description": "Text describing that current loading status or progress",
        "type": "string"
      },
      "state": {
        "description": "Sets state of the stateful button variant. Default is \"unread\"",
        "enum": [
          "read",
          "unread",
          "attention"
        ]
      },
      "tabIndex": {
        "description": "Sets the button tabindex.",
        "type": "number"
      },
      "type": {
        "description": "Sets button type",
        "enum": [
          "button",
          "submit",
          "reset"
        ]
      },
      "variant": {
        "description": "Adds button variant styles",
        "enum": [
          "primary",
          "secondary",
          "tertiary",
          "danger",
          "warning",
          "link",
          "plain",
          "control",
          "stateful"
        ]
      }
    },
    "additionalProperties": false
  },
  "AlertActionCloseButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AlertActionCloseButton Props",
    "description": "Renders a close button for a dismissable alert when this sub-component is passed into\nthe alert's actionClose property.",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the button.",
        "type": "string",
        "default": "''"
      },
      "children": {
        "description": "Content rendered inside the button (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the button",
        "type": "string"
      },
      "component": {
        "description": "Sets the base component to render. defaults to button (Type: React.ElementType<any> | React.ComponentType<any>)"
      },
      "countOptions": {
        "description": "Adds count number to button (Type: BadgeCountObject)"
      },
      "hasNoPadding": {
        "description": "Applies no padding on a plain button variant. Use when plain button is placed inline with text",
        "type": "boolean"
      },
      "icon": {
        "description": "Icon for the button. (React component or element)"
      },
      "iconPosition": {
        "description": "Sets position of the icon. Note: \"left\" and \"right\" are deprecated. Use \"start\" and \"end\" instead",
        "enum": [
          "start",
          "end",
          "left",
          "right"
        ]
      },
      "inoperableEvents": {
        "description": "Events to prevent when the button is in an aria-disabled state (Type: string[])",
        "type": "array"
      },
      "isAriaDisabled": {
        "description": "Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute",
        "type": "boolean"
      },
      "isBlock": {
        "description": "Adds block styling to button",
        "type": "boolean"
      },
      "isClicked": {
        "description": "Adds clicked styling to button.",
        "type": "boolean"
      },
      "isDanger": {
        "description": "Adds danger styling to secondary or link button variants",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Adds disabled styling and disables the button using the disabled html attribute",
        "type": "boolean"
      },
      "isInline": {
        "description": "Adds inline styling to a link button",
        "type": "boolean"
      },
      "isLoading": {
        "description": "Adds progress styling to button",
        "type": "boolean"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked. (Function: () => void)",
        "default": "() => undefined as any"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "size": {
        "description": "Adds styling which affects the size of the button",
        "enum": [
          "default",
          "sm",
          "lg"
        ]
      },
      "spinnerAriaLabel": {
        "description": "Accessible label for the spinner to describe what is loading",
        "type": "string"
      },
      "spinnerAriaLabelledBy": {
        "description": "Id of element which describes what is being loaded",
        "type": "string"
      },
      "spinnerAriaValueText": {
        "description": "Text describing that current loading status or progress",
        "type": "string"
      },
      "state": {
        "description": "Sets state of the stateful button variant. Default is \"unread\"",
        "enum": [
          "read",
          "unread",
          "attention"
        ]
      },
      "tabIndex": {
        "description": "Sets the button tabindex.",
        "type": "number"
      },
      "type": {
        "description": "Sets button type",
        "enum": [
          "button",
          "submit",
          "reset"
        ]
      },
      "variant": {
        "description": "Adds button variant styles",
        "enum": [
          "primary",
          "secondary",
          "tertiary",
          "danger",
          "warning",
          "link",
          "plain",
          "control",
          "stateful"
        ]
      },
      "variantLabel": {
        "description": "Variant Label for the close button.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Alert": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Alert Props",
    "description": "The main alert component.",
    "properties": {
      "actionClose": {
        "description": "Close button; use the alert action close button component. (React component or element)"
      },
      "actionLinks": {
        "description": "Action links; use a single alert action link component or multiple wrapped in an array\nor React fragment. (React component or element)"
      },
      "children": {
        "description": "Content rendered inside the alert. (React component or element)",
        "default": "''"
      },
      "className": {
        "description": "Additional classes to add to the alert.",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Sets the element to use as the alert title. Default is h4. (Type: React.JSX.IntrinsicElements)",
        "default": "'h4'"
      },
      "customIcon": {
        "description": "Set a custom icon to the alert. If not set the icon is set according to the variant. (React component or element)"
      },
      "id": {
        "description": "Uniquely identifies the alert.",
        "type": "string"
      },
      "isExpandable": {
        "description": "Flag indicating that the alert is expandable.",
        "type": "boolean",
        "default": false
      },
      "isInline": {
        "description": "Flag to indicate if the alert is inline.",
        "type": "boolean",
        "default": false
      },
      "isLiveRegion": {
        "description": "Flag to indicate if the alert is in a live region.",
        "type": "boolean",
        "default": false
      },
      "isPlain": {
        "description": "Flag to indicate if the alert is plain.",
        "type": "boolean",
        "default": false
      },
      "onMouseEnter": {
        "description": " (Type: No type info)",
        "default": "() => {}"
      },
      "onMouseLeave": {
        "description": " (Type: No type info)",
        "default": "() => {}"
      },
      "onTimeout": {
        "description": "Function to be executed on alert timeout. Relevant when the timeout prop is set. (Function: () => void)",
        "default": "() => {}"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "timeout": {
        "description": "If set to true, the timeout is 8000 milliseconds. If a number is provided, alert will\nbe dismissed after that amount of time in milliseconds. (Type: number | boolean)",
        "default": false
      },
      "timeoutAnimation": {
        "description": "If the user hovers over the alert and `timeout` expires, this is how long to wait\nbefore finally dismissing the alert.",
        "type": "number",
        "default": 3000
      },
      "title": {
        "description": "Title of the alert. (React component or element)"
      },
      "toggleAriaLabel": {
        "description": "Adds accessible text to the alert toggle.",
        "type": "string"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if text is truncated. (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')"
      },
      "truncateTitle": {
        "description": "Truncate title to number of lines.",
        "type": "number",
        "default": 0
      },
      "variant": {
        "description": "Adds alert variant styles.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ],
        "default": "AlertVariant.custom"
      },
      "variantLabel": {
        "description": "Variant label text for screen readers.",
        "type": "string"
      }
    },
    "required": [
      "title"
    ],
    "additionalProperties": false
  },
  "AccordionToggle": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AccordionToggle Props",
    "description": "Props for the AccordionToggle component",
    "properties": {
      "children": {
        "description": "Content rendered inside the Accordion toggle (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the Accordion Toggle",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Container to override the default for toggle (Type: React.ElementType)"
      },
      "id": {
        "description": "Identify the Accordion toggle number",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "additionalProperties": false
  },
  "AccordionItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AccordionItem Props",
    "description": "Props for the AccordionItem component",
    "properties": {
      "children": {
        "description": "Content rendered inside the accordion item. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the accordion item.",
        "type": "string"
      },
      "isExpanded": {
        "description": "Flag to indicate whether the accordion item is expanded.",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "AccordionExpandableContentBody": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AccordionExpandableContentBody Props",
    "description": "Props for the AccordionExpandableContentBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the accordion content body (React component or element)",
        "default": null
      }
    },
    "additionalProperties": false
  },
  "AccordionContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AccordionContent Props",
    "description": "Props for the AccordionContent component",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the Accordion content",
        "type": "string",
        "default": "''"
      },
      "aria-labelledby": {
        "description": "Id of the controlling accordion toggle to label the content.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the Accordion (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the Accordion content",
        "type": "string",
        "default": "''"
      },
      "component": {
        "description": "Component to use as content container (Type: React.ElementType)"
      },
      "contentBodyProps": {
        "description": "Props passed to the AccordionExpandableContentBody * (Type: AccordionExpandableContentBodyProps)"
      },
      "id": {
        "description": "Identify the AccordionContent item",
        "type": "string",
        "default": "''"
      },
      "isCustomContent": {
        "description": "Flag indicating content is custom. Expanded content Body wrapper will be removed from children.  This allows multiple bodies to be rendered as content. (React component or element)",
        "default": false
      },
      "isFixed": {
        "description": "Flag to indicate Accordion content is fixed",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "Accordion": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Accordion Props",
    "description": "Props for the Accordion component",
    "properties": {
      "aria-label": {
        "description": "Adds accessible text to the Accordion",
        "type": "string"
      },
      "asDefinitionList": {
        "description": "Flag to indicate whether use definition list or div",
        "type": "boolean",
        "default": true
      },
      "children": {
        "description": "Content rendered inside the Accordion (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the Accordion",
        "type": "string",
        "default": "''"
      },
      "displaySize": {
        "description": "Display size variant.",
        "enum": [
          "default",
          "lg"
        ],
        "default": "'default'"
      },
      "headingLevel": {
        "description": "Heading level to use",
        "enum": [
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6"
        ],
        "default": "'h3'"
      },
      "isBordered": {
        "description": "Flag to indicate the accordion had a border",
        "type": "boolean",
        "default": false
      },
      "togglePosition": {
        "description": "Sets the toggle icon position for all accordion toggles.",
        "enum": [
          "start",
          "end"
        ],
        "default": "'end'"
      }
    },
    "additionalProperties": false
  },
  "AboutModalBoxHeader": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AboutModalBoxHeader Props",
    "description": "Props for the AboutModalBoxHeader component",
    "properties": {
      "id": {
        "description": "Id to use for about modal box header",
        "type": "string"
      },
      "productName": {
        "description": "Name of the product",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "additionalProperties": false
  },
  "AboutModalBoxContent": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AboutModalBoxContent Props",
    "description": "Props for the AboutModalBoxContent component",
    "properties": {
      "children": {
        "description": "Content rendered inside the about modal box content (React component or element)"
      },
      "hasNoContentContainer": {
        "description": "Prevents the about modal from rendering content inside a container; allows for more flexible layouts",
        "type": "boolean",
        "default": false
      },
      "trademark": {
        "description": "The trademark info for the product",
        "type": "string"
      }
    },
    "required": [
      "children",
      "trademark"
    ],
    "additionalProperties": false
  },
  "AboutModalBoxCloseButton": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AboutModalBoxCloseButton Props",
    "description": "Props for the AboutModalBoxCloseButton component",
    "properties": {
      "aria-label": {
        "description": "Set close button aria label",
        "type": "string",
        "default": "'Close Dialog'"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked (Type: (event: React.MouseEvent | MouseEvent | KeyboardEvent) => void)",
        "default": "(_e) => undefined as any"
      }
    },
    "additionalProperties": false
  },
  "AboutModalBoxBrand": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AboutModalBoxBrand Props",
    "description": "Props for the AboutModalBoxBrand component",
    "properties": {
      "alt": {
        "description": "The alternate text of the brand image.",
        "type": "string"
      },
      "src": {
        "description": "The URL of the image for the brand.",
        "type": "string"
      }
    },
    "required": [
      "alt",
      "src"
    ],
    "additionalProperties": false
  },
  "AboutModalBox": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AboutModalBox Props",
    "description": "Props for the AboutModalBox component",
    "properties": {
      "children": {
        "description": "Content rendered inside the about modal box (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the about modal box",
        "type": "string"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "AboutModal": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "AboutModal Props",
    "description": "Props for the AboutModal component",
    "properties": {
      "appendTo": {
        "description": "The parent container to append the modal to. Defaults to document.body (Type: HTMLElement | (() => HTMLElement))"
      },
      "aria-label": {
        "description": "Aria label for the about modal.  This should be used when no productName prop is provided",
        "type": "string"
      },
      "backgroundImageSrc": {
        "description": "The URL or file path of the image for the background",
        "type": "string"
      },
      "brandImageAlt": {
        "description": "The alternate text of the brand image",
        "type": "string"
      },
      "brandImageSrc": {
        "description": "The URL of the image for the brand",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the about modal (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the about modal",
        "type": "string"
      },
      "closeButtonAriaLabel": {
        "description": "Set aria label to the close button",
        "type": "string"
      },
      "disableFocusTrap": {
        "description": "Flag to disable focus trap",
        "type": "boolean"
      },
      "hasNoContentContainer": {
        "description": "Prevents the about modal from rendering content inside a container; allows for more flexible layouts",
        "type": "boolean",
        "default": false
      },
      "isOpen": {
        "description": "Flag to show the about modal",
        "type": "boolean",
        "default": false
      },
      "onClose": {
        "description": "A callback for when the close button is clicked (Type: (event: React.MouseEvent | MouseEvent | KeyboardEvent) => void)",
        "default": "(_e): any => undefined"
      },
      "productName": {
        "description": "Product name",
        "type": "string"
      },
      "trademark": {
        "description": "Trademark information",
        "type": "string"
      }
    },
    "required": [
      "brandImageAlt",
      "brandImageSrc",
      "children"
    ],
    "additionalProperties": false
  },
  "ActionListItem": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ActionListItem Props",
    "description": "Props for the ActionListItem component",
    "properties": {
      "children": {
        "description": "Children of the action list item (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the action list item",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ActionListGroup": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ActionListGroup Props",
    "description": "Props for the ActionListGroup component",
    "properties": {
      "children": {
        "description": "Children of the action list group (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the action list group",
        "type": "string"
      },
      "isIconGroup": {
        "description": "Flag indicating the action list group contains multiple icons and item padding should be removed",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "ActionList": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ActionList Props",
    "description": "Props for the ActionList component",
    "properties": {
      "children": {
        "description": "Children of the action list (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the action list",
        "type": "string"
      },
      "isIconList": {
        "description": "Flag indicating the action list contains multiple icons and item padding should be removed",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "Tile-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Tile Props",
    "description": "Props for the Tile component",
    "properties": {
      "children": {
        "description": "Content rendered inside the banner (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the banner",
        "type": "string"
      },
      "icon": {
        "description": "Icon in the tile title (React component or element)"
      },
      "isDisabled": {
        "description": "Flag indicating if the tile is disabled",
        "type": "boolean"
      },
      "isDisplayLarge": {
        "description": "Flag indicating if the stacked tile icon is large",
        "type": "boolean"
      },
      "isSelected": {
        "description": "Flag indicating if the tile is selected",
        "type": "boolean"
      },
      "isStacked": {
        "description": "Flag indicating if the tile header is stacked",
        "type": "boolean"
      },
      "title": {
        "description": "Title of the tile",
        "type": "string"
      }
    },
    "required": [
      "title"
    ],
    "additionalProperties": false
  },
  "TileProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "TileProps Props",
    "description": "Props for the TileProps component",
    "properties": {
      "children": {
        "description": "Content rendered inside the banner (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the banner",
        "type": "string"
      },
      "icon": {
        "description": "Icon in the tile title (React component or element)"
      },
      "isDisabled": {
        "description": "Flag indicating if the tile is disabled",
        "type": "boolean"
      },
      "isDisplayLarge": {
        "description": "Flag indicating if the stacked tile icon is large",
        "type": "boolean"
      },
      "isSelected": {
        "description": "Flag indicating if the tile is selected",
        "type": "boolean"
      },
      "isStacked": {
        "description": "Flag indicating if the tile header is stacked",
        "type": "boolean"
      },
      "title": {
        "description": "Title of the tile",
        "type": "string"
      }
    },
    "required": [
      "title"
    ],
    "additionalProperties": false
  },
  "ModalContent-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalContent Props",
    "description": "Props for the ModalContent component",
    "properties": {
      "actions": {
        "description": "Action buttons to add to the standard modal footer. Ignored if the footer property\nis passed in. (Type: any)",
        "default": []
      },
      "aria-describedby": {
        "description": "Id to use for the modal box descriptor.",
        "type": "string"
      },
      "aria-label": {
        "description": "Accessible descriptor of the modal.",
        "type": "string",
        "default": "''"
      },
      "aria-labelledby": {
        "description": "Id to use for the modal box label. (Type: string | null)"
      },
      "backdropId": {
        "description": "Id of the backdrop.",
        "type": "string"
      },
      "bodyAriaLabel": {
        "description": "Accessible label applied to the modal box body. This should be used to communicate\nimportant information about the modal box body div element if needed, such as that it\nis scrollable.",
        "type": "string"
      },
      "bodyAriaRole": {
        "description": "Accessible role applied to the modal box body. This will default to \"region\" if the\nbodyAriaLabel property is passed in. Set to a more appropriate role as applicable\nbased on the modal content and context.",
        "type": "string"
      },
      "boxId": {
        "description": "Id of the modal box container.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the modal. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal box.",
        "type": "string",
        "default": "''"
      },
      "description": {
        "description": "Description of the modal. (React component or element)",
        "default": null
      },
      "descriptorId": {
        "description": "Id of the modal box description.",
        "type": "string"
      },
      "disableFocusTrap": {
        "description": "Flag to disable focus trap.",
        "type": "boolean",
        "default": false
      },
      "elementToFocus": {
        "description": "The element to focus when the modal opens. By default the first\nfocusable element will receive focus. (Type: HTMLElement | SVGElement | string)"
      },
      "footer": {
        "description": "Custom footer. (React component or element)",
        "default": null
      },
      "hasNoBodyWrapper": {
        "description": "Flag indicating if modal content should be placed in a modal box body wrapper.",
        "type": "boolean",
        "default": false
      },
      "header": {
        "description": "Complex header (more than just text), supersedes the title property for header content. (React component or element)",
        "default": null
      },
      "help": {
        "description": "Optional help section for the modal header. (React component or element)",
        "default": null
      },
      "isOpen": {
        "description": "Flag to show the modal.",
        "type": "boolean",
        "default": false
      },
      "labelId": {
        "description": "Id of the modal box title.",
        "type": "string"
      },
      "maxWidth": {
        "description": "Maximum width of the modal. (Type: number | string)"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked. (Type: (event: KeyboardEvent | React.MouseEvent) => void)",
        "default": "() => undefined as any"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "position": {
        "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
        "enum": [
          "default",
          "top"
        ]
      },
      "positionOffset": {
        "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
        "type": "string"
      },
      "showClose": {
        "description": "Flag to show the close button in the header area of the modal.",
        "type": "boolean",
        "default": true
      },
      "title": {
        "description": "Text content of the modal header. (React component or element)",
        "default": "''"
      },
      "titleIconVariant": {
        "description": "Optional alert icon (or other) to show before the title of the modal header. When the\npredefined alert types are used the default styling will be automatically applied.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ],
        "default": null
      },
      "titleLabel": {
        "description": "Optional title label text for screen readers.",
        "type": "string",
        "default": "''"
      },
      "variant": {
        "description": "Variant of the modal.",
        "enum": [
          "small",
          "medium",
          "large",
          "default"
        ],
        "default": "'default'"
      },
      "width": {
        "description": "Default width of the modal. (Type: number | string)"
      }
    },
    "required": [
      "boxId",
      "children",
      "descriptorId",
      "labelId"
    ],
    "additionalProperties": false
  },
  "ModalContentProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalContentProps Props",
    "description": "Props for the ModalContentProps component",
    "properties": {
      "actions": {
        "description": "Action buttons to add to the standard modal footer. Ignored if the footer property\nis passed in. (Type: any)"
      },
      "backdropId": {
        "description": "Id of the backdrop.",
        "type": "string"
      },
      "bodyAriaLabel": {
        "description": "Accessible label applied to the modal box body. This should be used to communicate\nimportant information about the modal box body div element if needed, such as that it\nis scrollable.",
        "type": "string"
      },
      "bodyAriaRole": {
        "description": "Accessible role applied to the modal box body. This will default to \"region\" if the\nbodyAriaLabel property is passed in. Set to a more appropriate role as applicable\nbased on the modal content and context.",
        "type": "string"
      },
      "boxId": {
        "description": "Id of the modal box container.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the modal. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal box.",
        "type": "string"
      },
      "description": {
        "description": "Description of the modal. (React component or element)"
      },
      "descriptorId": {
        "description": "Id of the modal box description.",
        "type": "string"
      },
      "disableFocusTrap": {
        "description": "Flag to disable focus trap.",
        "type": "boolean"
      },
      "elementToFocus": {
        "description": "The element to focus when the modal opens. By default the first\nfocusable element will receive focus. (Type: HTMLElement | SVGElement | string)"
      },
      "footer": {
        "description": "Custom footer. (React component or element)"
      },
      "hasNoBodyWrapper": {
        "description": "Flag indicating if modal content should be placed in a modal box body wrapper.",
        "type": "boolean"
      },
      "header": {
        "description": "Complex header (more than just text), supersedes the title property for header content. (React component or element)"
      },
      "help": {
        "description": "Optional help section for the modal header. (React component or element)"
      },
      "isOpen": {
        "description": "Flag to show the modal.",
        "type": "boolean"
      },
      "labelId": {
        "description": "Id of the modal box title.",
        "type": "string"
      },
      "maxWidth": {
        "description": "Maximum width of the modal. (Type: number | string)"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked. (Type: (event: KeyboardEvent | React.MouseEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "position": {
        "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
        "enum": [
          "default",
          "top"
        ]
      },
      "positionOffset": {
        "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
        "type": "string"
      },
      "showClose": {
        "description": "Flag to show the close button in the header area of the modal.",
        "type": "boolean"
      },
      "title": {
        "description": "Text content of the modal header. (React component or element)"
      },
      "titleIconVariant": {
        "description": "Optional alert icon (or other) to show before the title of the modal header. When the\npredefined alert types are used the default styling will be automatically applied.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ]
      },
      "titleLabel": {
        "description": "Optional title label text for screen readers.",
        "type": "string"
      },
      "Unknown": {
        "description": "Id to use for the modal box label. (Type: string | null)"
      },
      "variant": {
        "description": "Variant of the modal.",
        "enum": [
          "small",
          "medium",
          "large",
          "default"
        ]
      },
      "width": {
        "description": "Default width of the modal. (Type: number | string)"
      }
    },
    "required": [
      "boxId",
      "children",
      "descriptorId",
      "labelId"
    ],
    "additionalProperties": false
  },
  "ModalBoxTitle-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxTitle Props",
    "description": "Props for the ModalBoxTitle component",
    "properties": {
      "className": {
        "description": "Additional classes added to the modal box title.",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "Id of the modal box title.",
        "type": "string"
      },
      "title": {
        "description": "Content rendered inside the modal box title. (React component or element)"
      },
      "titleIconVariant": {
        "description": "Optional alert icon (or other) to show before the title. When the predefined alert types\nare used the default styling will be automatically applied.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ]
      },
      "titleLabel": {
        "description": "Optional title label text for screen readers.",
        "type": "string",
        "default": "''"
      }
    },
    "required": [
      "id",
      "title"
    ],
    "additionalProperties": false
  },
  "ModalBoxTitleProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxTitleProps Props",
    "description": "Props for the ModalBoxTitleProps component",
    "properties": {
      "className": {
        "description": "Additional classes added to the modal box title.",
        "type": "string"
      },
      "id": {
        "description": "Id of the modal box title.",
        "type": "string"
      },
      "title": {
        "description": "Content rendered inside the modal box title. (React component or element)"
      },
      "titleIconVariant": {
        "description": "Optional alert icon (or other) to show before the title. When the predefined alert types\nare used the default styling will be automatically applied.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ]
      },
      "titleLabel": {
        "description": "Optional title label text for screen readers.",
        "type": "string"
      }
    },
    "required": [
      "id",
      "title"
    ],
    "additionalProperties": false
  },
  "ModalBoxHeader-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxHeader Props",
    "description": "Props for the ModalBoxHeader component",
    "properties": {
      "children": {
        "description": "Content rendered inside the modal box header. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the modal box header.",
        "type": "string",
        "default": "''"
      },
      "help": {
        "description": "Optional help section for the modal box header. (React component or element)",
        "default": null
      }
    },
    "additionalProperties": false
  },
  "ModalBoxHeaderProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxHeaderProps Props",
    "description": "Props for the ModalBoxHeaderProps component",
    "properties": {
      "children": {
        "description": "Content rendered inside the modal box header. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal box header.",
        "type": "string"
      },
      "help": {
        "description": "Optional help section for the modal box header. (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "ModalBoxFooter-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxFooter Props",
    "description": "Props for the ModalBoxFooter component",
    "properties": {
      "children": {
        "description": "Content rendered inside the modal box footer. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the modal box footer.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "ModalBoxFooterProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxFooterProps Props",
    "description": "Props for the ModalBoxFooterProps component",
    "properties": {
      "children": {
        "description": "Content rendered inside the modal box footer. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal box footer.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ModalBoxDescription-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxDescription Props",
    "description": "Props for the ModalBoxDescription component",
    "properties": {
      "children": {
        "description": "Content rendered inside the description. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the description.",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "Id of the description.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "ModalBoxDescriptionProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxDescriptionProps Props",
    "description": "Props for the ModalBoxDescriptionProps component",
    "properties": {
      "children": {
        "description": "Content rendered inside the description. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the description.",
        "type": "string"
      },
      "id": {
        "description": "Id of the description.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ModalBoxCloseButton-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxCloseButton Props",
    "description": "Props for the ModalBoxCloseButton component",
    "properties": {
      "aria-label": {
        "description": "Accessible descriptor of the close button.",
        "type": "string",
        "default": "'Close'"
      },
      "className": {
        "description": "Additional classes added to the close button.",
        "type": "string"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked. (Type: (event: KeyboardEvent | React.MouseEvent) => void)",
        "default": "() => undefined as any"
      },
      "ouiaId": {
        "description": "Value to set the data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "ModalBoxCloseButtonProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxCloseButtonProps Props",
    "description": "Props for the ModalBoxCloseButtonProps component",
    "properties": {
      "className": {
        "description": "Additional classes added to the close button.",
        "type": "string"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked. (Type: (event: KeyboardEvent | React.MouseEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to set the data-ouia-component-id. (Type: number | string)"
      },
      "Unknown": {
        "description": "Accessible descriptor of the close button.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ModalBoxBody-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxBody Props",
    "description": "Props for the ModalBoxBody component",
    "properties": {
      "children": {
        "description": "Content rendered inside the modal box body. (React component or element)",
        "default": null
      },
      "className": {
        "description": "Additional classes added to the modal box body.",
        "type": "string",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "ModalBoxBodyProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxBodyProps Props",
    "description": "Props for the ModalBoxBodyProps component",
    "properties": {
      "children": {
        "description": "Content rendered inside the modal box body. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal box body.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "ModalBox-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBox Props",
    "description": "Props for the ModalBox component",
    "properties": {
      "aria-describedby": {
        "description": "Id to use for the modal box description.",
        "type": "string"
      },
      "aria-label": {
        "description": "Accessible descriptor of the modal.",
        "type": "string",
        "default": "''"
      },
      "aria-labelledby": {
        "description": "Id to use for the modal box label.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the modal box. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal box.",
        "type": "string",
        "default": "''"
      },
      "position": {
        "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
        "enum": [
          "default",
          "top"
        ]
      },
      "positionOffset": {
        "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
        "type": "string"
      },
      "variant": {
        "description": "Variant of the modal.",
        "enum": [
          "small",
          "medium",
          "large",
          "default"
        ],
        "default": "'default'"
      }
    },
    "required": [
      "aria-describedby",
      "children"
    ],
    "additionalProperties": false
  },
  "ModalBoxProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalBoxProps Props",
    "description": "Props for the ModalBoxProps component",
    "properties": {
      "children": {
        "description": "Content rendered inside the modal box. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal box.",
        "type": "string"
      },
      "position": {
        "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
        "enum": [
          "default",
          "top"
        ]
      },
      "positionOffset": {
        "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
        "type": "string"
      },
      "Unknown": {
        "description": "Id to use for the modal box label.",
        "type": "string"
      },
      "variant": {
        "description": "Variant of the modal.",
        "enum": [
          "small",
          "medium",
          "large",
          "default"
        ]
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "Modal-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Modal Props",
    "description": "Props for the Modal component",
    "properties": {
      "actions": {
        "description": "Action buttons to add to the standard modal footer. Ignored if the footer property\nis passed in. (Type: any)",
        "default": []
      },
      "appendTo": {
        "description": "The parent container to append the modal to. Defaults to \"document.body\". (Type: HTMLElement | (() => HTMLElement))",
        "default": "() => document.body"
      },
      "aria-describedby": {
        "description": "Id to use for the modal box descriptor.",
        "type": "string",
        "default": "''"
      },
      "aria-label": {
        "description": "Accessible descriptor of the modal.",
        "type": "string",
        "default": "''"
      },
      "aria-labelledby": {
        "description": "Id to use for the modal box label.",
        "type": "string",
        "default": "''"
      },
      "bodyAriaLabel": {
        "description": "Accessible label applied to the modal box body. This should be used to communicate\nimportant information about the modal box body div element if needed, such as that it\nis scrollable.",
        "type": "string"
      },
      "bodyAriaRole": {
        "description": "Accessible role applied to the modal box body. This will default to \"region\" if the\nbodyAriaLabel property is passed in. Set to a more appropriate role as applicable\nbased on the modal content and context.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the modal. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal.",
        "type": "string",
        "default": "''"
      },
      "description": {
        "description": "Description of the modal. (React component or element)"
      },
      "disableFocusTrap": {
        "description": "Flag to disable focus trap.",
        "type": "boolean"
      },
      "elementToFocus": {
        "description": "The element to focus when the modal opens. By default the first\nfocusable element will receive focus. (Type: HTMLElement | SVGElement | string)"
      },
      "footer": {
        "description": "Custom footer. (React component or element)"
      },
      "hasNoBodyWrapper": {
        "description": "Flag indicating if modal content should be placed in a modal box body wrapper.",
        "type": "boolean",
        "default": false
      },
      "header": {
        "description": "Complex header (more than just text), supersedes the title property for header content. (React component or element)"
      },
      "help": {
        "description": "Optional help section for the modal header. (React component or element)"
      },
      "id": {
        "description": "An id to use for the modal box container.",
        "type": "string",
        "default": "undefined"
      },
      "isOpen": {
        "description": "Flag to show the modal.",
        "type": "boolean",
        "default": false
      },
      "maxWidth": {
        "description": "Maximum width of the modal. (Type: number | string)"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked. (Type: (event: KeyboardEvent | React.MouseEvent) => void)",
        "default": "() => undefined as any"
      },
      "onEscapePress": {
        "description": "Modal handles pressing of the escape key and closes the modal. If you want to handle\nthis yourself you can use this callback function. (Function: (event: KeyboardEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean",
        "default": true
      },
      "position": {
        "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
        "enum": [
          "default",
          "top"
        ],
        "default": "'default'"
      },
      "positionOffset": {
        "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
        "type": "string"
      },
      "showClose": {
        "description": "Flag to show the close button in the header area of the modal.",
        "type": "boolean",
        "default": true
      },
      "title": {
        "description": "Text content of the modal header. (React component or element)",
        "default": "''"
      },
      "titleIconVariant": {
        "description": "Optional alert icon (or other) to show before the title of the modal header. When the\npredefined alert types are used the default styling will be automatically applied.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ],
        "default": null
      },
      "titleLabel": {
        "description": "Optional title label text for screen readers.",
        "type": "string",
        "default": "''"
      },
      "variant": {
        "description": "Variant of the modal.",
        "enum": [
          "small",
          "medium",
          "large",
          "default"
        ],
        "default": "'default'"
      },
      "width": {
        "description": "Default width of the modal. (Type: number | string)"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "ModalProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalProps Props",
    "description": "Props for the ModalProps component",
    "properties": {
      "actions": {
        "description": "Action buttons to add to the standard modal footer. Ignored if the footer property\nis passed in. (Type: any)"
      },
      "appendTo": {
        "description": "The parent container to append the modal to. Defaults to \"document.body\". (Type: HTMLElement | (() => HTMLElement))"
      },
      "bodyAriaLabel": {
        "description": "Accessible label applied to the modal box body. This should be used to communicate\nimportant information about the modal box body div element if needed, such as that it\nis scrollable.",
        "type": "string"
      },
      "bodyAriaRole": {
        "description": "Accessible role applied to the modal box body. This will default to \"region\" if the\nbodyAriaLabel property is passed in. Set to a more appropriate role as applicable\nbased on the modal content and context.",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the modal. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the modal.",
        "type": "string"
      },
      "description": {
        "description": "Description of the modal. (React component or element)"
      },
      "disableFocusTrap": {
        "description": "Flag to disable focus trap.",
        "type": "boolean"
      },
      "elementToFocus": {
        "description": "The element to focus when the modal opens. By default the first\nfocusable element will receive focus. (Type: HTMLElement | SVGElement | string)"
      },
      "footer": {
        "description": "Custom footer. (React component or element)"
      },
      "hasNoBodyWrapper": {
        "description": "Flag indicating if modal content should be placed in a modal box body wrapper.",
        "type": "boolean"
      },
      "header": {
        "description": "Complex header (more than just text), supersedes the title property for header content. (React component or element)"
      },
      "help": {
        "description": "Optional help section for the modal header. (React component or element)"
      },
      "id": {
        "description": "An id to use for the modal box container.",
        "type": "string"
      },
      "isOpen": {
        "description": "Flag to show the modal.",
        "type": "boolean"
      },
      "maxWidth": {
        "description": "Maximum width of the modal. (Type: number | string)"
      },
      "onClose": {
        "description": "A callback for when the close button is clicked. (Type: (event: KeyboardEvent | React.MouseEvent) => void)"
      },
      "onEscapePress": {
        "description": "Modal handles pressing of the escape key and closes the modal. If you want to handle\nthis yourself you can use this callback function. (Function: (event: KeyboardEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.",
        "type": "boolean"
      },
      "position": {
        "description": "Position of the modal. By default a modal will be positioned vertically and horizontally centered.",
        "enum": [
          "default",
          "top"
        ]
      },
      "positionOffset": {
        "description": "Offset from alternate position. Can be any valid CSS length/percentage.",
        "type": "string"
      },
      "showClose": {
        "description": "Flag to show the close button in the header area of the modal.",
        "type": "boolean"
      },
      "title": {
        "description": "Text content of the modal header. (React component or element)"
      },
      "titleIconVariant": {
        "description": "Optional alert icon (or other) to show before the title of the modal header. When the\npredefined alert types are used the default styling will be automatically applied.",
        "enum": [
          "success",
          "danger",
          "warning",
          "info",
          "custom"
        ]
      },
      "titleLabel": {
        "description": "Optional title label text for screen readers.",
        "type": "string"
      },
      "Unknown": {
        "description": "Id to use for the modal box label.",
        "type": "string"
      },
      "variant": {
        "description": "Variant of the modal.",
        "enum": [
          "small",
          "medium",
          "large",
          "default"
        ]
      },
      "width": {
        "description": "Default width of the modal. (Type: number | string)"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "ModalState-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ModalState Props",
    "description": "Props for the ModalState component",
    "properties": {
      "ouiaStateId": {
        "description": "",
        "type": "string"
      }
    },
    "required": [
      "ouiaStateId"
    ],
    "additionalProperties": false
  },
  "WizardToggle-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardToggle Props",
    "description": "Props for the WizardToggle component",
    "properties": {
      "activeStep": {
        "description": "The currently active WizardStep (Type: WizardStep)"
      },
      "aria-label": {
        "description": "The button's aria-label",
        "type": "string",
        "default": "'Wizard Toggle'"
      },
      "children": {
        "description": "The WizardFooter (React component or element)"
      },
      "hasDrawer": {
        "description": "Flag indicating the wizard has a drawer for at least one of the wizard steps",
        "type": "boolean"
      },
      "hasNoBodyPadding": {
        "description": "Set to true to remove body padding",
        "type": "boolean",
        "default": false
      },
      "isDrawerExpanded": {
        "description": "Flag indicating the wizard drawer is expanded",
        "type": "boolean"
      },
      "isInPage": {
        "description": "If the wizard is in-page",
        "type": "boolean",
        "default": true
      },
      "isNavOpen": {
        "description": "If the nav is open",
        "type": "boolean"
      },
      "mainAriaLabel": {
        "description": "Adds an accessible name to the wizard body when the body content overflows and renders\na scrollbar.",
        "type": "string",
        "default": null
      },
      "mainAriaLabelledBy": {
        "description": "Adds an accessible name to the wizard body by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the body content overflows and renders a scrollbar.",
        "type": "string",
        "default": null
      },
      "nav": {
        "description": "Function that returns the WizardNav component (Function: (isWizardNavOpen: boolean) => React.ReactElement<any>)"
      },
      "onExpandDrawer": {
        "description": "Callback function for when the drawer is toggled (Function: () => void)"
      },
      "onNavToggle": {
        "description": "Callback function for when the nav is toggled (Function: (isOpen: boolean) => void)"
      },
      "steps": {
        "description": "The wizard steps (Type: WizardStep[])",
        "type": "array"
      }
    },
    "required": [
      "activeStep",
      "isNavOpen",
      "nav",
      "onNavToggle",
      "steps"
    ],
    "additionalProperties": false
  },
  "WizardToggleProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardToggleProps Props",
    "description": "Props for the WizardToggleProps component",
    "properties": {
      "activeStep": {
        "description": "The currently active WizardStep (Type: WizardStep)"
      },
      "children": {
        "description": "The WizardFooter (React component or element)"
      },
      "hasDrawer": {
        "description": "Flag indicating the wizard has a drawer for at least one of the wizard steps",
        "type": "boolean"
      },
      "hasNoBodyPadding": {
        "description": "Set to true to remove body padding",
        "type": "boolean"
      },
      "isDrawerExpanded": {
        "description": "Flag indicating the wizard drawer is expanded",
        "type": "boolean"
      },
      "isInPage": {
        "description": "If the wizard is in-page",
        "type": "boolean"
      },
      "isNavOpen": {
        "description": "If the nav is open",
        "type": "boolean"
      },
      "mainAriaLabel": {
        "description": "Adds an accessible name to the wizard body when the body content overflows and renders\na scrollbar.",
        "type": "string"
      },
      "mainAriaLabelledBy": {
        "description": "Adds an accessible name to the wizard body by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the body content overflows and renders a scrollbar.",
        "type": "string"
      },
      "nav": {
        "description": "Function that returns the WizardNav component (Function: (isWizardNavOpen: boolean) => React.ReactElement<any>)"
      },
      "onExpandDrawer": {
        "description": "Callback function for when the drawer is toggled (Function: () => void)"
      },
      "onNavToggle": {
        "description": "Callback function for when the nav is toggled (Function: (isOpen: boolean) => void)"
      },
      "steps": {
        "description": "The wizard steps (Type: WizardStep[])",
        "type": "array"
      },
      "Unknown": {
        "description": "The button's aria-label",
        "type": "string"
      }
    },
    "required": [
      "activeStep",
      "hasNoBodyPadding",
      "isNavOpen",
      "nav",
      "onNavToggle",
      "steps"
    ],
    "additionalProperties": false
  },
  "WizardNavItem-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardNavItem Props",
    "description": "Props for the WizardNavItem component",
    "properties": {
      "children": {
        "description": "Can nest a WizardNav component for substeps (React component or element)",
        "default": null
      },
      "content": {
        "description": "The content to display in the nav item (React component or element)",
        "default": "''"
      },
      "href": {
        "description": "An optional url to use for when using an anchor component",
        "type": "string",
        "default": null
      },
      "id": {
        "description": "The id for the nav item (Type: string | number)"
      },
      "isCurrent": {
        "description": "Whether the nav item is the currently active item",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Whether the nav item is disabled",
        "type": "boolean",
        "default": false
      },
      "isExpandable": {
        "description": "Flag indicating that this NavItem has child steps and is expandable",
        "type": "boolean",
        "default": false
      },
      "navItemComponent": {
        "description": "Component used to render WizardNavItem",
        "enum": [
          "button",
          "a"
        ],
        "default": "'button'"
      },
      "onNavItemClick": {
        "description": "Callback for when the nav item is clicked (Function: (step: number) => any)",
        "default": "() => undefined"
      },
      "ouiaId": {
        "description": " (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean",
        "default": true
      },
      "step": {
        "description": "The step passed into the onNavItemClick callback",
        "type": "number"
      }
    },
    "required": [
      "step"
    ],
    "additionalProperties": false
  },
  "WizardNavItemProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardNavItemProps Props",
    "description": "Props for the WizardNavItemProps component",
    "properties": {
      "children": {
        "description": "Can nest a WizardNav component for substeps (React component or element)"
      },
      "content": {
        "description": "The content to display in the nav item (React component or element)"
      },
      "href": {
        "description": "An optional url to use for when using an anchor component",
        "type": "string"
      },
      "id": {
        "description": "The id for the nav item (Type: string | number)"
      },
      "isCurrent": {
        "description": "Whether the nav item is the currently active item",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Whether the nav item is disabled",
        "type": "boolean"
      },
      "isExpandable": {
        "description": "Flag indicating that this NavItem has child steps and is expandable",
        "type": "boolean"
      },
      "navItemComponent": {
        "description": "Component used to render WizardNavItem",
        "enum": [
          "button",
          "a"
        ]
      },
      "onNavItemClick": {
        "description": "Callback for when the nav item is clicked (Function: (step: number) => any)"
      },
      "step": {
        "description": "The step passed into the onNavItemClick callback",
        "type": "number"
      }
    },
    "required": [
      "step"
    ],
    "additionalProperties": false
  },
  "WizardNav-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardNav Props",
    "description": "Props for the WizardNav component",
    "properties": {
      "aria-label": {
        "description": "Aria-label applied to the nav element",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "Sets the aria-labelledby attribute on the nav element",
        "type": "string"
      },
      "children": {
        "description": "children should be WizardNavItem components (Type: any)"
      },
      "isOpen": {
        "description": "Whether the nav is expanded",
        "type": "boolean",
        "default": false
      },
      "ouiaId": {
        "description": " (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean",
        "default": true
      },
      "returnList": {
        "description": "True to return the inner list without the wrapping nav element",
        "type": "boolean",
        "default": false
      }
    },
    "additionalProperties": false
  },
  "WizardNavProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardNavProps Props",
    "description": "Props for the WizardNavProps component",
    "properties": {
      "children": {
        "description": "children should be WizardNavItem components (Type: any)"
      },
      "isOpen": {
        "description": "Whether the nav is expanded",
        "type": "boolean"
      },
      "returnList": {
        "description": "True to return the inner list without the wrapping nav element",
        "type": "boolean"
      },
      "Unknown": {
        "description": "Sets the aria-labelledby attribute on the nav element",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "WizardHeader-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardHeader Props",
    "description": "Props for the WizardHeader component",
    "properties": {
      "closeButtonAriaLabel": {
        "description": "Aria-label applied to the X (Close) button",
        "type": "string"
      },
      "description": {
        "description": "Description of the wizard (React component or element)"
      },
      "descriptionComponent": {
        "description": "Component type of the description",
        "enum": [
          "div",
          "p"
        ],
        "default": "'div'"
      },
      "descriptionId": {
        "description": "id for the description",
        "type": "string"
      },
      "hideClose": {
        "description": "Flag indicating whether the close button should be in the header",
        "type": "boolean"
      },
      "onClose": {
        "description": "Callback function called when the X (Close) button is clicked (Function: () => void)",
        "default": "() => undefined"
      },
      "title": {
        "description": "Title of the wizard",
        "type": "string"
      },
      "titleId": {
        "description": "id for the title",
        "type": "string"
      }
    },
    "required": [
      "title"
    ],
    "additionalProperties": false
  },
  "WizardHeaderProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardHeaderProps Props",
    "description": "Props for the WizardHeaderProps component",
    "properties": {
      "closeButtonAriaLabel": {
        "description": "Aria-label applied to the X (Close) button",
        "type": "string"
      },
      "description": {
        "description": "Description of the wizard (React component or element)"
      },
      "descriptionComponent": {
        "description": "Component type of the description",
        "enum": [
          "div",
          "p"
        ]
      },
      "descriptionId": {
        "description": "id for the description",
        "type": "string"
      },
      "hideClose": {
        "description": "Flag indicating whether the close button should be in the header",
        "type": "boolean"
      },
      "onClose": {
        "description": "Callback function called when the X (Close) button is clicked (Function: () => void)"
      },
      "title": {
        "description": "Title of the wizard",
        "type": "string"
      },
      "titleId": {
        "description": "id for the title",
        "type": "string"
      }
    },
    "required": [
      "title"
    ],
    "additionalProperties": false
  },
  "WizardFooterInternal-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardFooterInternal Props",
    "description": "Props for the WizardFooterInternal component",
    "properties": {
      "activeStep": {
        "description": " (Type: WizardStep)"
      },
      "backButtonText": {
        "description": " (React component or element)"
      },
      "cancelButtonText": {
        "description": " (React component or element)"
      },
      "firstStep": {
        "description": "",
        "type": "boolean"
      },
      "isValid": {
        "description": "",
        "type": "boolean"
      },
      "nextButtonText": {
        "description": " (React component or element)"
      },
      "onBack": {
        "description": " (Type: any)"
      },
      "onClose": {
        "description": " (Type: any)"
      },
      "onNext": {
        "description": " (Type: any)"
      }
    },
    "required": [
      "activeStep",
      "backButtonText",
      "cancelButtonText",
      "firstStep",
      "isValid",
      "nextButtonText",
      "onBack",
      "onClose",
      "onNext"
    ],
    "additionalProperties": false
  },
  "WizardFooterInternalProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardFooterInternalProps Props",
    "description": "Props for the WizardFooterInternalProps component",
    "properties": {
      "activeStep": {
        "description": " (Type: WizardStep)"
      },
      "backButtonText": {
        "description": " (React component or element)"
      },
      "cancelButtonText": {
        "description": " (React component or element)"
      },
      "firstStep": {
        "description": "",
        "type": "boolean"
      },
      "isValid": {
        "description": "",
        "type": "boolean"
      },
      "nextButtonText": {
        "description": " (React component or element)"
      },
      "onBack": {
        "description": " (Type: any)"
      },
      "onClose": {
        "description": " (Type: any)"
      },
      "onNext": {
        "description": " (Type: any)"
      }
    },
    "required": [
      "activeStep",
      "backButtonText",
      "cancelButtonText",
      "firstStep",
      "isValid",
      "nextButtonText",
      "onBack",
      "onClose",
      "onNext"
    ],
    "additionalProperties": false
  },
  "WizardFooter-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardFooter Props",
    "description": "Props for the WizardFooter component",
    "properties": {
      "children": {
        "description": "Buttons in the footer (Type: any)"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "WizardFooterProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardFooterProps Props",
    "description": "Props for the WizardFooterProps component",
    "properties": {
      "children": {
        "description": "Buttons in the footer (Type: any)"
      }
    },
    "required": [
      "children"
    ],
    "additionalProperties": false
  },
  "WizardDrawerWrapperProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardDrawerWrapperProps Props",
    "description": "Props for the WizardDrawerWrapperProps component",
    "properties": {
      "children": {
        "description": "The wizard content (Type: React.ReactElement<any>)"
      },
      "hasDrawer": {
        "description": "Flag indicating the wizard has a drawer for at least one of the wizard steps",
        "type": "boolean"
      },
      "wrapper": {
        "description": "The drawer component which wraps the wizard content (Function: (children: React.ReactElement<any>) => JSX.Element)"
      }
    },
    "required": [
      "children",
      "hasDrawer",
      "wrapper"
    ],
    "additionalProperties": false
  },
  "WizardBody-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardBody Props",
    "description": "Props for the WizardBody component",
    "properties": {
      "activeStep": {
        "description": "The currently active WizardStep (Type: WizardStep)"
      },
      "aria-label": {
        "description": "Adds an accessible name to the wizard body when the body content overflows and renders\na scrollbar.",
        "type": "string"
      },
      "aria-labelledby": {
        "description": "Adds an accessible name to the wizard body by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the body content overflows and renders a scrollbar.",
        "type": "string"
      },
      "children": {
        "description": "Anything that can be rendered in the Wizard body (Type: any)"
      },
      "hasDrawer": {
        "description": "",
        "type": "boolean"
      },
      "hasNoBodyPadding": {
        "description": "Set to true to remove the default body padding",
        "type": "boolean",
        "default": false
      },
      "isDrawerExpanded": {
        "description": "Flag indicating the wizard drawer is expanded",
        "type": "boolean"
      },
      "mainComponent": {
        "description": "Component used as the primary content container (Type: React.ElementType)",
        "default": "'div'"
      },
      "onExpandDrawer": {
        "description": "Callback function for when the drawer is toggled (Function: () => void)"
      }
    },
    "required": [
      "activeStep",
      "aria-labelledby",
      "children"
    ],
    "additionalProperties": false
  },
  "WizardBodyProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardBodyProps Props",
    "description": "Props for the WizardBodyProps component",
    "properties": {
      "activeStep": {
        "description": "The currently active WizardStep (Type: WizardStep)"
      },
      "children": {
        "description": "Anything that can be rendered in the Wizard body (Type: any)"
      },
      "hasDrawer": {
        "description": "",
        "type": "boolean"
      },
      "hasNoBodyPadding": {
        "description": "Set to true to remove the default body padding",
        "type": "boolean"
      },
      "isDrawerExpanded": {
        "description": "Flag indicating the wizard drawer is expanded",
        "type": "boolean"
      },
      "mainComponent": {
        "description": "Component used as the primary content container (Type: React.ElementType)"
      },
      "onExpandDrawer": {
        "description": "Callback function for when the drawer is toggled (Function: () => void)"
      },
      "Unknown": {
        "description": "Adds an accessible name to the wizard body by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the body content overflows and renders a scrollbar.",
        "type": "string"
      }
    },
    "required": [
      "activeStep",
      "children",
      "hasNoBodyPadding",
      "Unknown"
    ],
    "additionalProperties": false
  },
  "Wizard-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Wizard Props",
    "description": "Props for the Wizard component",
    "properties": {
      "appendTo": {
        "description": "The parent container to append the modal to. Defaults to document.body (Type: HTMLElement | (() => HTMLElement))",
        "default": null
      },
      "backButtonText": {
        "description": "(Unused if footer is controlled) The Back button text (React component or element)",
        "default": "'Back'"
      },
      "cancelButtonText": {
        "description": "(Unused if footer is controlled) The Cancel button text (React component or element)",
        "default": "'Cancel'"
      },
      "className": {
        "description": "Additional classes spread to the Wizard",
        "type": "string",
        "default": "''"
      },
      "closeButtonAriaLabel": {
        "description": "(Unused if footer is controlled) aria-label for the close button",
        "type": "string",
        "default": "'Close'"
      },
      "description": {
        "description": "The wizard description (React component or element)",
        "default": "''"
      },
      "descriptionComponent": {
        "description": "Component type of the description",
        "enum": [
          "div",
          "p"
        ],
        "default": "'p'"
      },
      "descriptionId": {
        "description": "An optional id for the description",
        "type": "string"
      },
      "footer": {
        "description": "(Use to control the footer) Passing in a footer component lets you control the buttons yourself (React component or element)",
        "default": null
      },
      "hasDrawer": {
        "description": "Flag indicating the wizard has a drawer for at least one of the wizard steps",
        "type": "boolean",
        "default": false
      },
      "hasNoBodyPadding": {
        "description": "Can remove the default padding around the main body content by setting this to true",
        "type": "boolean",
        "default": false
      },
      "height": {
        "description": "Custom height of the wizard (Type: number | string)",
        "default": null
      },
      "hideClose": {
        "description": "Flag indicating whether the close button should be in the header",
        "type": "boolean",
        "default": false
      },
      "isDrawerExpanded": {
        "description": "Flag indicating the wizard drawer is expanded",
        "type": "boolean",
        "default": false
      },
      "isNavExpandable": {
        "description": "Flag indicating nav items with sub steps are expandable",
        "type": "boolean",
        "default": false
      },
      "isOpen": {
        "description": "Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided",
        "type": "boolean",
        "default": "undefined"
      },
      "mainAriaLabel": {
        "description": "Adds an accessible name to the wizard body when the body content overflows and renders\na scrollbar.",
        "type": "string",
        "default": null
      },
      "mainAriaLabelledBy": {
        "description": "Adds an accessible name to the wizard body by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the body content overflows and renders a scrollbar.",
        "type": "string",
        "default": null
      },
      "navAriaLabel": {
        "description": "Aria-label for the Nav",
        "type": "string",
        "default": null
      },
      "navAriaLabelledBy": {
        "description": "Sets aria-labelledby on nav element",
        "type": "string",
        "default": null
      },
      "nextButtonText": {
        "description": "(Unused if footer is controlled) The Next button text (React component or element)",
        "default": "'Next'"
      },
      "onBack": {
        "description": "(Unused if footer is controlled) Callback function after Back button is clicked (React component or element)",
        "default": null
      },
      "onClose": {
        "description": "Callback function to close the wizard (Function: () => void)",
        "default": "() => undefined as any"
      },
      "onCurrentStepChanged": {
        "description": "Callback function to signal the current step in the wizard (Function: (step: WizardStep) => void)"
      },
      "onExpandDrawer": {
        "description": "Callback function for when the drawer is toggled. Can be used to set browser focus in the drawer. (Function: () => void)",
        "default": "() => undefined as any"
      },
      "onGoToStep": {
        "description": "Callback function when a step in the nav is clicked (React component or element)",
        "default": null
      },
      "onNext": {
        "description": "(Unused if footer is controlled) Callback function after Next button is clicked (React component or element)",
        "default": null
      },
      "onSave": {
        "description": "(Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose (Function: () => void)"
      },
      "startAtStep": {
        "description": "The current step the wizard is on (1 or higher)",
        "type": "number",
        "default": 1
      },
      "steps": {
        "description": "The wizard steps configuration object (Type: WizardStep[])",
        "type": "array"
      },
      "title": {
        "description": "The wizard title to display if header is desired",
        "type": "string",
        "default": null
      },
      "titleId": {
        "description": "An optional id for the title",
        "type": "string"
      },
      "width": {
        "description": "Custom width of the wizard (Type: number | string)",
        "default": null
      }
    },
    "required": [
      "steps"
    ],
    "additionalProperties": false
  },
  "WizardStep-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardStep Props",
    "description": "Props for the WizardStep component",
    "properties": {
      "canJumpTo": {
        "description": "Enables or disables the step in the navigation. Enabled by default.",
        "type": "boolean"
      },
      "component": {
        "description": "The component to render in the main body (Type: any)"
      },
      "drawerPanelContent": {
        "description": "The content to render in the drawer panel (use when hasDrawer prop is set on the wizard). (Type: any)"
      },
      "drawerToggleButton": {
        "description": "Custom drawer toggle button that opens the drawer. (React component or element)"
      },
      "enableNext": {
        "description": "(Unused if footer is controlled) The condition needed to enable the Next button",
        "type": "boolean"
      },
      "hideBackButton": {
        "description": "(Unused if footer is controlled) True to hide the Back button",
        "type": "boolean"
      },
      "hideCancelButton": {
        "description": "(Unused if footer is controlled) True to hide the Cancel button",
        "type": "boolean"
      },
      "id": {
        "description": "Optional identifier (Type: string | number)"
      },
      "isDisabled": {
        "description": "Flag to disable the step in the navigation",
        "type": "boolean"
      },
      "isFinishedStep": {
        "description": "Setting to true hides the side nav and footer",
        "type": "boolean"
      },
      "name": {
        "description": "The name of the step (React component or element)"
      },
      "nextButtonText": {
        "description": "(Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. (React component or element)"
      },
      "stepNavItemProps": {
        "description": "Props to pass to the WizardNavItem (Type: React.HTMLProps<HTMLButtonElement | HTMLAnchorElement> | WizardNavItemProps)"
      },
      "steps": {
        "description": "Sub steps (Type: WizardStep[])",
        "type": "array"
      }
    },
    "required": [
      "name"
    ],
    "additionalProperties": false
  },
  "WizardProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardProps Props",
    "description": "Props for the WizardProps component",
    "properties": {
      "appendTo": {
        "description": "The parent container to append the modal to. Defaults to document.body (Type: HTMLElement | (() => HTMLElement))"
      },
      "backButtonText": {
        "description": "(Unused if footer is controlled) The Back button text (React component or element)"
      },
      "cancelButtonText": {
        "description": "(Unused if footer is controlled) The Cancel button text (React component or element)"
      },
      "className": {
        "description": "Additional classes spread to the Wizard",
        "type": "string"
      },
      "closeButtonAriaLabel": {
        "description": "(Unused if footer is controlled) aria-label for the close button",
        "type": "string"
      },
      "description": {
        "description": "The wizard description (React component or element)"
      },
      "descriptionComponent": {
        "description": "Component type of the description",
        "enum": [
          "div",
          "p"
        ]
      },
      "descriptionId": {
        "description": "An optional id for the description",
        "type": "string"
      },
      "footer": {
        "description": "(Use to control the footer) Passing in a footer component lets you control the buttons yourself (React component or element)"
      },
      "hasDrawer": {
        "description": "Flag indicating the wizard has a drawer for at least one of the wizard steps",
        "type": "boolean"
      },
      "hasNoBodyPadding": {
        "description": "Can remove the default padding around the main body content by setting this to true",
        "type": "boolean"
      },
      "height": {
        "description": "Custom height of the wizard (Type: number | string)"
      },
      "hideClose": {
        "description": "Flag indicating whether the close button should be in the header",
        "type": "boolean"
      },
      "isDrawerExpanded": {
        "description": "Flag indicating the wizard drawer is expanded",
        "type": "boolean"
      },
      "isNavExpandable": {
        "description": "Flag indicating nav items with sub steps are expandable",
        "type": "boolean"
      },
      "isOpen": {
        "description": "Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided",
        "type": "boolean"
      },
      "mainAriaLabel": {
        "description": "Adds an accessible name to the wizard body when the body content overflows and renders\na scrollbar.",
        "type": "string"
      },
      "mainAriaLabelledBy": {
        "description": "Adds an accessible name to the wizard body by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the body content overflows and renders a scrollbar.",
        "type": "string"
      },
      "navAriaLabel": {
        "description": "Aria-label for the Nav",
        "type": "string"
      },
      "navAriaLabelledBy": {
        "description": "Sets aria-labelledby on nav element",
        "type": "string"
      },
      "nextButtonText": {
        "description": "(Unused if footer is controlled) The Next button text (React component or element)"
      },
      "onBack": {
        "description": "(Unused if footer is controlled) Callback function after Back button is clicked (Type: WizardStepFunctionType)"
      },
      "onClose": {
        "description": "Callback function to close the wizard (Function: () => void)"
      },
      "onCurrentStepChanged": {
        "description": "Callback function to signal the current step in the wizard (Function: (step: WizardStep) => void)"
      },
      "onExpandDrawer": {
        "description": "Callback function for when the drawer is toggled. Can be used to set browser focus in the drawer. (Function: () => void)"
      },
      "onGoToStep": {
        "description": "Callback function when a step in the nav is clicked (Type: WizardStepFunctionType)"
      },
      "onNext": {
        "description": "(Unused if footer is controlled) Callback function after Next button is clicked (Type: WizardStepFunctionType)"
      },
      "onSave": {
        "description": "(Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose (Function: () => void)"
      },
      "startAtStep": {
        "description": "The current step the wizard is on (1 or higher)",
        "type": "number"
      },
      "steps": {
        "description": "The wizard steps configuration object (Type: WizardStep[])",
        "type": "array"
      },
      "title": {
        "description": "The wizard title to display if header is desired",
        "type": "string"
      },
      "titleId": {
        "description": "An optional id for the title",
        "type": "string"
      },
      "width": {
        "description": "Custom width of the wizard (Type: number | string)"
      }
    },
    "required": [
      "steps"
    ],
    "additionalProperties": false
  },
  "WizardState-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardState Props",
    "description": "Props for the WizardState component",
    "properties": {
      "currentStep": {
        "description": "",
        "type": "number"
      },
      "isNavOpen": {
        "description": "",
        "type": "boolean"
      }
    },
    "required": [
      "currentStep",
      "isNavOpen"
    ],
    "additionalProperties": false
  },
  "WizardStepFunctionType-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "WizardStepFunctionType Props",
    "description": "Props for the WizardStepFunctionType component",
    "properties": {},
    "additionalProperties": false
  },
  "DualListSelectorTreeItemBase-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorTreeItemBase Props",
    "description": "Props for the DualListSelectorTreeItemBase component",
    "properties": {
      "badgeProps": {
        "description": "Additional properties to pass to the option badge (Type: any)"
      },
      "checkProps": {
        "description": "Additional properties to pass to the option checkbox (Type: any)"
      },
      "children": {
        "description": "Content rendered inside the dual list selector. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "defaultExpanded": {
        "description": "Flag indicating this option is expanded by default.",
        "type": "boolean"
      },
      "hasBadge": {
        "description": "Flag indicating this option has a badge",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the option",
        "type": "string"
      },
      "isChecked": {
        "description": "Flag indicating if this open is checked.",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag indicating whether the component is disabled.",
        "type": "boolean",
        "default": false
      },
      "itemData": {
        "description": "Raw data of the option (Type: DualListSelectorTreeItemData)"
      },
      "onOptionCheck": {
        "description": "Callback fired when an option is checked (Type: (\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n  isChecked: boolean,\n  itemData: DualListSelectorTreeItemData\n) => void)"
      },
      "text": {
        "description": "Text of the option",
        "type": "string"
      },
      "useMemo": {
        "description": "Flag indicating the DualListSelector tree should utilize memoization to help render large data sets.",
        "type": "boolean"
      }
    },
    "required": [
      "id",
      "text"
    ],
    "additionalProperties": false
  },
  "DualListSelectorTreeItemProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorTreeItemProps Props",
    "description": "Props for the DualListSelectorTreeItemProps component",
    "properties": {
      "badgeProps": {
        "description": "Additional properties to pass to the option badge (Type: any)"
      },
      "checkProps": {
        "description": "Additional properties to pass to the option checkbox (Type: any)"
      },
      "children": {
        "description": "Content rendered inside the dual list selector. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "defaultExpanded": {
        "description": "Flag indicating this option is expanded by default.",
        "type": "boolean"
      },
      "hasBadge": {
        "description": "Flag indicating this option has a badge",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the option",
        "type": "string"
      },
      "isChecked": {
        "description": "Flag indicating if this open is checked.",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag indicating whether the component is disabled.",
        "type": "boolean"
      },
      "itemData": {
        "description": "Raw data of the option (Type: DualListSelectorTreeItemData)"
      },
      "onOptionCheck": {
        "description": "Callback fired when an option is checked (Type: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void)"
      },
      "text": {
        "description": "Text of the option",
        "type": "string"
      },
      "useMemo": {
        "description": "Flag indicating the DualListSelector tree should utilize memoization to help render large data sets.",
        "type": "boolean"
      }
    },
    "required": [
      "id",
      "text"
    ],
    "additionalProperties": false
  },
  "DualListSelectorTree-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorTree Props",
    "description": "Used in place of the DualListSelectorListItem sub-component when building a\ncomposable dual list selector with a tree.",
    "properties": {
      "data": {
        "description": "Data of the tree view (Type: DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[]))"
      },
      "defaultAllExpanded": {
        "description": "Sets the default expanded behavior",
        "type": "boolean",
        "default": false
      },
      "hasBadges": {
        "description": "Flag indicating if all options should have badges",
        "type": "boolean",
        "default": false
      },
      "id": {
        "description": "ID of the tree view",
        "type": "string"
      },
      "isDisabled": {
        "description": "Flag indicating if the dual list selector tree is in the disabled state",
        "type": "boolean",
        "default": false
      },
      "onOptionCheck": {
        "description": "Callback fired when an option is checked (Type: (\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n  isChecked: boolean,\n  itemData: DualListSelectorTreeItemData\n) => void)"
      }
    },
    "required": [
      "data"
    ],
    "additionalProperties": false
  },
  "DualListSelectorTreeItemData-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorTreeItemData Props",
    "description": "Props for the DualListSelectorTreeItemData component",
    "properties": {
      "badgeProps": {
        "description": "Additional properties to pass to the option badge (Type: any)"
      },
      "checkProps": {
        "description": "Additional properties to pass to the option checkbox (Type: any)"
      },
      "children": {
        "description": "Content rendered inside the dual list selector. (Type: DualListSelectorTreeItemData[])",
        "type": "array"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "defaultExpanded": {
        "description": "Flag indicating this option is expanded by default.",
        "type": "boolean"
      },
      "hasBadge": {
        "description": "Flag indicating this option has a badge",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the option",
        "type": "string"
      },
      "isChecked": {
        "description": "Checked state of the option",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag indicating whether the component is disabled.",
        "type": "boolean"
      },
      "onOptionCheck": {
        "description": "Callback fired when an option is checked (Type: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    isChosen: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void)"
      },
      "parentId": {
        "description": "Parent id of an option",
        "type": "string"
      },
      "text": {
        "description": "Text of the option",
        "type": "string"
      }
    },
    "required": [
      "id",
      "isChecked",
      "text"
    ],
    "additionalProperties": false
  },
  "DualListSelectorTreeProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorTreeProps Props",
    "description": "Used in place of the DualListSelectorListItem sub-component when building a\ncomposable dual list selector with a tree.",
    "properties": {
      "data": {
        "description": "Data of the tree view (Type: DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[]))"
      },
      "defaultAllExpanded": {
        "description": "Sets the default expanded behavior",
        "type": "boolean"
      },
      "hasBadges": {
        "description": "Flag indicating if all options should have badges",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the tree view",
        "type": "string"
      },
      "isDisabled": {
        "description": "Flag indicating if the dual list selector tree is in the disabled state",
        "type": "boolean"
      },
      "isNested": {
        "description": "",
        "type": "boolean"
      },
      "onOptionCheck": {
        "description": "Callback fired when an option is checked (Type: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void)"
      }
    },
    "required": [
      "data"
    ],
    "additionalProperties": false
  },
  "DualListSelectorPane-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorPane Props",
    "description": "Acts as the container for a list of options that are either available or chosen,\ndepending on the pane type (available or chosen). A search input and other actions,\nsuch as sorting, can also be passed into this sub-component.",
    "properties": {
      "actions": {
        "description": "Actions to place above the pane. (React component or element)"
      },
      "children": {
        "description": "A dual list selector list or dual list selector tree to be rendered in the pane. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector pane.",
        "type": "string",
        "default": "''"
      },
      "id": {
        "description": "Id of the pane.",
        "type": "string",
        "default": "getUniqueId('dual-list-selector-pane')"
      },
      "isChosen": {
        "description": "Flag indicating if this pane is the chosen pane.",
        "type": "boolean",
        "default": false
      },
      "isDisabled": {
        "description": "Flag indicating whether the component is disabled.",
        "type": "boolean",
        "default": false
      },
      "listMinHeight": {
        "description": "Minimum height of the list of options rendered in the pane. *",
        "type": "string"
      },
      "onSearch": {
        "description": "Callback for search input. To be used when isSearchable is true. (Function: (event: React.ChangeEvent<HTMLInputElement>) => void)"
      },
      "searchInput": {
        "description": "A search input placed above the list at the top of the pane, before actions. (React component or element)"
      },
      "status": {
        "description": "Status to display above the pane.",
        "type": "string",
        "default": "''"
      },
      "title": {
        "description": "Title of the pane. (React component or element)",
        "default": "''"
      }
    },
    "additionalProperties": false
  },
  "DualListSelectorPaneProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorPaneProps Props",
    "description": "Acts as the container for a list of options that are either available or chosen,\ndepending on the pane type (available or chosen). A search input and other actions,\nsuch as sorting, can also be passed into this sub-component.",
    "properties": {
      "actions": {
        "description": "Actions to place above the pane. (React component or element)"
      },
      "children": {
        "description": "A dual list selector list or dual list selector tree to be rendered in the pane. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector pane.",
        "type": "string"
      },
      "filterOption": {
        "description": " (React component or element)"
      },
      "id": {
        "description": "Id of the pane.",
        "type": "string"
      },
      "isChosen": {
        "description": "Flag indicating if this pane is the chosen pane.",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag indicating whether the component is disabled.",
        "type": "boolean"
      },
      "isSearchable": {
        "description": "",
        "type": "boolean"
      },
      "listMinHeight": {
        "description": "Minimum height of the list of options rendered in the pane. *",
        "type": "string"
      },
      "onFilterUpdate": {
        "description": " (React component or element)"
      },
      "onOptionCheck": {
        "description": " (Type: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void)"
      },
      "onOptionSelect": {
        "description": " (Type: (\n    event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    id?: string,\n    itemData?: any,\n    parentData?: any\n  ) => void)"
      },
      "onSearch": {
        "description": "Callback for search input. To be used when isSearchable is true. (Function: (event: React.ChangeEvent<HTMLInputElement>) => void)"
      },
      "onSearchInputChanged": {
        "description": " (Function: (event: React.FormEvent<HTMLInputElement>, value: string) => void)"
      },
      "onSearchInputClear": {
        "description": " (Function: (event: React.SyntheticEvent<HTMLButtonElement>) => void)"
      },
      "options": {
        "description": " (React component or element)"
      },
      "searchInput": {
        "description": "A search input placed above the list at the top of the pane, before actions. (React component or element)"
      },
      "searchInputAriaLabel": {
        "description": "",
        "type": "string"
      },
      "selectedOptions": {
        "description": " (Type: string[] | number[])"
      },
      "status": {
        "description": "Status to display above the pane.",
        "type": "string"
      },
      "title": {
        "description": "Title of the pane. (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "DualListSelectorListWrapperProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorListWrapperProps Props",
    "description": "Props for the DualListSelectorListWrapperProps component",
    "properties": {
      "children": {
        "description": "Anything that can be rendered inside of the list (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "displayOption": {
        "description": " (React component or element)"
      },
      "id": {
        "description": "Id of the dual list selector list",
        "type": "string"
      },
      "innerRef": {
        "description": " (Type: React.RefObject<HTMLDivElement | null>)"
      },
      "isDisabled": {
        "description": "Flag indicating whether the component is disabled.",
        "type": "boolean"
      },
      "onOptionSelect": {
        "description": " (Type: (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, index: number, id: string) => void)"
      },
      "options": {
        "description": " (React component or element)"
      },
      "selectedOptions": {
        "description": " (Type: string[] | number[])"
      },
      "Unknown": {
        "description": "Accessibly label for the list",
        "type": "string"
      }
    },
    "required": [
      "Unknown"
    ],
    "additionalProperties": false
  },
  "DualListSelectorListItemProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorListItemProps Props",
    "description": "Creates an individual option that can be selected and moved between the\ndual list selector panes. This is contained within the DualListSelectorList sub-component.",
    "properties": {
      "children": {
        "description": "Content rendered inside the dual list selector. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "draggableButtonAriaLabel": {
        "description": "Accessible label for the draggable button on draggable list items",
        "type": "string"
      },
      "id": {
        "description": "ID of the option.",
        "type": "string"
      },
      "innerRef": {
        "description": " (Type: React.RefObject<HTMLLIElement | null>)"
      },
      "isDisabled": {
        "description": "Flag indicating if the dual list selector is in a disabled state",
        "type": "boolean"
      },
      "isDraggable": {
        "description": "Flag indicating this item is draggable for reordering",
        "type": "boolean"
      },
      "isSelected": {
        "description": "Flag indicating the list item is currently selected.",
        "type": "boolean"
      },
      "onOptionSelect": {
        "description": "Callback fired when an option is selected. (Type: (event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, id?: string) => void)"
      },
      "orderIndex": {
        "description": "",
        "type": "number"
      }
    },
    "additionalProperties": false
  },
  "DualListSelectorList-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorList Props",
    "description": "Acts as the container for DualListSelectorListItem sub-components.",
    "properties": {
      "children": {
        "description": "Content rendered inside the dual list selector list (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "DualListSelectorListProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorListProps Props",
    "description": "Acts as the container for DualListSelectorListItem sub-components.",
    "properties": {
      "children": {
        "description": "Content rendered inside the dual list selector list (React component or element)"
      }
    },
    "additionalProperties": false
  },
  "DualListSelectorControlsWrapperProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorControlsWrapperProps Props",
    "description": "Acts as the container for the DualListSelectorControl sub-components.",
    "properties": {
      "children": {
        "description": "Anything that can be rendered inside of the wrapper. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the wrapper.",
        "type": "string"
      },
      "innerRef": {
        "description": " (Type: React.RefObject<HTMLDivElement | null>)"
      },
      "Unknown": {
        "description": "Accessible label for the dual list selector controls wrapper.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "DualListSelectorControlProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorControlProps Props",
    "description": "Renders an individual control button for moving selected options between each\ndual list selector pane.",
    "properties": {
      "children": {
        "description": "Content to be rendered in the dual list selector control. (React component or element)"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector control.",
        "type": "string"
      },
      "innerRef": {
        "description": " (Type: React.Ref<any>)"
      },
      "isDisabled": {
        "description": "Flag indicating the control is disabled.",
        "type": "boolean"
      },
      "onClick": {
        "description": "Callback fired when dual list selector control is selected. (Function: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void)"
      },
      "tooltipContent": {
        "description": "Content to be displayed in a tooltip on hover of control. (React component or element)"
      },
      "tooltipProps": {
        "description": "Additional tooltip properties passed to the tooltip. (Type: any)"
      },
      "Unknown": {
        "description": "Accessible label for the dual list selector control.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "DualListSelector-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelector Props",
    "description": "Acts as a container for all other DualListSelector sub-components when using a\ncomposable dual list selector.",
    "properties": {
      "addAll": {
        "description": "Optional callback for the dynamically built add all button (React component or element)"
      },
      "addAllAriaLabel": {
        "description": "Accessible label for the dynamically built add all button",
        "type": "string",
        "default": "'Add all'"
      },
      "addAllTooltip": {
        "description": "Tooltip content for the dynamically built add all button (React component or element)"
      },
      "addAllTooltipProps": {
        "description": "Additional tooltip properties for the dynamically built add all tooltip (Type: any)"
      },
      "addSelected": {
        "description": "Optional callback for the dynamically built add selected button (React component or element)"
      },
      "addSelectedAriaLabel": {
        "description": "Accessible label for the dynamically built add selected button",
        "type": "string",
        "default": "'Add selected'"
      },
      "addSelectedTooltip": {
        "description": "Tooltip content for the dynamically built add selected button (React component or element)"
      },
      "addSelectedTooltipProps": {
        "description": "Additional tooltip properties for the dynamically built add selected tooltip (Type: any)"
      },
      "availableOptions": {
        "description": "Options to display in the dynamically built available options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. (React component or element)",
        "default": []
      },
      "availableOptionsActions": {
        "description": "Actions to be displayed above the dynamically built available options pane. (React component or element)"
      },
      "availableOptionsSearchAriaLabel": {
        "description": "Accessible label for the search input on the dynamically built available options pane.",
        "type": "string",
        "default": "'Available search input'"
      },
      "availableOptionsStatus": {
        "description": "Status message to display above the dynamically built available options pane.",
        "type": "string"
      },
      "availableOptionsTitle": {
        "description": "Title applied to the dynamically built available options pane.",
        "type": "string",
        "default": "'Available options'"
      },
      "children": {
        "description": "Content to be rendered in the dual list selector. Panes & controls will not be built dynamically when children are provided. (React component or element)",
        "default": "''"
      },
      "chosenOptions": {
        "description": "Options to display in the dynamically built chosen options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. (React component or element)",
        "default": []
      },
      "chosenOptionsActions": {
        "description": "Actions to be displayed above the dynamically built chosen options pane. (React component or element)"
      },
      "chosenOptionsSearchAriaLabel": {
        "description": "Accessible label for the search input on the dynamically built chosen options pane.",
        "type": "string",
        "default": "'Chosen search input'"
      },
      "chosenOptionsStatus": {
        "description": "Status message to display above the dynamically built chosen options pane.",
        "type": "string"
      },
      "chosenOptionsTitle": {
        "description": "Title applied to the dynamically built chosen options pane.",
        "type": "string",
        "default": "'Chosen options'"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "controlsAriaLabel": {
        "description": "Accessible label for the dynamically built controls between the two panes.",
        "type": "string",
        "default": "'Selector controls'"
      },
      "filterOption": {
        "description": "Optional filter function for custom filtering based on search string. Used with a dynamically built search input. (React component or element)"
      },
      "id": {
        "description": "Id of the dual list selector.",
        "type": "string"
      },
      "isDisabled": {
        "description": "Flag indicating if the dual list selector is in a disabled state",
        "type": "boolean",
        "default": false
      },
      "isSearchable": {
        "description": "Flag indicating a search bar should be included above both the dynamically built available and chosen panes.",
        "type": "boolean"
      },
      "isTree": {
        "description": "Flag indicating if the dual list selector uses trees instead of simple lists",
        "type": "boolean",
        "default": false
      },
      "onAvailableOptionsSearchInputChanged": {
        "description": "A callback for when the search input value for the dynamically built available options changes. (Function: (event: React.FormEvent<HTMLInputElement>, value: string) => void)"
      },
      "onChosenOptionsSearchInputChanged": {
        "description": "A callback for when the search input value for the dynamically built chosen options changes. (Function: (event: React.FormEvent<HTMLInputElement>, value: string) => void)"
      },
      "onListChange": {
        "description": "Callback fired every time dynamically built options are chosen or removed (React component or element)"
      },
      "onOptionCheck": {
        "description": "Optional callback fired when a dynamically built option is checked (Type: (\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n  checked: boolean,\n  checkedId: string,\n  newCheckedItems: string[]\n) => void)"
      },
      "onOptionSelect": {
        "description": "Optional callback fired when a dynamically built option is selected (Type: (\n  event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n  index: number,\n  isChosen: boolean,\n  id: string,\n  itemData: any,\n  parentData: any\n) => void)"
      },
      "removeAll": {
        "description": "Optional callback for the dynamically built remove all button (React component or element)"
      },
      "removeAllAriaLabel": {
        "description": "Accessible label for the dynamically built remove all button",
        "type": "string",
        "default": "'Remove all'"
      },
      "removeAllTooltip": {
        "description": "Tooltip content for the dynamically built remove all button (React component or element)"
      },
      "removeAllTooltipProps": {
        "description": "Additional tooltip properties for the dynamically built remove all tooltip (Type: any)"
      },
      "removeSelected": {
        "description": "Optional callback for the dynamically built remove selected button (React component or element)"
      },
      "removeSelectedAriaLabel": {
        "description": "Accessible label for the dynamically built remove selected button",
        "type": "string",
        "default": "'Remove selected'"
      },
      "removeSelectedTooltip": {
        "description": "Tooltip content for the dynamically built remove selected button (React component or element)"
      },
      "removeSelectedTooltipProps": {
        "description": "Additional tooltip properties for the dynamically built remove selected tooltip (Type: any)"
      }
    },
    "additionalProperties": false
  },
  "DualListSelectorProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorProps Props",
    "description": "Acts as a container for all other DualListSelector sub-components when using a\ncomposable dual list selector.",
    "properties": {
      "addAll": {
        "description": "Optional callback for the dynamically built add all button (React component or element)"
      },
      "addAllAriaLabel": {
        "description": "Accessible label for the dynamically built add all button",
        "type": "string"
      },
      "addAllTooltip": {
        "description": "Tooltip content for the dynamically built add all button (React component or element)"
      },
      "addAllTooltipProps": {
        "description": "Additional tooltip properties for the dynamically built add all tooltip (Type: any)"
      },
      "addSelected": {
        "description": "Optional callback for the dynamically built add selected button (React component or element)"
      },
      "addSelectedAriaLabel": {
        "description": "Accessible label for the dynamically built add selected button",
        "type": "string"
      },
      "addSelectedTooltip": {
        "description": "Tooltip content for the dynamically built add selected button (React component or element)"
      },
      "addSelectedTooltipProps": {
        "description": "Additional tooltip properties for the dynamically built add selected tooltip (Type: any)"
      },
      "availableOptions": {
        "description": "Options to display in the dynamically built available options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. (React component or element)"
      },
      "availableOptionsActions": {
        "description": "Actions to be displayed above the dynamically built available options pane. (React component or element)"
      },
      "availableOptionsSearchAriaLabel": {
        "description": "Accessible label for the search input on the dynamically built available options pane.",
        "type": "string"
      },
      "availableOptionsStatus": {
        "description": "Status message to display above the dynamically built available options pane.",
        "type": "string"
      },
      "availableOptionsTitle": {
        "description": "Title applied to the dynamically built available options pane.",
        "type": "string"
      },
      "children": {
        "description": "Content to be rendered in the dual list selector. Panes & controls will not be built dynamically when children are provided. (React component or element)"
      },
      "chosenOptions": {
        "description": "Options to display in the dynamically built chosen options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. (React component or element)"
      },
      "chosenOptionsActions": {
        "description": "Actions to be displayed above the dynamically built chosen options pane. (React component or element)"
      },
      "chosenOptionsSearchAriaLabel": {
        "description": "Accessible label for the search input on the dynamically built chosen options pane.",
        "type": "string"
      },
      "chosenOptionsStatus": {
        "description": "Status message to display above the dynamically built chosen options pane.",
        "type": "string"
      },
      "chosenOptionsTitle": {
        "description": "Title applied to the dynamically built chosen options pane.",
        "type": "string"
      },
      "className": {
        "description": "Additional classes applied to the dual list selector.",
        "type": "string"
      },
      "controlsAriaLabel": {
        "description": "Accessible label for the dynamically built controls between the two panes.",
        "type": "string"
      },
      "filterOption": {
        "description": "Optional filter function for custom filtering based on search string. Used with a dynamically built search input. (React component or element)"
      },
      "id": {
        "description": "Id of the dual list selector.",
        "type": "string"
      },
      "isDisabled": {
        "description": "Flag indicating if the dual list selector is in a disabled state",
        "type": "boolean"
      },
      "isSearchable": {
        "description": "Flag indicating a search bar should be included above both the dynamically built available and chosen panes.",
        "type": "boolean"
      },
      "isTree": {
        "description": "Flag indicating if the dual list selector uses trees instead of simple lists",
        "type": "boolean"
      },
      "onAvailableOptionsSearchInputChanged": {
        "description": "A callback for when the search input value for the dynamically built available options changes. (Function: (event: React.FormEvent<HTMLInputElement>, value: string) => void)"
      },
      "onChosenOptionsSearchInputChanged": {
        "description": "A callback for when the search input value for the dynamically built chosen options changes. (Function: (event: React.FormEvent<HTMLInputElement>, value: string) => void)"
      },
      "onListChange": {
        "description": "Callback fired every time dynamically built options are chosen or removed (React component or element)"
      },
      "onOptionCheck": {
        "description": "Optional callback fired when a dynamically built option is checked (Type: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    checked: boolean,\n    checkedId: string,\n    newCheckedItems: string[]\n  ) => void)"
      },
      "onOptionSelect": {
        "description": "Optional callback fired when a dynamically built option is selected (Type: (\n    event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    id: string,\n    itemData: any,\n    parentData: any\n  ) => void)"
      },
      "removeAll": {
        "description": "Optional callback for the dynamically built remove all button (React component or element)"
      },
      "removeAllAriaLabel": {
        "description": "Accessible label for the dynamically built remove all button",
        "type": "string"
      },
      "removeAllTooltip": {
        "description": "Tooltip content for the dynamically built remove all button (React component or element)"
      },
      "removeAllTooltipProps": {
        "description": "Additional tooltip properties for the dynamically built remove all tooltip (Type: any)"
      },
      "removeSelected": {
        "description": "Optional callback for the dynamically built remove selected button (React component or element)"
      },
      "removeSelectedAriaLabel": {
        "description": "Accessible label for the dynamically built remove selected button",
        "type": "string"
      },
      "removeSelectedTooltip": {
        "description": "Tooltip content for the dynamically built remove selected button (React component or element)"
      },
      "removeSelectedTooltipProps": {
        "description": "Additional tooltip properties for the dynamically built remove selected tooltip (Type: any)"
      }
    },
    "additionalProperties": false
  },
  "DualListSelectorState-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DualListSelectorState Props",
    "description": "Props for the DualListSelectorState component",
    "properties": {
      "availableFilteredOptions": {
        "description": " (React component or element)"
      },
      "availableOptions": {
        "description": " (React component or element)"
      },
      "availableOptionsSelected": {
        "description": " (Type: number[])",
        "type": "array"
      },
      "availableTreeFilteredOptions": {
        "description": " (Type: string[])",
        "type": "array"
      },
      "availableTreeOptionsChecked": {
        "description": " (Type: string[])",
        "type": "array"
      },
      "chosenFilteredOptions": {
        "description": " (React component or element)"
      },
      "chosenOptions": {
        "description": " (React component or element)"
      },
      "chosenOptionsSelected": {
        "description": " (Type: number[])",
        "type": "array"
      },
      "chosenTreeFilteredOptions": {
        "description": " (Type: string[])",
        "type": "array"
      },
      "chosenTreeOptionsChecked": {
        "description": " (Type: string[])",
        "type": "array"
      }
    },
    "required": [
      "availableFilteredOptions",
      "availableOptions",
      "availableOptionsSelected",
      "availableTreeFilteredOptions",
      "availableTreeOptionsChecked",
      "chosenFilteredOptions",
      "chosenOptions",
      "chosenOptionsSelected",
      "chosenTreeFilteredOptions",
      "chosenTreeOptionsChecked"
    ],
    "additionalProperties": false
  },
  "Droppable-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Droppable Props",
    "description": "Props for the Droppable component",
    "properties": {
      "children": {
        "description": "Content rendered inside DragDrop (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "droppableId": {
        "description": "Id to be passed back on drop events",
        "type": "string",
        "default": "'defaultId'"
      },
      "hasNoWrapper": {
        "description": "Don't wrap the component in a div. Requires passing a single child.",
        "type": "boolean",
        "default": false
      },
      "zone": {
        "description": "Name of zone that items can be dragged between. Should specify if there is more than one Droppable on the page.",
        "type": "string",
        "default": "'defaultZone'"
      }
    },
    "additionalProperties": false
  },
  "DroppableProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DroppableProps Props",
    "description": "Props for the DroppableProps component",
    "properties": {
      "children": {
        "description": "Content rendered inside DragDrop (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "droppableId": {
        "description": "Id to be passed back on drop events",
        "type": "string"
      },
      "hasNoWrapper": {
        "description": "Don't wrap the component in a div. Requires passing a single child.",
        "type": "boolean"
      },
      "zone": {
        "description": "Name of zone that items can be dragged between. Should specify if there is more than one Droppable on the page.",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Draggable-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Draggable Props",
    "description": "Props for the Draggable component",
    "properties": {
      "children": {
        "description": "Content rendered inside DragDrop (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "hasNoWrapper": {
        "description": "Don't wrap the component in a div. Requires passing a single child.",
        "type": "boolean",
        "default": false
      },
      "style": {
        "description": " (Type: No type info)",
        "default": {}
      }
    },
    "additionalProperties": false
  },
  "DraggableProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DraggableProps Props",
    "description": "Props for the DraggableProps component",
    "properties": {
      "children": {
        "description": "Content rendered inside DragDrop (React component or element)"
      },
      "className": {
        "description": "Class to add to outer div",
        "type": "string"
      },
      "hasNoWrapper": {
        "description": "Don't wrap the component in a div. Requires passing a single child.",
        "type": "boolean"
      }
    },
    "additionalProperties": false
  },
  "DroppableItem-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DroppableItem Props",
    "description": "Props for the DroppableItem component",
    "properties": {
      "draggableNodes": {
        "description": " (Type: HTMLElement[])",
        "type": "array"
      },
      "draggableNodesRects": {
        "description": " (Type: DOMRect[])",
        "type": "array"
      },
      "isDraggingHost": {
        "description": "",
        "type": "boolean"
      },
      "node": {
        "description": " (Type: HTMLElement)"
      },
      "rect": {
        "description": " (Type: DOMRect)"
      }
    },
    "required": [
      "draggableNodes",
      "draggableNodesRects",
      "isDraggingHost",
      "node",
      "rect"
    ],
    "additionalProperties": false
  },
  "DragDrop-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DragDrop Props",
    "description": "Props for the DragDrop component",
    "properties": {
      "children": {
        "description": "Potentially Droppable and Draggable children (React component or element)"
      },
      "onDrag": {
        "description": "Callback for drag event. Return true to allow drag, false to disallow. (Function: (source: DraggableItemPosition) => boolean)",
        "default": "() => true"
      },
      "onDragMove": {
        "description": "Callback on mouse move while dragging. (Function: (source: DraggableItemPosition, dest?: DraggableItemPosition) => void)",
        "default": "() => {}"
      },
      "onDrop": {
        "description": "Callback for drop event. Return true to allow drop, false to disallow. (Function: (source: DraggableItemPosition, dest?: DraggableItemPosition) => boolean)",
        "default": "() => false"
      }
    },
    "additionalProperties": false
  },
  "DraggableItemPosition-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DraggableItemPosition Props",
    "description": "Props for the DraggableItemPosition component",
    "properties": {
      "droppableId": {
        "description": "Parent droppableId",
        "type": "string"
      },
      "index": {
        "description": "Index of item in parent Droppable",
        "type": "number"
      }
    },
    "required": [
      "droppableId",
      "index"
    ],
    "additionalProperties": false
  },
  "DragDropProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "DragDropProps Props",
    "description": "Props for the DragDropProps component",
    "properties": {
      "children": {
        "description": "Potentially Droppable and Draggable children (React component or element)"
      },
      "onDrag": {
        "description": "Callback for drag event. Return true to allow drag, false to disallow. (Function: (source: DraggableItemPosition) => boolean)"
      },
      "onDragMove": {
        "description": "Callback on mouse move while dragging. (Function: (source: DraggableItemPosition, dest?: DraggableItemPosition) => void)"
      },
      "onDrop": {
        "description": "Callback for drop event. Return true to allow drop, false to disallow. (Function: (source: DraggableItemPosition, dest?: DraggableItemPosition) => boolean)"
      }
    },
    "additionalProperties": false
  },
  "ChipGroup-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ChipGroup Props",
    "description": "Props for the ChipGroup component",
    "properties": {
      "aria-label": {
        "description": "Aria label for chip group that does not have a category name",
        "type": "string",
        "default": "'Chip group category'"
      },
      "categoryName": {
        "description": "Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied",
        "type": "string",
        "default": "''"
      },
      "children": {
        "description": "Content rendered inside the chip group. Should be <Chip> elements. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the chip item",
        "type": "string"
      },
      "closeBtnAriaLabel": {
        "description": "Aria label for close button",
        "type": "string",
        "default": "'Close chip group'"
      },
      "collapsedText": {
        "description": "Customizable template string. Use variable \"${remaining}\" for the overflow chip count.",
        "type": "string",
        "default": "'${remaining} more'"
      },
      "defaultIsOpen": {
        "description": "Flag for having the chip group default to expanded",
        "type": "boolean",
        "default": false
      },
      "expandedText": {
        "description": "Customizable \"Show Less\" text string",
        "type": "string",
        "default": "'Show Less'"
      },
      "isClosable": {
        "description": "Flag if chip group can be closed",
        "type": "boolean",
        "default": false
      },
      "numChips": {
        "description": "Set number of chips to show before overflow",
        "type": "number",
        "default": 3
      },
      "onClick": {
        "description": "Function that is called when clicking on the chip group close button or on an overflow chip (Function: (event: React.MouseEvent) => void)"
      },
      "onOverflowChipClick": {
        "description": "Function that is called when clicking on the overflow (expand/collapse) chip button (Function: (event: React.MouseEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if the category name text is longer (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')",
        "default": "'top'"
      }
    },
    "additionalProperties": false
  },
  "ChipGroupProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ChipGroupProps Props",
    "description": "Props for the ChipGroupProps component",
    "properties": {
      "categoryName": {
        "description": "Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied",
        "type": "string"
      },
      "children": {
        "description": "Content rendered inside the chip group. Should be <Chip> elements. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the chip item",
        "type": "string"
      },
      "closeBtnAriaLabel": {
        "description": "Aria label for close button",
        "type": "string"
      },
      "collapsedText": {
        "description": "Customizable template string. Use variable \"${remaining}\" for the overflow chip count.",
        "type": "string"
      },
      "defaultIsOpen": {
        "description": "Flag for having the chip group default to expanded",
        "type": "boolean"
      },
      "expandedText": {
        "description": "Customizable \"Show Less\" text string",
        "type": "string"
      },
      "isClosable": {
        "description": "Flag if chip group can be closed",
        "type": "boolean"
      },
      "numChips": {
        "description": "Set number of chips to show before overflow",
        "type": "number"
      },
      "onClick": {
        "description": "Function that is called when clicking on the chip group close button or on an overflow chip (Function: (event: React.MouseEvent) => void)"
      },
      "onOverflowChipClick": {
        "description": " (Function: (event: React.MouseEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if the category name text is longer",
        "enum": [
          "auto",
          "top",
          "bottom",
          "left",
          "right",
          "top-start",
          "top-end",
          "bottom-start",
          "bottom-end",
          "left-start",
          "left-end",
          "right-start",
          "right-end"
        ]
      },
      "Unknown": {
        "description": "Aria label for chip group that does not have a category name",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "Chip-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "Chip Props",
    "description": "Props for the Chip component",
    "properties": {
      "badge": {
        "description": "Badge to add to the chip. The badge will be rendered after the chip text. (React component or element)"
      },
      "children": {
        "description": "Content rendered inside the label. (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the label.",
        "type": "string",
        "default": "''"
      },
      "closeBtn": {
        "description": "Node for custom close button. (React component or element)"
      },
      "closeBtnAriaLabel": {
        "description": "Aria label for close button",
        "type": "string"
      },
      "closeBtnProps": {
        "description": "Additional properties for the default close button. (Type: any)"
      },
      "color": {
        "description": "Color of the label.",
        "enum": [
          "blue",
          "teal",
          "green",
          "orange",
          "purple",
          "red",
          "orangered",
          "grey",
          "yellow"
        ]
      },
      "component": {
        "description": "Component that will be used for chip. It is recommended that <button> or <li>  are used when the chip is an overflow chip. (React component or element)"
      },
      "editableProps": {
        "description": "Additional props passed to the editable label text div. Optionally passing onInput and onBlur callbacks will allow finer custom text input control. (Type: any)"
      },
      "href": {
        "description": "Href for a label that is a link. If present, the label will change to an anchor element. This should not be passed in if the onClick prop is also passed in.",
        "type": "string"
      },
      "icon": {
        "description": "Icon added to the left of the label text. Overrides the icon set by the status property. (React component or element)"
      },
      "isClickable": {
        "description": "Flag indicating the label is clickable. This flag will automatically be set if a href is passed, or if an onClick handler is passed and the label is not an overflow or add variant. This should be manually set when using the render prop.",
        "type": "boolean"
      },
      "isCompact": {
        "description": "Flag indicating the label is compact.",
        "type": "boolean"
      },
      "isDisabled": {
        "description": "Flag indicating the label is disabled. Works only on clickable labels, so either href or onClick props must be passed in.",
        "type": "boolean"
      },
      "isEditable": {
        "description": "Flag indicating the label is editable.",
        "type": "boolean"
      },
      "isOverflowChip": {
        "description": "Flag indicating if the chip is an overflow chip",
        "type": "boolean",
        "default": false
      },
      "isReadOnly": {
        "description": "Flag indicating if chip is read only",
        "type": "boolean",
        "default": false
      },
      "onClick": {
        "description": "Callback for when the label is clicked. This should not be passed in if the href or isEditable props are also passed in. (Function: (event: React.MouseEvent) => void)",
        "default": "(_e: React.MouseEvent) => undefined as any"
      },
      "onClose": {
        "description": "Close click callback for removable labels. If present, label will have a close button. (Function: (event: React.MouseEvent) => void)"
      },
      "onEditCancel": {
        "description": "Callback when an editable label cancels an edit. (Function: (event: KeyboardEvent, previousText: string) => void)"
      },
      "onEditComplete": {
        "description": "Callback when an editable label completes an edit. (Type: (event: MouseEvent | KeyboardEvent, newText: string) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "ouiaSafe": {
        "description": "",
        "type": "boolean"
      },
      "render": {
        "description": "Forwards the label content and className to rendered function.  Use this prop for react router support. (React component or element)"
      },
      "status": {
        "description": "Status of the label with a respective icon and color. Overrides the color set by the color property.",
        "enum": [
          "success",
          "warning",
          "danger",
          "info",
          "custom"
        ]
      },
      "textMaxWidth": {
        "description": "The max width of the label before it is truncated. Can be any valid CSS unit, such as '100%', '100px', or '16ch'.",
        "type": "string",
        "default": "'16ch'"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if text is truncated (Type: | TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end')",
        "default": "'top'"
      },
      "variant": {
        "description": "Variant of the label.",
        "enum": [
          "outline",
          "filled",
          "overflow",
          "add"
        ]
      }
    },
    "additionalProperties": false
  },
  "ChipProps-deprecated": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "title": "ChipProps Props",
    "description": "Props for the ChipProps component",
    "properties": {
      "badge": {
        "description": "Badge to add to the chip. The badge will be rendered after the chip text. (React component or element)"
      },
      "children": {
        "description": "Content rendered inside the chip text (React component or element)"
      },
      "className": {
        "description": "Additional classes added to the chip item",
        "type": "string"
      },
      "closeBtnAriaLabel": {
        "description": "Aria Label for close button",
        "type": "string"
      },
      "component": {
        "description": " (React component or element)"
      },
      "isOverflowChip": {
        "description": "Flag indicating if the chip is an overflow chip",
        "type": "boolean"
      },
      "isReadOnly": {
        "description": "Flag indicating if chip is read only",
        "type": "boolean"
      },
      "onClick": {
        "description": "Function that is called when clicking on the chip close button (Function: (event: React.MouseEvent) => void)"
      },
      "ouiaId": {
        "description": "Value to overwrite the randomly generated data-ouia-component-id. (Type: number | string)"
      },
      "textMaxWidth": {
        "description": "Css property expressed in percentage or any css unit that overrides the default value of the max-width of the chip's text",
        "type": "string"
      },
      "tooltipPosition": {
        "description": "Position of the tooltip which is displayed if text is longer",
        "enum": [
          "auto",
          "top",
          "bottom",
          "left",
          "right",
          "top-start",
          "top-end",
          "bottom-start",
          "bottom-end",
          "left-start",
          "left-end",
          "right-start",
          "right-end"
        ]
      }
    },
    "additionalProperties": false
  }
}
